<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
 
 <title>Will Price</title>
 <link href="http://www.willprice.org/feed/" rel="self"/>
 <link href="http://www.willprice.org"/>
 <updated>2016-05-12T08:08:45+01:00</updated>
 <id>http://willprice.org/</id>
 <author>
   <name>Will Price</name>
   <email>willprice94+blog@gmail.com</email>
 </author>

 
 <entry>
   <title>Mini-project: Horizontally scale a web service using Docker</title>
   <link href="http://willprice.org//2016/04/10/sc2016-horizontally-scale-a-service.html"/>
   <updated>2016-04-10T00:00:00+01:00</updated>
   <id>http://willprice.org/2016/04/10/sc2016-horizontally-scale-a-service</id>
   <content type="html">&lt;p&gt;&lt;em&gt;Estimated Duration:&lt;/em&gt; 2-4 hours&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Author:&lt;/em&gt; Will Price, Codemanship&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Language(s)/stacks:&lt;/em&gt; Any, Docker&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Goal:&lt;/em&gt; Produce a simple web service that is easily overwhelmed by multiple
concurrent requests.  To handle more concurrent users run multiple instances of
the service behind a reverse proxy to abstract away which instance you are
querying. Dynamically scale the number of instances of the service whilst
updating the reverse proxy configuration.&lt;/p&gt;

&lt;h2 id=&quot;summary&quot;&gt;Summary:&lt;/h2&gt;

&lt;p&gt;Create a web service in your favourite language with the following end point
GET &lt;code class=&quot;highlighter-rouge&quot;&gt;/is_prime/&amp;lt;integer&amp;gt;&lt;/code&gt; that responds with the JSON:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&quot;integer&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1234&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&quot;is_prime&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;kc&quot;&gt;false&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;Do this using the square root search method: iterate a candidate factor variable
up to the square root of the integer, for each number checking whether the
remainder of the integer divided by the candidate factor is zero (if it is, then
it is a factor), this has the worst case complexity O(\sqrt(n)).&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Dockerise your web service&lt;/li&gt;
  &lt;li&gt;Run multiple instances of your web service and manually configure a reverse
proxy to allocate requests using &lt;a href=&quot;https://en.wikipedia.org/wiki/Round-robin_scheduling&quot;&gt;round robin&lt;/a&gt; scheduling.&lt;/li&gt;
  &lt;li&gt;Dynamically configure the reverse proxy based on the running containers using
&lt;a href=&quot;https://github.com/jwilder/docker-gen&quot;&gt;Docker-gen&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;continuous-integration-extension&quot;&gt;Continuous Integration Extension:&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;Build a container on each commit to your git repository using travis, jenkins,
your favourite CI server.&lt;/li&gt;
  &lt;li&gt;On a successful image build, push that image to the docker registry from your
CI server.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;example&quot;&gt;Example&lt;/h2&gt;
&lt;p&gt;See my own attempt on &lt;a href=&quot;https://github.com/willprice/horizontally-scaling-webservices-using-docker&quot;&gt;github&lt;/a&gt;&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>Loop invariants</title>
   <link href="http://willprice.org//2015/02/02/loop-invariants.html"/>
   <updated>2015-02-02T00:00:00+00:00</updated>
   <id>http://willprice.org/2015/02/02/loop-invariants</id>
   <content type="html">&lt;p&gt;Prove that the given the code calculates the factorial of a &lt;em&gt;positive&lt;/em&gt; integer
variable &lt;code class=&quot;highlighter-rouge&quot;&gt;x&lt;/code&gt;.&lt;/p&gt;

&lt;div class=&quot;language-c highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;y&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;while&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;--&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;y&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;y&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;We can annotate each line of code describe the properties of the variables (have
a look into Hoare logic for more information).&lt;/p&gt;

&lt;div class=&quot;language-c highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c1&quot;&gt;// Subscripts denote the number of loops we have iterated through
&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;// Since our input is a positive integer we know it is greater than 0
// { x_0 &amp;gt; 0 }
&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;y&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;// { x_0 &amp;gt; 0, y_0 = x_0 }
&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;while&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;--&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;y&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;// { x_{i + 1} = x_i - 1, y_i = x_0 * x_1 * ... * x_i }
&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;// { x_j = 1 }
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;We can prove validity using the following conditions&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Pre loop: (1): &lt;code class=&quot;highlighter-rouge&quot;&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;err&quot;&gt;x_0&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;err&quot;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;err&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;/code&gt;, (2): &lt;code class=&quot;highlighter-rouge&quot;&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;err&quot;&gt;y_0&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;err&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;err&quot;&gt;x_0&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;Inside of loop: (3): &lt;code class=&quot;highlighter-rouge&quot;&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;err&quot;&gt;x_{i&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;err&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;err&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;err&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;err&quot;&gt;x_i&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;err&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;err&quot;&gt;}&lt;/span&gt;&lt;/code&gt; and (4): &lt;code class=&quot;highlighter-rouge&quot;&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;err&quot;&gt;y_i&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;err&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;err&quot;&gt;x_0&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;err&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;err&quot;&gt;x_1&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;err&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;err&quot;&gt;...&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;err&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;err&quot;&gt;x_i&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;Post loop: (5): &lt;code class=&quot;highlighter-rouge&quot;&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;err&quot;&gt;x_j&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;err&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;err&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;The loop runs &lt;code class=&quot;highlighter-rouge&quot;&gt;j&lt;/code&gt; times since the loop will only execute when &lt;code class=&quot;highlighter-rouge&quot;&gt;x_i &amp;gt; 1&lt;/code&gt;, and
from (1), (3), (4) and (5) we can deduce that &lt;code class=&quot;highlighter-rouge&quot;&gt;y_j =  x_0 * x_1 * ... * x_j = x
* (x - 1) * ... * 1&lt;/code&gt; which is the factorial of &lt;code class=&quot;highlighter-rouge&quot;&gt;x&lt;/code&gt;.&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>Errors pushing via git in PyCharm/IntelliJ</title>
   <link href="http://willprice.org//2014/08/20/errors-pushing-via-git-in-pycharmintellij.html"/>
   <updated>2014-08-20T00:00:00+01:00</updated>
   <id>http://willprice.org/2014/08/20/errors-pushing-via-git-in-pycharmintellij</id>
   <content type="html">&lt;p&gt;If you find yourself in the same position as I did where trying to push via an
IntelliJ based IDE isn’t working (in my case PyCharm), and you’re getting the
error: &lt;code class=&quot;highlighter-rouge&quot;&gt;Push failed: fatal: Could not read from remote repository&lt;/code&gt;. You might
find that changing your SSH executable from the &lt;code class=&quot;highlighter-rouge&quot;&gt;built-in&lt;/code&gt; to the system
&lt;code class=&quot;highlighter-rouge&quot;&gt;native&lt;/code&gt; will fix your woes. Pop into the preferences of your project and
navigate to &lt;code class=&quot;highlighter-rouge&quot;&gt;Version Control/Git/SSH executable&lt;/code&gt; and flip that setting to
&lt;code class=&quot;highlighter-rouge&quot;&gt;native&lt;/code&gt;.&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>Properties in python</title>
   <link href="http://willprice.org//2014/08/19/properties-in-python.html"/>
   <updated>2014-08-19T00:00:00+01:00</updated>
   <id>http://willprice.org/2014/08/19/properties-in-python</id>
   <content type="html">&lt;p&gt;As we all know, it’s important to wrap field access of an object in a function
e.g. &lt;code class=&quot;highlighter-rouge&quot;&gt;get_name&lt;/code&gt; simply returns &lt;code class=&quot;highlighter-rouge&quot;&gt;self.name&lt;/code&gt;. In python one can consider this an
antipattern since we have these wonderful things called &lt;code class=&quot;highlighter-rouge&quot;&gt;properties&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;properties&lt;/code&gt; allow you to add a getter (or setter) when you need one, rather
than from the get go. Imagine you’d written a tonne of client code where you’re
accessing a password of a user: e.g. &lt;code class=&quot;highlighter-rouge&quot;&gt;user.password&lt;/code&gt;, but you’ve now decided
that any time the user password is accessed it should be logged, you might be
thinking “Oh god no, why didn’t I use a getter, I could have put the logging
call inside of that”. Well no worries, you can transparently do this!&lt;/p&gt;

&lt;p&gt;Go from this:&lt;/p&gt;

&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;User&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;object&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;__init__&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;password&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
        &lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;name&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;name&lt;/span&gt;
        &lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;password&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;password&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;p&gt;To this:&lt;/p&gt;

&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;User&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;object&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;__init__&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;password&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
        &lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;name&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;name&lt;/span&gt;
        &lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;_password&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;password&lt;/span&gt;

    &lt;span class=&quot;nd&quot;&gt;@property&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;password&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;Password of user &lt;/span&gt;&lt;span class=&quot;si&quot;&gt;%&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;s, was accessed&quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;%&lt;/span&gt; &lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;_password&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;p&gt;Now any time someone calls &lt;code class=&quot;highlighter-rouge&quot;&gt;user.password&lt;/code&gt;  it’ll call the &lt;code class=&quot;highlighter-rouge&quot;&gt;password&lt;/code&gt; function,
log the password access and then return the property.&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>Choosing a target platform</title>
   <link href="http://willprice.org//2014/06/02/choosing-a-target-platform.html"/>
   <updated>2014-06-02T00:00:00+01:00</updated>
   <id>http://willprice.org/2014/06/02/choosing-a-target-platform</id>
   <content type="html">&lt;p&gt;I’m currently working on a project with my mentor. We first chose the simplest user
story to work on that didn’t depend on any other user stories.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;Given a list of players for all games&lt;/p&gt;

  &lt;p&gt;When a game is selected&lt;/p&gt;

  &lt;p&gt;Then the list is filtered to only include players 
capable of playing that game.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;The idea of the platform is to allow players to write AI programs that are able
to play games (e.g. Noughts and crosses, Chess, Hangman…). Players can challenge
other players to games in which their AIs play against each other.&lt;/p&gt;

&lt;p&gt;Games are held on a server to eliminate issues of cheating that may
occur if the games were held client-side. I chose Python and Django to
implement the necessary code server-side to pass the story. Initially
we had intended to have a web interface in which games were played,
however evaluating the TDD and acceptance testing frameworks in
javascript was less than favourable. So I instead had to
look into other ways to pass the client-side part of the user story
which leads us onto the topic of this post: How do you choose a target
platform?&lt;/p&gt;

&lt;p&gt;There are so many platforms you can develop for: Android, iOS, the web, Windows,
OS X, Linux, GTK, QT, KDE, Cocoa, etc. Ideally you choose the platform that
maximises the number of users that will be able to use your system, minimise the
time taken to develop and maximise the user experience. Unfortunately no silver
bullet exists, and so you have to make trade-offs on each of these points.&lt;/p&gt;

&lt;p&gt;If you develop for the web you maximise your audience at the cost of having to
check your website works in a hundred different browsers at hundreds of
different resolutions using a language that was designed in 10 days with no
built-in support for modules, which requires at least 10 different libraries to
program at a sane level of abstraction.&lt;/p&gt;

&lt;p&gt;If you develop for iOS, then you severely restrict your audience to those owning
i-products. Android has a larger user base, but then you have to deal with the
plethora of different devices that your application has to work well on.&lt;/p&gt;

&lt;p&gt;You could still develop a desktop application for each major platform, but that
racks up large development costs. You could trade in part of your user
experience and develop in Java/Swing so that the application runs on all
platforms, but requires your users to download a 200MB language and wait 2-20
seconds for your application to start up every time.&lt;/p&gt;

&lt;p&gt;Since the target audience for our application is beginner developers such as
Raspberry Pi enthusiasts, then we’d better make sure our program runs well on
Linux (that, and I develop on Linux ;), but it should also at least run on
Windows since almost everybody uses it, and a large proportion of our target
audience will likely be using it. OS X shouldn’t be too hard to support if we
require Windows and Linux compatibility. What technology can we choose to
develop for these platforms?&lt;/p&gt;

&lt;p&gt;Well there are two groups:
- The web
- Cross platform languages (with cross platform GUIs)&lt;/p&gt;

&lt;p&gt;I’ve already established that I’d like to avoid web development for
the time being. This leaves us with a cross platform language to
choose, and by cross platform I require that I don’t have to
constantly think about platform incompatibilities, I want to leave
that up to libraries to handle. Since I’ve already developed the
server-side in Python, I’d like to keep the code base as homogeneous
as possible. Python is cross platform and has a decent selection of
good cross platform GUI toolkits (wxpython, tkinter). After looking
into some examples with both toolkits I’ll decide which to use. Python
can also be quite easily be packaged into a executable that includes
the interpreter/VM in a reasonable size (&amp;lt; 20MB).&lt;/p&gt;

&lt;p&gt;My mentor suggested Android as a target platform since it’s programmed in Java,
a language he’s an expert in, and we’ve both paired on lots of Java katas
before. I raised the point that this seems to fragment our user experience to
programming on a laptop/desktop and challenging on a phone/tablet, therefore
restricting our audience and making development harder (testing on devices). He
countered that we needn’t have just one client, but that we need to push on and
develop some client to pass the acceptance test. I’m in two minds about this;
I’m not sure whether we should target Android for our first client since in my
eyes, a desktop client would be more useful to our target audience, and it means
programming in a different language which will surely duplicate some of the code
that was developed for the server. On the other hand I’m unsure how difficult
writing a GUI program in Python is going to be, if I come across unforeseen
issues then development might stall again, which we want to try and avoid in the
next month since we want to present what we’ve been doing at the BCS SPA
conference–It’d be good to have some MVP to show off.&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>Testing client side javascript</title>
   <link href="http://willprice.org//2014/04/11/testing-client-side-js.html"/>
   <updated>2014-04-11T00:00:00+01:00</updated>
   <id>http://willprice.org/2014/04/11/testing-client-side-js</id>
   <content type="html">&lt;p&gt;I’ve recently had to look at writing some client-side javascript for an
application I’m developing. Since I love testing, I had to have a look at what
testing framework I should use. Javascript is not Java, there are lots and lots
of testing frameworks. After browsing the most popular projects I decided on
using &lt;a href=&quot;http://visionmedia.github.io/mocha/&quot;&gt;Mocha&lt;/a&gt; to handle test running and
suite generation with &lt;a href=&quot;http://chaijs.com&quot;&gt;Chai&lt;/a&gt; which is used to provide a rich
library of assertions.&lt;/p&gt;

&lt;p&gt;These tools can be run on the browser and manipulate the DOM to show outputs. I
personally think this method is quite ugly and slow so I looked into running
things headlessly. A few immediate choices came to mind:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;http://nodejs.org/&quot;&gt;Node.js&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://phantomjs.org/&quot;&gt;PhantomJS&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Rhino&quot;&gt;Rhino&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;These projects all run javascript off the browser and hence some don’t support
DOM manipulation (e.g. Rhino).&lt;/p&gt;

&lt;p&gt;PhantomJS supports DOM manipulation which is quite a nice feature
if you are eventually going to run your javascript client-side.&lt;/p&gt;

&lt;p&gt;Having recently used node for a university project, I thought I’d try something
else that isn’t built on an asynchronous model since I found this made testing
quite difficult. In the end I chose PhantomJS as I running Rhino regularly
sounded quite unpleasant given the time it takes the JVM to start.&lt;/p&gt;

&lt;p&gt;Mocha is well supported under PhantomJS and already has a &lt;a href=&quot;https://github.com/metaskills/mocha-phantomjs&quot;&gt;runner
availabe&lt;/a&gt;. I’ll give a few
examples of how to get all these libraries cooperating.&lt;/p&gt;

&lt;p&gt;First up you’ll need &lt;code class=&quot;highlighter-rouge&quot;&gt;node&lt;/code&gt; installed to give you access to the &lt;code class=&quot;highlighter-rouge&quot;&gt;npm&lt;/code&gt; package
manager. It seems like most js projects have adopted it as a package manager
irrespective of whether they target Node.js or the browser.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$ sudo npm install -g mocha-phantomjs phantomjs
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;will pull in PhantomJS, Mocha and the PhantomJS Mocha runner that we’ll use to
run our tests in the command line.&lt;/p&gt;

&lt;p&gt;Start a new project somewhere and add a source and tests directory.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$ mkdir tests src
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;Since we’re PhantomJS we need an HTML page that will be run in the headless
browser, this is mainly just a shell that will include all the javascript code
that we wish to run. The advantage of using a platform like Node.js or Rhino
means you can skip this extra step, but then you also lose the ability to
perform DOM manipulation.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$ touch tests.html
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;This file will be used to included all your test suites, this might get pretty
ugly/slow if you’ve got many and large test suites, but you can always break
them up, or you could use python and jinja2 to dynamically create HTML pages
based on the js files you have in your tests directory (I’m sure you could do
this in js as well, but I’m not really familiar with the ecosystem).&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$ cat &amp;gt; tests.HTML &lt;span class=&quot;err&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;lt; EOF&lt;/span&gt;
&lt;span class=&quot;err&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;html&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;nt&quot;&gt;&amp;lt;head&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;meta&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;charset=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;utf-8&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;link&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;rel=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;stylesheet&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;href=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;../node_modules/mocha/mocha.css&quot;&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;/&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;nt&quot;&gt;&amp;lt;/head&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;nt&quot;&gt;&amp;lt;body&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;div&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;id=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;mocha&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;script &lt;/span&gt;&lt;span class=&quot;na&quot;&gt;src=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;../node_modules/mocha/mocha.js&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&amp;lt;/script&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;script &lt;/span&gt;&lt;span class=&quot;na&quot;&gt;src=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;../node_modules/chai/chai.js&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&amp;lt;/script&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;script&amp;gt;&lt;/span&gt;
      &lt;span class=&quot;nx&quot;&gt;mocha&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;ui&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&#39;tdd&#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
      &lt;span class=&quot;nx&quot;&gt;mocha&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;reporter&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&#39;html&#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
      &lt;span class=&quot;nx&quot;&gt;assert&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;chai&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;assert&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;/script&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;script &lt;/span&gt;&lt;span class=&quot;na&quot;&gt;src=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;src/fibonacci.js&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&amp;lt;/script&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;script &lt;/span&gt;&lt;span class=&quot;na&quot;&gt;src=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;tests/fibonacci&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&amp;lt;/script&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;script&amp;gt;&lt;/span&gt;
      &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;window&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;mochaPhantomJS&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;mochaPhantomJS&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;run&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
      &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;mocha&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;run&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;/script&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;nt&quot;&gt;&amp;lt;/body&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;/html&amp;gt;&lt;/span&gt;
EOF    
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;This is just a simple document that will include the necessary libraries, setup
Mocha appropriately:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Import Mocha and Chai&lt;/li&gt;
  &lt;li&gt;Use the TDD interface instead of BDD&lt;/li&gt;
  &lt;li&gt;Use the reporter ‘html’, this allows us to run open the page with a
browser and check out the results in there too. We’ll specify a different
reporter on the command line when developing code and running tests.&lt;/li&gt;
  &lt;li&gt;Alias &lt;code class=&quot;highlighter-rouge&quot;&gt;chai.assert&lt;/code&gt; as &lt;code class=&quot;highlighter-rouge&quot;&gt;assert&lt;/code&gt; for nicer looking test code&lt;/li&gt;
  &lt;li&gt;Finally check whether the tests are being executed in PhantomJS and use the
mochaPhantomJS runner if they are, otherwise execute Mocha directly.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Evidently this HTML has some dependencies that need to be installed before the
code can be run.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$ npm install --save mocha chai
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;will install the necessary testing libraries and the &lt;code class=&quot;highlighter-rouge&quot;&gt;--save&lt;/code&gt; flag will produce
a package.json file that can be distributed with your project for other users to
automate downloading dependencies.&lt;/p&gt;

&lt;p&gt;The HTML sources &lt;code class=&quot;highlighter-rouge&quot;&gt;tests/test_file.js&lt;/code&gt; which needs to be created, this is simply
an example test file:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$ cat &amp;gt; tests/fibonacci.js &amp;lt;&amp;lt; EOF
suite(&#39;Recursive fibonacci tests&#39;, function() {
    test(&#39;fib(0) = 0&#39;, function() {
        assert.equal(0, fib(0));
    });
    test(&#39;fib(2) = 1&#39;, function() {
        assert.equal(1, fib(1));
    });
});
EOF

$ cat &amp;gt; src/fibonacci.js &amp;lt;&amp;lt; EOF
function fib(n) {
    if (n &amp;lt; 2) { return n; }
    return fib(n - 1) + fib(n - 2);
}
EOF
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;Now everything is set up you can run your tests:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$ mocha-phantomjs tests.html
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;Quite nice really. Look into Sinon.js for a nice mocking framework&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>Eduroam on the raspberry pi</title>
   <link href="http://willprice.org//2014/03/17/eduroam-on-the-raspberry-pi.html"/>
   <updated>2014-03-17T00:00:00+00:00</updated>
   <id>http://willprice.org/2014/03/17/eduroam-on-the-raspberry-pi</id>
   <content type="html">&lt;p&gt;For far too long have I not documented the process of getting to connected to
eduroam with a raspberry pi. This time I endeavour to document the process.`&lt;/p&gt;

&lt;p&gt;The general process of getting up and running with wireless (on the command
line) on Raspbian is as follows:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;Disable network service&lt;/li&gt;
  &lt;li&gt;Write a &lt;code class=&quot;highlighter-rouge&quot;&gt;wpa_supplicant&lt;/code&gt; configuration file with your username and password.&lt;/li&gt;
  &lt;li&gt;Connect to the wireless network using &lt;code class=&quot;highlighter-rouge&quot;&gt;wpa_supplicant&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;Request an IP address with &lt;code class=&quot;highlighter-rouge&quot;&gt;dhclient&lt;/code&gt;.&lt;/li&gt;
&lt;/ol&gt;

&lt;h1 id=&quot;disable-network-service&quot;&gt;Disable network service&lt;/h1&gt;
&lt;p&gt;Raspbian’s network service needs to be stopped to connect using the method
we’re going to use. To do this run&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;sudo service networking stop
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h1 id=&quot;connect-using-wpasupplicant&quot;&gt;Connect using wpa_supplicant&lt;/h1&gt;

&lt;p&gt;I’m at Bristol university where our eduroam network uses PEAP or TTLS for
authentication, if you’re at a different university this may well be different
and you’ll need to change the &lt;code class=&quot;highlighter-rouge&quot;&gt;wpa_supplicant&lt;/code&gt; file accordingly&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;network={
	# --- MUST CONFIGURE THE FOLLOWING THREE OPTIONS --

	# The &#39;identity&#39; is the username actually used for authentication.
	# This must be your Bristol username, all lowercase.
        identity=&quot;ab1234&quot;

	# Your normal Bristol password (so make sure the permissions on
	# your wpa_supplicant config file are not world readable!)
        password=&quot;myUOBpassword&quot;

	# CA cert from here:
    # https://www.wireless.bris.ac.uk/certs/eaproot/uob-net-ca.pem
	# Change the path to where you downloaded the file
        ca_cert=&quot;/etc/ssl/certs/uob-net-ca.pem&quot;

	# --- ONLY CHANGE BELOW IF YOU ARE NOT A MEMBER --
	# --- OF THE UNIVERSITY OF BRISTOL, UK          --

	# Bristol supports PEAP and TTLS.
        eap=PEAP TTLS

	# The &#39;anonymous_identity&#39; is the identity used for routing
	# the authentication to Bristol. It must end with &#39;@bris.ac.uk&#39;
	# or &#39;@bristol.ac.uk&#39;. It must be all lowercase. If you have 
	# anything preceding the @ it must be all lowercase letters or 
	# a hyphen (no spaces, punctuation etc) 
	# e.g. &quot;wireless-user@bristol.ac.uk&quot; would be ok
        anonymous_identity=&quot;@bristol.ac.uk&quot;

	# Bristol use MS-CHAPv2 as the inner authentication scheme,
	# with the traditional label
	phase1=&quot;peaplabel=0&quot;
	phase2=&quot;auth=MSCHAPV2&quot;

	# Set priority to a big number
	priority=999

	# --- DONT CHANGE THE REST OF THIS BLOCK --

	# Enable this network block
	disabled=0

	# eduroam please
        ssid=&quot;eduroam&quot;

	# SSID should be broadcast, so don&#39;t scan.
	scan_ssid=0

	# Infrastructure mode
	mode=0

	# WPA/WPA2 require OPEN
	auth_alg=OPEN

	# WPA and WPA2 (RSN) are both used for eduroam 
	# (depending on which organisation you are at)
	# In the future &#39;WPA&#39; can be removed (WPA2 only).
	proto=WPA RSN

	# CCMP (AES) is stronger, but some organisations use TKIP.
	# In the future &#39;TKIP&#39; can be removed.
	pairwise=CCMP TKIP

	# Use EAP
        key_mgmt=WPA-EAP

	# Use PMKSA caching
        proactive_key_caching=1

}
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;p&gt;Thanks to
&lt;a href=&quot;http://www.wireless.bris.ac.uk/eduroam/instructions/go-wpasup/&quot;&gt;wirless.bris.ac.uk&lt;/a&gt; for the file!&lt;/p&gt;

&lt;p&gt;Run &lt;code class=&quot;highlighter-rouge&quot;&gt;wpa_supplicant&lt;/code&gt;:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;sudo wpa_supplicant -i wlan0 -c /path/to/wpa_supplicant.conf -B
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;You’ll also need the PEM file &lt;code class=&quot;highlighter-rouge&quot;&gt;uob-net-ca.pem&lt;/code&gt; to put into &lt;code class=&quot;highlighter-rouge&quot;&gt;/etc/ssl/certs/&lt;/code&gt;
which is located at
&lt;a href=&quot;https://www.wireless.bris.ac.uk/certs/eaproot/uob-net-ca.pem&quot;&gt;https://www.wireless.bris.ac.uk/certs/eaproot/uob-net-ca.pem&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Problems you may encounter at this stage include:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;The certificate being invalid as the raspberry pi’s time is set to a time
before the certificate is valid (run wpa_supplicant with the &lt;code class=&quot;highlighter-rouge&quot;&gt;-dd&lt;/code&gt; flag for
verbose debugging).&lt;/li&gt;
  &lt;li&gt;You’re as thick as me and you accidentally rename the certificate&lt;/li&gt;
  &lt;li&gt;Something else has control of the wireless interface preventing you from
connecting.&lt;/li&gt;
&lt;/ul&gt;

&lt;h1 id=&quot;request-an-ip-address&quot;&gt;Request an IP address&lt;/h1&gt;

&lt;p&gt;Once you’ve connected to eduroam which you can verify by running &lt;code class=&quot;highlighter-rouge&quot;&gt;iwconfig&lt;/code&gt;. You
should now request an ip address with the command&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;sudo dhclient wlan0
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;To verify that you have got an ip address run &lt;code class=&quot;highlighter-rouge&quot;&gt;ifconfig&lt;/code&gt; and make sure your
wireless interface (usually wlan0) has been assigned an address.&lt;/p&gt;

&lt;p&gt;You should now have a wireless connection!&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>Packages and modules in Python</title>
   <link href="http://willprice.org//2014/02/09/packages-in-python.html"/>
   <updated>2014-02-09T00:00:00+00:00</updated>
   <id>http://willprice.org/2014/02/09/packages-in-python</id>
   <content type="html">&lt;p&gt;Previously, and now currently, packages in Python have been a source of much woe
to me. Plagued by hundred of “No module named xxx”, “Attempted relative import
in non-package” etc, it is now time to write myself a little guide to refer to
in future.&lt;/p&gt;

&lt;h1 id=&quot;packages-and-modules&quot;&gt;Packages and Modules&lt;/h1&gt;
&lt;p&gt;A &lt;strong&gt;package&lt;/strong&gt; is a collection of modules with a &lt;code class=&quot;highlighter-rouge&quot;&gt;__init__.py&lt;/code&gt; file inside the
package directory and a &lt;strong&gt;module&lt;/strong&gt; is simply a python file.&lt;/p&gt;

&lt;p&gt;Say I have the layout:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;* core:
    * __init__.py
    * queue.py
    * tests:
        * queue_tests.py
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;and I want the &lt;code class=&quot;highlighter-rouge&quot;&gt;Queue&lt;/code&gt; class from &lt;code class=&quot;highlighter-rouge&quot;&gt;core.queue&lt;/code&gt;. How do I import this in
&lt;code class=&quot;highlighter-rouge&quot;&gt;queue_tests.py&lt;/code&gt;?&lt;/p&gt;

&lt;p&gt;You’d think&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-python&quot; data-lang=&quot;python&quot;&gt;&lt;span class=&quot;kn&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;..queue&lt;/span&gt; &lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Queue&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;blah&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;():&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;stuff&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;would do it; and you’d be correct. But check how you’re running the file. If
you’re running it directly like &lt;code class=&quot;highlighter-rouge&quot;&gt;python tests/queue_tests.py&lt;/code&gt;, then the name of the file will
be &lt;code class=&quot;highlighter-rouge&quot;&gt;__main__&lt;/code&gt; which breaks relative imports. You have to run it like so: &lt;code class=&quot;highlighter-rouge&quot;&gt;python
-m tests.queue_tests&lt;/code&gt;. This runs the module &lt;code class=&quot;highlighter-rouge&quot;&gt;queue_tests&lt;/code&gt; as a script, but fixes
the &lt;code class=&quot;highlighter-rouge&quot;&gt;__name__&lt;/code&gt; issue.&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>Are all comments bad?</title>
   <link href="http://willprice.org//2014/01/18/are-all-comments-bad.html"/>
   <updated>2014-01-18T00:00:00+00:00</updated>
   <id>http://willprice.org/2014/01/18/are-all-comments-bad</id>
   <content type="html">&lt;p&gt;I’ve been thinking about comments in code. Some people advocate not using
comments suggesting that your code should be self documenting. I believe this to
be a good practice where possible. If you need comments to explain what your
code is doing, then it’s quite likely you’re code isn’t sufficiently broken down
into lots of little methods naming what each part does. What happens when you
have code that is simply non-intuitive and breaking it out into named methods
doesn’t work?&lt;/p&gt;

&lt;p&gt;Let’s look at an example to emphasize my point. We’ll take the naive Fibonacci
function:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-python&quot; data-lang=&quot;python&quot;&gt;&lt;span class=&quot;c&quot;&gt;#!/usr/bin/env python&lt;/span&gt;

&lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;unittest&lt;/span&gt;


&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;fib&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;n&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;n&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;get_base_case&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;n&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;fib&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;n&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;fib&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;n&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;get_base_case&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;n&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;n&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;


&lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;FibonacciTests&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;unittest&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;TestCase&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;test_first_fib_number_is_zero&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
        &lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;assertEqual&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;fib&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;

    &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;test_second_fib_number_is_one&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
        &lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;assertEqual&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;fib&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;

    &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;test_third_fib_number_is_one&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
        &lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;assertEqual&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;fib&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;

    &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;test_fourth_fib_number_is_two&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
        &lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;assertEqual&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;fib&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;4&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;

    &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;test_sixth_fib_number_is_five&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
        &lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;assertEqual&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;5&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;fib&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;6&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;__name__&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&#39;__main__&#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;unittest&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Now for a tail recursive implementation that is more efficient (but not in
Python, as it doesn’t have tail call optimization! I should have done it in C,
but I couldn’t face writing the tests using &lt;code class=&quot;highlighter-rouge&quot;&gt;check&lt;/code&gt;).&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-python&quot; data-lang=&quot;python&quot;&gt;&lt;span class=&quot;c&quot;&gt;#!/usr/bin/env python&lt;/span&gt;

&lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;unittest&lt;/span&gt;


&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;fib&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;n&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;fib_accumulator&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;n&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;fib_accumulator&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;counter&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;nth_fib&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;nth_minus_one_fib&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;counter&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;nth_minus_one_fib&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;counter&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;nth_fib&lt;/span&gt;

    &lt;span class=&quot;n&quot;&gt;next_fib&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;nth_fib&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;nth_minus_one_fib&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;fib_accumulator&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;counter&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;next_fib&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;nth_fib&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;


&lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;FibonacciTests&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;unittest&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;TestCase&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;test_first_fib_number_is_zero&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
        &lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;assertEqual&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;fib&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;

    &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;test_second_fib_number_is_one&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
        &lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;assertEqual&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;fib&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;

    &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;test_third_fib_number_is_one&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
        &lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;assertEqual&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;fib&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;

    &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;test_fourth_fib_number_is_two&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
        &lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;assertEqual&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;fib&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;4&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;

    &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;test_sixth_fib_number_is_five&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
        &lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;assertEqual&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;5&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;fib&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;6&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;__name__&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&#39;__main__&#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;unittest&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;I’ve tried my best to make this as self-explanatory as possible. I still feel
that additional explanation would help for whoever has to maintain it. The first
time I saw this definition &lt;code class=&quot;highlighter-rouge&quot;&gt;nth_fib&lt;/code&gt; was &lt;code class=&quot;highlighter-rouge&quot;&gt;a&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;nth_minus_one_fib&lt;/code&gt; was &lt;code class=&quot;highlighter-rouge&quot;&gt;b&lt;/code&gt;, I
had absolutely no idea how it worked. Naming things really makes such a
difference!&lt;/p&gt;

&lt;p&gt;The additional information I’d like to add is:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;We only return &lt;code class=&quot;highlighter-rouge&quot;&gt;nth_minus_one&lt;/code&gt; if &lt;code class=&quot;highlighter-rouge&quot;&gt;counter == 1&lt;/code&gt;, which implies we’re calling
&lt;code class=&quot;highlighter-rouge&quot;&gt;fib(1)&lt;/code&gt; so we return the first fibonacci number: 0.&lt;/li&gt;
  &lt;li&gt;When &lt;code class=&quot;highlighter-rouge&quot;&gt;n &amp;gt; 1&lt;/code&gt; then &lt;code class=&quot;highlighter-rouge&quot;&gt;counter == 2&lt;/code&gt; terminates the algorithm returning the
accumulated value&lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;A few examples:&lt;/p&gt;

    &lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;  fib(3) -&amp;gt; fib_accumulator(3, 1, 0) -&amp;gt; fib_accumulator(2, (1 + 0), 1) -&amp;gt; return (1 + 0)

  fib(5) -&amp;gt; fib_accumulator(5, 1, 0) -&amp;gt; fib_accumulator(4, (1 + 0), 1) -&amp;gt; 
            fib_accumulator(3, (1 + 0 + 1), (1 + 0)) -&amp;gt; fib_accumulator(2, (1 +
            0 + 1 + 1 + 0), (0 + 1 + 1)) -&amp;gt; return (1 + 0 + 1 + 1 + 0) -&amp;gt; return 3
&lt;/code&gt;&lt;/pre&gt;
    &lt;/div&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;I think that information makes it clearer how the function works. I tried to
extract the base cases to add more explanation via code, but couldn’t think of
descriptive enough methods, maybe that’s because I don’t grok the algorithm. I
can see how it works, but find it very hard to articulate how to explain it’s
behaviour, when this happens I find it’s best to resort to examples to guide
explanation, but this is difficult to do in code! Unit tests you scream!? True,
maybe I should add comments there explaining what is happening? How do you
handle cases where you feel your code isn’t sufficiently descriptive, but can’t
make it more descriptive through refactoring?&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>LaTeX fails... and fixes!</title>
   <link href="http://willprice.org//2014/01/10/latex-fails.html"/>
   <updated>2014-01-10T00:00:00+00:00</updated>
   <id>http://willprice.org/2014/01/10/latex-fails</id>
   <content type="html">&lt;p&gt;I thought it might be a good idea to brush up my LaTeX skills by writing my
maths homework in it… big mistake… lots of time wasted! I’m much more
informed on LaTeX now, so here’s some of the things I struggled with in the
hopes it will help future me from spending hours figuring out how to put
multiple tables on one line!&lt;/p&gt;

&lt;h2 id=&quot;referencing-figures-and-tables&quot;&gt;Referencing figures and tables&lt;/h2&gt;
&lt;p&gt;You must put the label &lt;em&gt;after the caption&lt;/em&gt; in a figure or table:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-tex&quot; data-lang=&quot;tex&quot;&gt;&lt;span class=&quot;nt&quot;&gt;\begin{table}&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;% Don&#39;t put labels before the caption, like here&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;\begin{tabular}&lt;/span&gt;
        ...
    &lt;span class=&quot;nt&quot;&gt;\end{tabular}&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;\caption&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;A table of things&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;\label&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;table:things&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;\end{table}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;h2 id=&quot;multiple-tables-on-a-single-line&quot;&gt;Multiple tables on a single line&lt;/h2&gt;
&lt;p&gt;Use the &lt;code class=&quot;highlighter-rouge&quot;&gt;subcaption&lt;/code&gt; package, this allows you to specify the width of subtables
and subfigures.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-tex&quot; data-lang=&quot;tex&quot;&gt;&lt;span class=&quot;nt&quot;&gt;\begin{table}&lt;/span&gt;[h]
    &lt;span class=&quot;nt&quot;&gt;\begin{subtable}&lt;/span&gt;[b]&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;1.3&lt;span class=&quot;k&quot;&gt;\linewidth&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
      &lt;span class=&quot;k&quot;&gt;\centering&lt;/span&gt;
      &lt;span class=&quot;nt&quot;&gt;\begin{tabular}&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;c|cccc&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;$&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;\circ&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;$&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;&amp;amp;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;$&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;e&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;$&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;&amp;amp;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;$&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;$&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;&amp;amp;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;$&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;b&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;$&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;&amp;amp;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;$&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;c&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;$&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;\\&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;\hline&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;$&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;e&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;$&lt;/span&gt;     &lt;span class=&quot;p&quot;&gt;&amp;amp;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;$&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;e&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;$&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;&amp;amp;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;$&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;$&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;&amp;amp;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;$&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;b&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;$&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;&amp;amp;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;$&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;c&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;$&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;\\&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;$&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;$&lt;/span&gt;     &lt;span class=&quot;p&quot;&gt;&amp;amp;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;$&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;$&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;&amp;amp;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;$&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;c&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;$&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;&amp;amp;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;$&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;e&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;$&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;&amp;amp;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;$&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;b&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;$&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;\\&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;$&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;b&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;$&lt;/span&gt;     &lt;span class=&quot;p&quot;&gt;&amp;amp;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;$&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;b&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;$&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;&amp;amp;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;$&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;e&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;$&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;&amp;amp;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;$&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;c&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;$&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;&amp;amp;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;$&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;$&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;\\&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;$&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;c&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;$&lt;/span&gt;     &lt;span class=&quot;p&quot;&gt;&amp;amp;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;$&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;c&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;$&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;&amp;amp;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;$&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;b&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;$&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;&amp;amp;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;$&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;$&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;&amp;amp;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;$&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;e&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;$&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;\\&lt;/span&gt;
      &lt;span class=&quot;nt&quot;&gt;\end{tabular}&lt;/span&gt;
      &lt;span class=&quot;k&quot;&gt;\caption&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{$&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;Z&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;_&lt;/span&gt;&lt;span class=&quot;m&quot;&gt;4&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;$}&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;\end{subtable}&lt;/span&gt;
    &lt;span class=&quot;c&quot;&gt;%replace \quad with a new line if you don&#39;t want it on the same line&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;\quad&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;\begin{subtable}&lt;/span&gt;[b]&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;0.4&lt;span class=&quot;k&quot;&gt;\linewidth&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
      &lt;span class=&quot;k&quot;&gt;\centering&lt;/span&gt;
      &lt;span class=&quot;nt&quot;&gt;\begin{tabular}&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;c|cc&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;\label&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;table:z&lt;span class=&quot;p&quot;&gt;_&lt;/span&gt;4&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;$&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;\circ&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;$&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;&amp;amp;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;$&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;e&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;$&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;&amp;amp;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;$&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;c&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;$&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;\\&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;\hline&lt;/span&gt;

        &lt;span class=&quot;p&quot;&gt;$&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;e&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;$&lt;/span&gt;     &lt;span class=&quot;p&quot;&gt;&amp;amp;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;$&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;e&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;$&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;&amp;amp;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;$&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;c&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;$&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;\\&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;$&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;c&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;$&lt;/span&gt;     &lt;span class=&quot;p&quot;&gt;&amp;amp;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;$&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;c&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;$&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;&amp;amp;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;$&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;e&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;$&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;\\&lt;/span&gt;
      &lt;span class=&quot;nt&quot;&gt;\end{tabular}&lt;/span&gt;
      &lt;span class=&quot;k&quot;&gt;\caption&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;Only valid &lt;span class=&quot;p&quot;&gt;$&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;Z&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;_&lt;/span&gt;&lt;span class=&quot;m&quot;&gt;4&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;$&lt;/span&gt; subgroup: &lt;span class=&quot;p&quot;&gt;$&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;Z&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;_&lt;/span&gt;&lt;span class=&quot;m&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;$}&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;\end{subtable}&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;\caption&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{$&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;Z&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;_&lt;/span&gt;&lt;span class=&quot;m&quot;&gt;4&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;$&lt;/span&gt; and it&#39;s subgroup &lt;span class=&quot;p&quot;&gt;$&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;Z&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;_&lt;/span&gt;&lt;span class=&quot;m&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;$}&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;\label&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;table:z&lt;span class=&quot;p&quot;&gt;_&lt;/span&gt;4&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;\end{table}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;h2 id=&quot;specify-the-location-of-tables&quot;&gt;Specify the location of tables&lt;/h2&gt;
&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;[specifier]&lt;/code&gt; takes one of the following &lt;code class=&quot;highlighter-rouge&quot;&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;h,t,b,p&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;h&lt;/code&gt; - Here&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;t&lt;/code&gt; - Top&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;b&lt;/code&gt; - Bottom&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;p&lt;/code&gt; - Own page&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;These can be combined like &lt;code class=&quot;highlighter-rouge&quot;&gt;hbp&lt;/code&gt;, close to the place in the text on it’s own
separate page at the bottom&lt;/p&gt;

&lt;h2 id=&quot;spacing-and-measures&quot;&gt;Spacing and measures&lt;/h2&gt;
&lt;ul&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;\quad&lt;/code&gt; - space&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;\linewidth&lt;/code&gt; - width of page, use this with the &lt;code class=&quot;highlighter-rouge&quot;&gt;subtable&lt;/code&gt; environment when
you’re setting the width of a subtable.&lt;/li&gt;
&lt;/ul&gt;
</content>
 </entry>
 
 <entry>
   <title>The Bowling Game Kata</title>
   <link href="http://willprice.org//2013/12/14/the-bowling-game-kata.html"/>
   <updated>2013-12-14T00:00:00+00:00</updated>
   <id>http://willprice.org/2013/12/14/the-bowling-game-kata</id>
   <content type="html">&lt;p&gt;One of the classic Katas: &lt;a href=&quot;http://butunclebob.com/ArticleS.UncleBob.TheBowlingGameKata&quot;&gt;The Bowling
Game&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;I’ve pretty much reproduced Uncle Bob’s solution as I had a huge amount of
trouble tackling this in an OO way. Jason has suggested I use linked lists to
keep track of the next frame and get the score from that, I’d avoided doing
something like that as I thought that would produce the ‘inappropriate intimacy’
design smell, but I suppose it’s better than having responsibilities in the
wrong place.&lt;/p&gt;

&lt;p&gt;I finish Uni this week so I’ll have some more time to look at this problem. I’ll
try and post a video where I refactor what I have into an OO solution :)&lt;/p&gt;

&lt;iframe width=&quot;560&quot; height=&quot;315&quot; src=&quot;//www.youtube.com/embed/7RJM3pcMNyo&quot;&gt;&lt;/iframe&gt;
</content>
 </entry>
 
 <entry>
   <title>OO Design: Addiction app</title>
   <link href="http://willprice.org//2013/11/30/oo-design-addiction-app.html"/>
   <updated>2013-11-30T00:00:00+00:00</updated>
   <id>http://willprice.org/2013/11/30/oo-design-addiction-app</id>
   <content type="html">&lt;p&gt;From last week’s pairing session. Jason suggested I try and design my own
application from the principles he showed me (and demonstrates in his youtube
video). I decided I’d go for something a little simpler to make sure if I did
screw up, it wouldn’t be too time consuming to restart.&lt;/p&gt;

&lt;p&gt;My application is going to be for smartphones, it will allow people to record
their ‘indulgences’ in their vices. For example, an alcoholic will be able to
record how often, and how much he/she drinks, then chart that to see whether they
are decreasing their consumption or not. A pretty simple idea, but especially as
this will be my first Android app, I thought I’d go for something reasonably
simple.&lt;/p&gt;

&lt;p&gt;I wrote my user stories in Trello, acceptance tests around these user stories
are comments on the cards. I think I may have been pushing it, but I also used
it for my CRC cards; I wouldn’t recommend it for this though! Look at the boards
on &lt;a href=&quot;https://trello.com/b/5QErUdSy/addiciton-app&quot;&gt;Trello&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;I also made a
&lt;a href=&quot;https://docs.google.com/drawings/d/1np58VnMyYzhps_SrOcwW7bjJ2_tOr1R-aEpwweXU5tc/edit?usp=sharing&quot;&gt;diagram&lt;/a&gt; of the interactions between classes on google docs. I’m
not sure how complete it is. I spent quite a while trying to see whether I’d
missed any relationships, but I couldn’t spot any. At the same time it still
felt incomplete. Once I’ve done quite a few of these I hope I’ll be able to
churn them out quicker, currently I find them quite difficult and constantly
have to refer to examples to see whether I’m on the right path.&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>A little bit of UML pairing session</title>
   <link href="http://willprice.org//2013/11/23/a-little-bit-of-uml-pairing-session.html"/>
   <updated>2013-11-23T00:00:00+00:00</updated>
   <id>http://willprice.org/2013/11/23/a-little-bit-of-uml-pairing-session</id>
   <content type="html">&lt;p&gt;Jason’s video on the subject:&lt;/p&gt;
&lt;iframe width=&quot;560&quot; height=&quot;315&quot; src=&quot;//www.youtube.com/embed/U7X6EswilYc&quot;&gt;&lt;/iframe&gt;
&lt;p&gt;&lt;a href=&quot;http://www.codemanship.co.uk/files/littleuml.pdf&quot;&gt;Slide source&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Jason and I went through the slides discussing OO design as we went. After
looking at the user cases, acceptance tests and CRC cards, we started writing an
implementation of the software.&lt;/p&gt;

&lt;h2 id=&quot;tests&quot;&gt;Tests&lt;/h2&gt;
&lt;p&gt;This is as far as we got:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;add a new title&lt;/li&gt;
  &lt;li&gt;donating a copy of a title that isn’t in the library add the title to the
library&lt;/li&gt;
  &lt;li&gt;donating a copy of a different title that isn’t in the library adds the title
to the library&lt;/li&gt;
  &lt;li&gt;finding a title that doesn’t exist in the library returns null.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;To satisfy &lt;em&gt;1&lt;/em&gt; we mocked the title class and wrote a method &lt;code class=&quot;highlighter-rouge&quot;&gt;addToNewTitles&lt;/code&gt; on
library to add that title to library. The assertion used a &lt;code class=&quot;highlighter-rouge&quot;&gt;getNewTitles&lt;/code&gt; method
that returned a list of new titles. Initially we tried using arrays but lists
have a nicer set of methods such as &lt;code class=&quot;highlighter-rouge&quot;&gt;contains&lt;/code&gt; that saved us the cost of writing
sorting and searching algorithms (that would also require us to implement quite
a bit of title). Satisfying &lt;em&gt;2&lt;/em&gt; involved adding a title to the library, and then
returning the first element of the list holding our titles. The assertions we
were writing to check the title was correct were very horrible, lots of getters
on title–poor emergent design. Next week we’ll have a look at how to go from
our current implementation to something a little cleaner doing lots of
refactoring!&lt;/p&gt;

&lt;h1 id=&quot;librarytestsjava&quot;&gt;LibraryTests.java&lt;/h1&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;&lt;span class=&quot;kn&quot;&gt;package&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;org&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;willprice&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;videolibrary&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;org&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;junit&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;Assert&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.*;&lt;/span&gt;

&lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;java.lang.reflect.Array&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;java.util.Arrays&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;org.junit.Test&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;org&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;mockito&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;Mockito&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.*;&lt;/span&gt;

&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;LibraryTests&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;

	&lt;span class=&quot;nd&quot;&gt;@Test&lt;/span&gt;
	&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;addNewTitle&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
		&lt;span class=&quot;n&quot;&gt;Title&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;expectedTitle&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;mock&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Title&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;class&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
		&lt;span class=&quot;n&quot;&gt;Library&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;library&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Library&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
		&lt;span class=&quot;n&quot;&gt;library&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;addToNewTitles&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;expectedTitle&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
		&lt;span class=&quot;n&quot;&gt;assertTrue&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;library&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;getNewTitles&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;().&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;contains&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;expectedTitle&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;));&lt;/span&gt;
	&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
	
	&lt;span class=&quot;nd&quot;&gt;@Test&lt;/span&gt;
	&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;donatingCopyOfTitleThatIsntInLibraryAddsTitleToLibrary&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;throws&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Exception&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
		&lt;span class=&quot;n&quot;&gt;Library&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;library&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Library&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
		&lt;span class=&quot;n&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;name&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;The Abyss&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
		&lt;span class=&quot;n&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;director&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;James Cameron&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
		&lt;span class=&quot;n&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;yearOfRelease&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;1989&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
		&lt;span class=&quot;n&quot;&gt;library&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;donate&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;director&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;yearOfRelease&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
		&lt;span class=&quot;n&quot;&gt;Title&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;titleFound&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;library&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;findTitle&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
		&lt;span class=&quot;n&quot;&gt;assertEquals&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;titleFound&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;getName&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;());&lt;/span&gt;
		&lt;span class=&quot;n&quot;&gt;assertEquals&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;director&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;titleFound&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;getDirector&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;());&lt;/span&gt;
		&lt;span class=&quot;n&quot;&gt;assertEquals&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;yearOfRelease&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;titleFound&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;getYearOfRelease&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;());&lt;/span&gt;
	&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
	
	&lt;span class=&quot;nd&quot;&gt;@Test&lt;/span&gt;
	&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;donatingCopyOfOceansElevenThatIsntInLibraryAddsOceansElevenToLibrary&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;throws&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Exception&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
		&lt;span class=&quot;n&quot;&gt;Library&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;library&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Library&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
		&lt;span class=&quot;n&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;name&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;Oceans Eleven&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
		&lt;span class=&quot;n&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;director&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;Steven Soderbergh&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
		&lt;span class=&quot;n&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;yearOfRelease&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;2002&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
		&lt;span class=&quot;n&quot;&gt;library&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;donate&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;director&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;yearOfRelease&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
		&lt;span class=&quot;n&quot;&gt;Title&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;titleFound&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;library&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;findTitle&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
		&lt;span class=&quot;n&quot;&gt;assertEquals&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;titleFound&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;getName&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;());&lt;/span&gt;
		&lt;span class=&quot;n&quot;&gt;assertEquals&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;director&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;titleFound&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;getDirector&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;());&lt;/span&gt;
		&lt;span class=&quot;n&quot;&gt;assertEquals&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;yearOfRelease&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;titleFound&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;getYearOfRelease&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;());&lt;/span&gt;
	&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
	
	&lt;span class=&quot;nd&quot;&gt;@Test&lt;/span&gt;
	&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;findingTitleThatDoesntExistInLibraryReturnsNull&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;throws&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Exception&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
		&lt;span class=&quot;n&quot;&gt;Library&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;library&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Library&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
		&lt;span class=&quot;n&quot;&gt;library&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;donate&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;The Abyss&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
		&lt;span class=&quot;n&quot;&gt;assertNull&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;library&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;findTitle&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;));&lt;/span&gt;
	&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;h1 id=&quot;libraryjava&quot;&gt;Library.java&lt;/h1&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;&lt;span class=&quot;kn&quot;&gt;package&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;org&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;willprice&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;videolibrary&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;java.util.ArrayList&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;java.util.List&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;org.mockito.Matchers&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Library&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;

	&lt;span class=&quot;kd&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;List&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Title&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;newTitles&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ArrayList&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Title&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;();&lt;/span&gt;
	&lt;span class=&quot;kd&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;List&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Title&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;titles&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ArrayList&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Title&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;();&lt;/span&gt;

	&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;List&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Title&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;getNewTitles&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
		&lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;newTitles&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
	&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

	&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;addToNewTitles&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Title&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;title&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
		&lt;span class=&quot;n&quot;&gt;newTitles&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;add&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;title&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
	&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

	&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;List&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Title&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;getTitles&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
		&lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;titles&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
	&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

	&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;donate&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;director&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;year&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
		&lt;span class=&quot;n&quot;&gt;titles&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;add&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Title&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;director&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;year&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;));&lt;/span&gt;
	&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

	&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Title&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;findTitle&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
		&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;name&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
			&lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;null&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
		&lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;titles&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;get&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
	&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;h1 id=&quot;titlejava&quot;&gt;Title.java&lt;/h1&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;&lt;span class=&quot;kn&quot;&gt;package&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;org&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;willprice&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;videolibrary&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Title&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;

	&lt;span class=&quot;kd&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
	&lt;span class=&quot;kd&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;director&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
	&lt;span class=&quot;kd&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;year&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;

	&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Title&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;director&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;year&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
		&lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;name&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
		&lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;director&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;director&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
		&lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;year&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;year&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
	&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

	&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;getName&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
		&lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
	&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

	&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;getDirector&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
		&lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;director&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
	&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

	&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;getYearOfRelease&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
		&lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;year&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
	&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;h1 id=&quot;the-homework-user-stories-acceptance-tests-and-crc-cards-for-an-interesting-problem&quot;&gt;The Homework: User stories, Acceptance tests, and CRC cards for an interesting problem&lt;/h1&gt;
&lt;p&gt;Jason wants me to have ago applying the principles that we covered in the
pairing session on a different example, so I have free reign over what I want to
do. I’m quite interested in writing an app that allows users to track how often
they indulge in their vices. In my case: alcohol, I’d like to cut down on my
consumption, but I’m not quite sure how much I’m drinking, having an app to
record this information would be very helpful. Graphing it would be even more
helpful to see whether I’m decreasing my intake or not.&lt;/p&gt;

</content>
 </entry>
 
 <entry>
   <title>Binary Search</title>
   <link href="http://willprice.org//2013/11/18/binary-search.html"/>
   <updated>2013-11-18T00:00:00+00:00</updated>
   <id>http://willprice.org/2013/11/18/binary-search</id>
   <content type="html">&lt;p&gt;This week I’ve been working on binary search. Like last week I did it in Java
with JUnit, but I’ve also got a video executing my test cases with books as a
supplement.&lt;/p&gt;

&lt;iframe width=&quot;560&quot; height=&quot;315&quot; src=&quot;//www.youtube.com/embed/6oC7YU4TrvU&quot;&gt;&lt;/iframe&gt;
&lt;iframe width=&quot;560&quot; height=&quot;315&quot; src=&quot;//www.youtube.com/embed/bsfadoOOggY&quot;&gt;&lt;/iframe&gt;
</content>
 </entry>
 
 <entry>
   <title>Bubble sort done the TDD way</title>
   <link href="http://willprice.org//2013/11/02/bubble-sort-done-the-tdd-way.html"/>
   <updated>2013-11-02T00:00:00+00:00</updated>
   <id>http://willprice.org/2013/11/02/bubble-sort-done-the-tdd-way</id>
   <content type="html">&lt;p&gt;I had a bash at writing Bubble sort in Java. I filmed my screen, and gave an
overview of my reasons for the steps I was taking.&lt;/p&gt;

&lt;iframe width=&quot;560&quot; height=&quot;315&quot; src=&quot;http://www.youtube.com/embed/AraZURpk_YA&quot; frameborder=&quot;0&quot;&gt;&lt;/iframe&gt;
</content>
 </entry>
 
 <entry>
   <title>Unit testing is evil</title>
   <link href="http://willprice.org//2013/10/09/unit-testing-is-evil.html"/>
   <updated>2013-10-09T00:00:00+01:00</updated>
   <id>http://willprice.org/2013/10/09/unit-testing-is-evil</id>
   <content type="html">&lt;p&gt;I’m currently reading ‘Autotools’, a book about, yes you guessed it, Autotools!
This passage made me laugh:&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;Some people insist that unit testing is evil, but the only honest rationale they
can come up with for not doing it is laziness. Proper unit testing is hard work,
but it pays off in the end. Those who do it have learned a lesson (usually in
childhood) about the value of delayed gratification.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;I’m only reading the book so I can use the C unit testing framework
&lt;a href=&quot;check.sourceforge.net&quot;&gt;check&lt;/a&gt;… so yes. I have certainly learned a lesson in
the value of delayed gratification. Sometimes I wonder whether It’s a bad
thing. Who knows whether I’ll get my homework done before it’s due date :)&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>First weeks of university</title>
   <link href="http://willprice.org//2013/10/05/first-week-of-university.html"/>
   <updated>2013-10-05T00:00:00+01:00</updated>
   <id>http://willprice.org/2013/10/05/first-week-of-university</id>
   <content type="html">&lt;p&gt;Having settled in here at Bristol, I’ve started my lectures, topics include:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Mathematical methods for computer scientists
    &lt;ul&gt;
      &lt;li&gt;Logic&lt;/li&gt;
      &lt;li&gt;Objects&lt;/li&gt;
      &lt;li&gt;Proofs&lt;/li&gt;
      &lt;li&gt;Counting &amp;amp; Probability&lt;/li&gt;
      &lt;li&gt;Analysis&lt;/li&gt;
      &lt;li&gt;Linear Algebra&lt;/li&gt;
      &lt;li&gt;Probability &amp;amp; distributions&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;Programming and Algorithms:
    &lt;ul&gt;
      &lt;li&gt;Learning C&lt;/li&gt;
      &lt;li&gt;Probably some algorithms too…&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Introduction to Computer Architecture&lt;/p&gt;

    &lt;p&gt;From Boolean logic to RAM and ROM (for the first half of this year, not sure
what comes next)&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Origins of Computer Science&lt;/p&gt;

    &lt;p&gt;From early machines through various programming languages, and OSes to the
future of computer science.&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;evolutionary-design-and-waterfall&quot;&gt;Evolutionary design and Waterfall&lt;/h2&gt;
&lt;p&gt;In a programming and algorithms lecture, waterfall was mentioned as the
development technique, and evolutionary design was said to be a bad way of
building systems. This came with the suggestion that systems should be
redesigned from the ground up when a system had sufficiently solved the problem
addressed. Jason vehemently opposed this view, saying evolutionary design was
about the only way to design programs as requirements are forever changing. He
said the key too succeeding was to continuously refactor your code to stop cruft
from encroaching on your software.&lt;/p&gt;

&lt;h2 id=&quot;pairing&quot;&gt;Pairing&lt;/h2&gt;
&lt;p&gt;Jason and I also discussed what sort of problems we could tackle whilst
pairing. He suggested that we try and TDD algorithms, next week we’ll be doing
&lt;em&gt;bubble sort&lt;/em&gt;, and &lt;em&gt;binary search&lt;/em&gt; in C. This week I’m going to try and get up
and running with C testing frameworks. So far I’ve had a look at:
* &lt;a href=&quot;http://check.sourceforge.net/&quot;&gt;Check&lt;/a&gt;
* &lt;a href=&quot;http://www.jera.com/techinfo/jtns/jtn002.html&quot;&gt;Minunit&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;I haven’t managed to get either of these working yet. Check suggests the use of
autotools–something I haven’t learnt yet. Minunit throws a segfault when I try
and compile my test code. Currently I’m leaning towards minunit for it’s
simplicity.&lt;/p&gt;

&lt;p&gt;Eric Radman has a good post on &lt;a href=&quot;http://eradman.com/posts/tdd-in-c.html&quot;&gt;unit testing C&lt;/a&gt;. 
I haven’t looked into it too deeply yet, as my knowledge in C is rather limited.&lt;/p&gt;

&lt;p&gt;If TDDing algorithms is a good exercise we’ll try and compile a wiki where we
explain the algorithm, and show the steps to a TDD implementation.&lt;/p&gt;

&lt;h2 id=&quot;screen-recording&quot;&gt;Screen recording&lt;/h2&gt;
&lt;p&gt;Next week we’ll record our pairing session and put it on youtube. I’m using 
&lt;a href=&quot;http://www.maartenbaert.be/simplescreenrecorder/&quot;&gt;SimpleScreenRecorder&lt;/a&gt; to
capture the screen and audio. It’s a lot better than Gtk-RecordMyDesktop. I also
tried to check out &lt;a href=&quot;http://freeseer.github.io/&quot;&gt;FreeSeer&lt;/a&gt;, however I couldn’t
get it to compile.&lt;/p&gt;

&lt;h2 id=&quot;apprenticeships-as-a-complement-to-a-degree&quot;&gt;Apprenticeships as a complement to a degree&lt;/h2&gt;
&lt;p&gt;Jason feels confident that what I’ll learn in my degree will not overlap too
much with what he wishes to teach me. Hopefully an apprenticeship will cover the
more practical aspects of software development that seem to take a backseat in a
CS degree, and understandably so given that it is CS, and not software
development. The problem is that most CS graduates will just go on to do
software development, and so it might not be a bad idea for CS students to learn
a decent amount of software development too. It looks as if we’ll learn agile in
the 2nd year… I would have thought by then it’d be too late…&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>Mock objects: The BoxOffice example</title>
   <link href="http://willprice.org//2013/09/02/mock-objects-pairing-session.html"/>
   <updated>2013-09-02T00:00:00+01:00</updated>
   <id>http://willprice.org/2013/09/02/mock-objects-pairing-session</id>
   <content type="html">&lt;p&gt;(Friday 30th August Pairing with Jason)
### Introduction: Why mock objects&lt;/p&gt;

&lt;p&gt;Having been exposed to the basics of TDD: Using &lt;code class=&quot;highlighter-rouge&quot;&gt;asserts&lt;/code&gt; to make sure things
changed; trying to write each test so it fails for only one reason;
triangulating a solution, rather than just dumping it all in one fell swoop, I
thought it was about time to learn what mock objects are, and what they are used
for.&lt;/p&gt;

&lt;h3 id=&quot;useful-terminology&quot;&gt;Useful Terminology:&lt;/h3&gt;
&lt;p&gt;Taking a moment to familiarise myself with the terminology used with mocks was an important step in understanding what they are.
* &lt;code class=&quot;highlighter-rouge&quot;&gt;Stub&lt;/code&gt; - A method that returns a specific result
* &lt;code class=&quot;highlighter-rouge&quot;&gt;Mock&lt;/code&gt; - A class with the assertion that a certain method was called.&lt;/p&gt;

&lt;p&gt;Don’t expect my usage of terminology to be spot on; I’m still learning!&lt;/p&gt;

&lt;h3 id=&quot;the-problem&quot;&gt;The Problem:&lt;/h3&gt;
&lt;p&gt;Jason suggested we try writing a virtual box office where a customer can book
tickets for a specific play. After a discussion we wrote an acceptance test (in
English) to outline what our end result should be able to do:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;Given that the seat A6 is available for a performance of &#39;Cats&#39;
when I reserve A6 using credit card number 1234
then A6 should be marked as reserved for 1234 and cannot be booked by anyone else.

### Roles:
* Seat (A6)
* Performance (Cats)
* Box office - entry point.


### Actions:
* Reserve


### States:
* Available (Seat)
* Marked as reserved for `[credit card number] (Seat)`
* Cannot be booked/Unavailable (Seat)

1. Customer tells box office to reserve seat A6 at performance of &#39;Cats&#39; using credit card number 1234
2. Box office finds performance of &#39;Cats&#39; and tells performance to reserve Seat A6 using credit card number 1234
3. &#39;Cats&#39; performance finds seat A6 and tells seat A6 to reserve itself using credit card number 1234
4. Seat A6 records the credit card number of the reserver.
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h3 id=&quot;building-outside-in&quot;&gt;Building Outside in:&lt;/h3&gt;
&lt;p&gt;When building an application from the outside in, we need some way of testing
the interaction between what we’re writing and the next layer in which hasn’t
been written yet. That’s were mocks and stubs come in…&lt;/p&gt;

&lt;p&gt;To start off Jason suggested that we design the program as a simple web
service–a query would come in with a performance name, credit card number, and
seat identifier. We’ d then reserve the seat if it was available, otherwise
throw and exception indicating the unavailability of that seat.&lt;/p&gt;

&lt;p&gt;The simplest thing I could think of testing was &lt;strong&gt;finding a specific
performance&lt;/strong&gt;, the implementation is pretty simple, define a method on
&lt;code class=&quot;highlighter-rouge&quot;&gt;BoxOffice&lt;/code&gt; that finds a performance in a &lt;code class=&quot;highlighter-rouge&quot;&gt;HashMap&amp;lt;String, Performance&amp;gt;&lt;/code&gt;.
Testing this is more complicated than simply asserting that the correct
performance was found using the search. Mocks to the rescue! We can write an
interface (&lt;code class=&quot;highlighter-rouge&quot;&gt;Mockito&lt;/code&gt; can also mock classes too, Jason showed me the traditional
way, before mocking classes was possible) for performance and then mock it using
&lt;code class=&quot;highlighter-rouge&quot;&gt;mock(Performance.class)&lt;/code&gt;, this returns a mock object of the type &lt;code class=&quot;highlighter-rouge&quot;&gt;Performance&lt;/code&gt;.
It has no functionality, but we can call any method on it that is defined in the
interface, the methods will not do anything as we haven’t defined any behaviour
for it (because for this test behaviour is superfluous).&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;    // BoxOffice is a field in the test class
protected Performance createBoxOfficeWithMockPerformance() {
	Performance mockPerformance = mock(Performance.class);
	HashMap&amp;lt;String, Performance&amp;gt; performances = new HashMap&amp;lt;&amp;gt;();
	performances.put(&quot;Cats&quot;, mockPerformance);
	boxOffice = new BoxOffice(performances);
	return mockPerformance;
}

@Test
public void findsPerformanceOfCats() {
	Performance mockPerformance = createBoxOfficeWithMockPerformance();
	assertEquals(mockPerformance, boxOffice.findPerformance(&quot;Cats&quot;));
}
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;I thought the responsibility of reserving a seat should belong to a &lt;code class=&quot;highlighter-rouge&quot;&gt;Seat&lt;/code&gt; class that would be at the bottom of the class hierarchy of the finished application:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;BoxOffice -&amp;gt; Performance -&amp;gt; Seat
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;BoxOffice&lt;/code&gt; would need to talk to &lt;code class=&quot;highlighter-rouge&quot;&gt;Performance&lt;/code&gt; which would then eventually talk to &lt;code class=&quot;highlighter-rouge&quot;&gt;Seat&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;We wrote the next test for &lt;strong&gt;Reserving a seat&lt;/strong&gt;. &lt;code class=&quot;highlighter-rouge&quot;&gt;BoxOffice.reserveSeat(String Performance, String seatIdentifier, String creditCardNumber)&lt;/code&gt; would be the signature of the method so we started by writing the assertion:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;verify(mockPerformance).reserveSeat(&quot;A6&quot;, &quot;1234&quot;)
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;verify&lt;/code&gt; takes a mock object and makes sure that the method was called using the same parameters, and so then it was time to call &lt;code class=&quot;highlighter-rouge&quot;&gt;mockPerformance.reserveSeat(...)&lt;/code&gt; which would be called by &lt;code class=&quot;highlighter-rouge&quot;&gt;BoxOffice.reserveSeat(...)&lt;/code&gt;&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;// mockPerformance is a performance of &quot;Cats&quot; in the box office
boxOffice.reserveSeat(&quot;Cats&quot;, &quot;A6&quot;, &quot;1234&quot;)
verify(mockPerformance).reserveSeat(&quot;A6&quot;, &quot;1234&quot;)
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h3 id=&quot;mocking-voids&quot;&gt;Mocking &lt;code class=&quot;highlighter-rouge&quot;&gt;voids&lt;/code&gt;:&lt;/h3&gt;
&lt;p&gt;Ouch! I had a hard time figuring out why &lt;code class=&quot;highlighter-rouge&quot;&gt;when(mockedObject.voidMethod).thenThrow(new RuntimeException())&lt;/code&gt; wasn’t working. Mockito’s &lt;code class=&quot;highlighter-rouge&quot;&gt;when&lt;/code&gt; method doesn’t work with void methods. You must use a &lt;code class=&quot;highlighter-rouge&quot;&gt;doReturn|doThrow|doAnswer...&lt;/code&gt; method, and so the &lt;code class=&quot;highlighter-rouge&quot;&gt;when&lt;/code&gt; code ends up looking like: &lt;code class=&quot;highlighter-rouge&quot;&gt;doThrow(new RuntimeException()).when(mockedObject).voidMethod(..);&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;This helped me mock &lt;code class=&quot;highlighter-rouge&quot;&gt;Performance&lt;/code&gt; so that I could throw an &lt;code class=&quot;highlighter-rouge&quot;&gt;UnavailableSeatException&lt;/code&gt; when trying to reserve a seat for the second time in my acceptance test.&lt;/p&gt;

&lt;h3 id=&quot;mocked-method-behaviour&quot;&gt;Mocked method behaviour&lt;/h3&gt;
&lt;p&gt;Giving mocked methods ‘intelligent’ behaviour cam be accomplished in 2 ways.&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;Changing the behaviour based on argument&lt;/li&gt;
  &lt;li&gt;Changing behavious based on number of invocations&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;The first:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;when(mockObject.method(1)).thenReturn(1)
when(mockObject.method(2)).thenReturn(2)
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;The second&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;when(mockObject.method()).thenReturn(1).thenReturn(2)
mockObject.method() // =&amp;gt; 1
mockObject.method() // =&amp;gt; 2
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;Mockito returns the mocked method for each &lt;code class=&quot;highlighter-rouge&quot;&gt;then*&lt;/code&gt; invocation, so you can chain the &lt;code class=&quot;highlighter-rouge&quot;&gt;then*&lt;/code&gt; methods together like in this example.&lt;/p&gt;

&lt;p&gt;My tests all have the mocks written into them. Jason suggested I try removing
this hardcoding of objects, allowing myself to inject either mocks or a concrete
implementation which will the focus of my next post; that is once I’ve managed
to do it, and write it up.&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>TDD rectangles</title>
   <link href="http://willprice.org//2013/06/02/tdd-rectangles.html"/>
   <updated>2013-06-02T00:00:00+01:00</updated>
   <id>http://willprice.org/2013/06/02/tdd-rectangles</id>
   <content type="html">&lt;p&gt;&lt;a href=&quot;http://www.codemanship.co.uk/parlezuml/blog/index.php&quot;&gt;Jason&lt;/a&gt; and I had a
rather interesting pair programming session last week where we tackled a problem
that I found on &lt;a href=&quot;http://topcoder.com&quot;&gt;Topcoder&lt;/a&gt;. It is in fact a slight twist
(easier) on the actual topcoder problem as I didn’t have it to hand when we were
pairing.&lt;/p&gt;

&lt;h2 id=&quot;the-problem&quot;&gt;The Problem:&lt;/h2&gt;

&lt;blockquote&gt;
  &lt;p&gt;Given a composite rectangle (composed of unit rectangles) of arbitrary dimensions, calculate the number of
sub rectangles that can be composed from the unit rectangles. Remember squares
are rectangles…&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;If that’s not clear enough, this diagram should help articulate what the problem
is.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/media/img/diagrams/tdd-rectangles/4x4-solution.svg&quot; alt=&quot;Diagram of 2x2 rectangles and it&#39;s 9 subrectangles&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Here we can see that you can create 9 rectangles from the initial 2x2 rectangle.&lt;/p&gt;

&lt;h2 id=&quot;the-design&quot;&gt;The Design:&lt;/h2&gt;
&lt;p&gt;Tackling this in a TDD-way we first had to decide on rough roadmap of
test cases. The simplest test case seemed to be a invalid rectangle,
0 rectangles high or wide, or both.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;Test cases:
-----------
1. Do not accept geometrically impossible rectangle
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;We’d then go on to a 1x1 rectangle, 1x2, 2x1, 3x1, 1x3, 2x2 and 3x2. Jason
stressed that we were just sketching out a path we &lt;em&gt;might&lt;/em&gt; take, it may not have
been neccessary to use all the test cases, or maybe we’d need more; the list
seemed like it would probably be sufficient for a full implementation.&lt;/p&gt;

&lt;p&gt;The next step was to figure out how many subrectangles there were in each
composite rectangle, this involved a bit of drawing and tallying. In the end I
think I only miscounted one test case which we noticed fairly quickly when
coding.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;Test cases:
-----------
1. Do not accept geometrically impossible rectangle
2. 1x1 has 1 subrectangle
3. 2x1 has 3 subrectangles
4. 1x2 has 3 subrectangles
5. 3x1 has 6 subrectangles
6. 1x3 has 6 subrectangles
7. 2x2 has 9 subrectangles
8. 3x2 has 18 subrectangles
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;Having written our roadmap it was now time to start tackling this problem. We
used Java, and JUnit with Eclipse.&lt;/p&gt;

&lt;p&gt;The implementation up to 3x1 was fairly simple, however it started to get a little
more tricky after that stage, it wasn’t immediately obvious what formula we
should have been using, &lt;code class=&quot;highlighter-rouge&quot;&gt;\(xy + (x-1)y + (y-1)x\)&lt;/code&gt; seemed like a promising
start, passing all the previous tests up until that point, addition of another
term sounded like it might hold the solution, however it was difficult to think
of what it could be, we didn’t come up with anything in the end.&lt;/p&gt;

&lt;p&gt;Our design up until this point had been heading towards a solution in the form
of &lt;code class=&quot;highlighter-rouge&quot;&gt;return some_algebraic_formula&lt;/code&gt;, we changed tack and started looking at it in
terms of combinations as we thought it might be a more successful avenue of
attack. Jason suggested it might be as simple as a factorial, given that there
are &lt;code class=&quot;highlighter-rouge&quot;&gt;\(^n C_r\)&lt;/code&gt; ways of ordering &lt;code class=&quot;highlighter-rouge&quot;&gt;\(r\)&lt;/code&gt; items from a sample of size &lt;code class=&quot;highlighter-rouge&quot;&gt;\(n\)&lt;/code&gt;
and…
&lt;code class=&quot;highlighter-rouge&quot;&gt;\[^n C_r = \frac{n!}{r!(n-r)!}\]&lt;/code&gt;
Maybe not as simple as a single factorial, but we were definitely dealing with
sequences and/or combinations. The problem with combinations is that they
calculate all possible combinations including non-contiguous options (think
first and last subrectangle of a 3x1). We didn’t discuss this at the time
because a simpler solution presented itself.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/media/img/diagrams/tdd-rectangles/combination-1.svg&quot; alt=&quot;Diagram demonstrating how many of each size of subrectangle are present in a
3x1 rectangle&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Being Test Driven in design, we looked at our current test case, a 3x1 rectangle
(I’ve illustrated a 1x3, imagine it’s just rotated!), after a bit of drawing and
colouring it was evident that the number of subrectangles present in a column
decreased by 1 for each unit increase in subrectangle length (refer to diagram). 
In the general case you have &lt;code class=&quot;highlighter-rouge&quot;&gt;\(n + (n-1) + (n-2) + \ldots + 1\)&lt;/code&gt; subrectangles
per column where &lt;code class=&quot;highlighter-rouge&quot;&gt;\(n\)&lt;/code&gt; is the length of the column. We could iterate over each
column and add either the general result of this formula (&lt;code class=&quot;highlighter-rouge&quot;&gt;\(\Sigma_0^nr\)&lt;/code&gt;), or
generate it on the fly with another loop. Initially it was simplest to just loop
over columns and rows separately, instead of trying to take the larger step and
implement the actual solution.&lt;/p&gt;

&lt;p&gt;Our implementation now took the form:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;long&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;getSubrectangles&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;kt&quot;&gt;long&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;numberOfSubrectangles&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;++)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;numberOfSubrectangles&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
    
    &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;j&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;j&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;y&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;j&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;++)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;numberOfSubrectangles&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;j&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;// We count the top left 1x1 rectangle twice with this method&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;numberOfSubrectangles&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;The next test case: 2x2, introduced a new class of rectangles, 2D, the others
had all been 1D in either the &lt;code class=&quot;highlighter-rouge&quot;&gt;\(x\)&lt;/code&gt; or &lt;code class=&quot;highlighter-rouge&quot;&gt;\(y\)&lt;/code&gt; axis. The previous
implementation yields 5 subrectangles instead of 9. We looked at which ones it
was counting, just the first row and first column – time to loop over the whole
thing. Enclosing each loop with an outer loop iterating over either column or
row depending on the inner loop and removing duplicates was a possibility, a
very messy one, probably unlikely to succeed in being the general solution
either. The algorithm needed to loop over both columns and rows (a nested loop?)
and then calculate the number of possibilities, hopefully without counting
duplicates.&lt;/p&gt;

&lt;p&gt;After a bit of trial and error we managed to reach the general solution:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;&lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;++)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;j&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;j&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;=&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;y&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;j&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;++)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;numberOfSubrectangles&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;j&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;I like this, it’s rather clever. It’s easiest to understand given an example,
let’s use the 2x2 rectangle we were trying to solve. The first column has 3
subrectangles, here’s what the code excecutes:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;i = 1:
    j = 1:
        numberOfSubrectangles += 1;
        // numberOfSubrectangles = 1;
    j = 2:
        numberOfSubrectangles += 2;
        // numberOfSubrectangles = 3;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;Looping over the first column we get 3 subrectangles, so good so far.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;i = 2:
    j = 1:
        numberOfSubrectangles += 2
        // numberOfSubrectangles = 5
    j = 2:
        numberOfSubrectangles += 4
        // numberOfSubrectangles = 9

return 9
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;Through the second column, the subrectangles found in &lt;code class=&quot;highlighter-rouge&quot;&gt;i = 1&lt;/code&gt; are found again in
this next column, however, we also need to take into account the rectangles that
are formed along the rows, which there are 3 of, giving us a total of 6
additional subrectangles.&lt;/p&gt;

&lt;h2 id=&quot;algebraic-solution&quot;&gt;Algebraic solution:&lt;/h2&gt;
&lt;p&gt;We had a solution! I like maths so I’ve found the algebraic solution from the
code. Reasoning about loops of loops in mathematics is particularly
aesthetically pleasing to me.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;&lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;++)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;j&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;j&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;=&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;y&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;j&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;++)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;numberOfSubrectangles&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;j&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;I’ll be using &lt;code class=&quot;highlighter-rouge&quot;&gt;\(z\)&lt;/code&gt; as the &lt;code class=&quot;highlighter-rouge&quot;&gt;numberOfSubrectangles&lt;/code&gt;, it makes writing the maths
easier.
&lt;code class=&quot;highlighter-rouge&quot;&gt;\[\begin{aligned}
 z &amp;amp;= \sum_{i=1}^x (\sum_{j=1}^y(ij)) \\
 z &amp;amp;= \sum_{i=1}^x i(\sum_{j=1}^y(j)) \\
 z &amp;amp;= \sum_{i=1}^xi(\frac{1}{2}y(y+1)) \\
 z &amp;amp;= \frac{1}{2}x(x+1)\frac{1}{2}y(y+1) \\
 z &amp;amp;= \frac{1}{4}xy(x+1)(y+1)
 \end{aligned}\]&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;You can literally change the Java code to return &lt;code class=&quot;highlighter-rouge&quot;&gt;\(z\)&lt;/code&gt;, how pleasing :)&lt;/p&gt;

&lt;p&gt;After tackling the problem with Jason, I had a go solving it mathematically a
few days after and by then I’d forgotten the solution; I didn’t have much success at all.
In this case I think developing in this way helped us to reach the insight that
we should add &lt;code class=&quot;highlighter-rouge&quot;&gt;i*j&lt;/code&gt; inside our nested loops. I don’t have the problem solving
skills to incrementally build a solution mathematically, although I’m starting
to aquire them in the domain of programming (very slowly), perhaps if I try and
apply a TDD approach to maths I may get further with hard mathematical problems?&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>Pulseaudio network streaming</title>
   <link href="http://willprice.org//2013/05/10/pulseaudio-network-streaming.html"/>
   <updated>2013-05-10T00:00:00+01:00</updated>
   <id>http://willprice.org/2013/05/10/pulseaudio-network-streaming</id>
   <content type="html">&lt;p&gt;I’ve tried setting up pulseaudio before to stream music from my laptop to my
desktop without much success. I attribute my past failures to my lack of
understanding of the client/server model that pulseaudio follows. Trust me when
I say it’s important to learn the necessery terminology to setup pulseaudio,
  you’ll end up quite confused otherwise!&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;server&lt;/code&gt; - A pulseaudio server or daemon accepts &lt;code class=&quot;highlighter-rouge&quot;&gt;sources&lt;/code&gt; and outputs audio
on a &lt;code class=&quot;highlighter-rouge&quot;&gt;sink&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;source&lt;/code&gt; - Any process that outputs audio, for example chromium playing music
from &lt;a href=&quot;http://hypem.com/willprice&quot;&gt;hypem.com&lt;/a&gt;. In the client/server relationship a &lt;em&gt;source&lt;/em&gt; is a &lt;em&gt;client&lt;/em&gt;.&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;sink&lt;/code&gt; - A soundcard, a remote pulseaudio server (with soundcards) and some
other niche things (think /dev/null, visualisers).&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;This diagram represents the setup we’re creating:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/media/img/diagrams/pa-network-streaming/pa-network-streaming.svg&quot; alt=&quot;Diagram of PA network streaming setup&quot; /&gt;&lt;/p&gt;

&lt;h2 id=&quot;setup-the-server-the-machine-that-is-attached-to-an-audio-device&quot;&gt;Setup the server (the machine that is attached to an audio device):&lt;/h2&gt;
&lt;p&gt;Add the following lines to &lt;code class=&quot;highlighter-rouge&quot;&gt;/etc/pulse/default.pa&lt;/code&gt;&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;  load-module module-native-protocol-tcp auth-ip-acl=127.0.0.1;192.168.0.0/24 auth-anonymous=1
  load-module module-zeroconf-publish
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;The first line sets up a TCP server for pulseaudio allowing remote sound sources
  to be utilized (clients can be anonymous as well). The second line sets up &lt;code class=&quot;highlighter-rouge&quot;&gt;zerconf&lt;/code&gt; publishing by the &lt;code class=&quot;highlighter-rouge&quot;&gt;avahi
  daemon&lt;/code&gt; (enable with &lt;code class=&quot;highlighter-rouge&quot;&gt;systemctl enable avahi-daemon &amp;amp;&amp;amp; systemctl start
          avahi-daemon&lt;/code&gt; on Arch), the clients that will attach to the server will also
  need the &lt;code class=&quot;highlighter-rouge&quot;&gt;avahi deamon&lt;/code&gt; running to be informed of the pulseaudio server you’ve
  just set up.&lt;/p&gt;

&lt;h2 id=&quot;setup-the-client-the-machine-that-you-want-audio-to-be-streamed-from&quot;&gt;Setup the client (the machine that you want audio to be streamed from)&lt;/h2&gt;
&lt;p&gt;Add the following lines to &lt;code class=&quot;highlighter-rouge&quot;&gt;/etc/pulse/default.pa&lt;/code&gt;
  load-module module-zeroconf-discover
  Understandably this module searches out for other pulseaudio servers on the LAN.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;load-module module-zeroconf-discover
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;Restart pulseaudio and install &lt;code class=&quot;highlighter-rouge&quot;&gt;pasystray&lt;/code&gt; or &lt;code class=&quot;highlighter-rouge&quot;&gt;padevchooser&lt;/code&gt; to set your sink
  (desktop) on the client/source (laptop).&lt;/p&gt;

&lt;h2 id=&quot;sources&quot;&gt;Sources&lt;/h2&gt;
&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;http://en.wikipedia.org/wiki/PulseAudio&quot;&gt;Pulseaudio on Wikipedia&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://colin.guthr.ie/2009/08/sound-on-linux-is-confusing-defuzzing-part-1-alsa/&quot;&gt;Sound on Linux is confusing part 1: ALSA&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://colin.guthr.ie/200k9/08/sound-on-linux-is-confusing-defuzzing-part-2-pulseaudio/&quot;&gt;Sound on Linux is confusing part 2: Pulseaudio&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;
    &lt;table&gt;
      &lt;tbody&gt;
        &lt;tr&gt;
          &lt;td&gt;[Pulseaudio examples&lt;/td&gt;
          &lt;td&gt;Arch Wiki](https://wiki.archlinux.org/index.php/PulseAudio/Examples#PulseAudio_over_network)&lt;/td&gt;
        &lt;/tr&gt;
      &lt;/tbody&gt;
    &lt;/table&gt;
  &lt;/li&gt;
&lt;/ul&gt;
</content>
 </entry>
 
 <entry>
   <title>Beginner's steps with TDD</title>
   <link href="http://willprice.org//2013/02/08/beginners-steps-with-tdd.html"/>
   <updated>2013-02-08T00:00:00+00:00</updated>
   <id>http://willprice.org/2013/02/08/beginners-steps-with-tdd</id>
   <content type="html">&lt;p&gt;&lt;a href=&quot;http://www.codemanship.co.uk/parlezuml/&quot;&gt;Jason Gorman&lt;/a&gt; has agreed to mentor me
in the subject of TDD (Test Driven Development). I plan to document my progress
as I learn the principles behind this philosophy.&lt;/p&gt;

&lt;p&gt;TDD can be roughly outlined as follows:
- Write a failing test for the desired functionality.
- Write the smallest amount of code that can make &lt;em&gt;that&lt;/em&gt; test pass.
- Refactor you code, making sure your changes don’t break functionality (keep
  running the tests)&lt;/p&gt;

&lt;p&gt;As my first introduction to TDD Jason and I did some pair programming where I
implemented a simple Fibonacci function, this enabled me to see how the general
principle worked: “Test a little, program a little”, and see what sort of
obstacles I might come across, such as “What’s the next test going to be where
there is no linear progression to follow”.&lt;/p&gt;

&lt;p&gt;I’ve given my self a quick crash course in &lt;em&gt;git&lt;/em&gt; to document my progress, I can
commit every time I write a test or a piece of code. The history of the code
can be viewed using &lt;code class=&quot;highlighter-rouge&quot;&gt;gitk filename&lt;/code&gt; using a GUI or &lt;code class=&quot;highlighter-rouge&quot;&gt;git log --follow --all -p
filename&lt;/code&gt;[1].&lt;/p&gt;

&lt;p&gt;I don’t have the commit history for the &lt;em&gt;very&lt;/em&gt; first Fibonacci sequence exercise
I did, however I’ve got my third attempt at it (it’s  pretty similar to the
first, I’ve just been trying to internalize the concepts I’ve met so far).&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-diff&quot; data-lang=&quot;diff&quot;&gt;commit 9c764e57c26e43a87954fbc9026119530c2b6ecf
Author: Will Price &amp;lt;will.price94@gmail.com&amp;gt;
Date:   Tue Jan 29 17:56:42 2013 +0000

    Rename testLengthOf51 -&amp;gt; testLengthOfFiftyOne for consistency

&lt;span class=&quot;gh&quot;&gt;diff --git a/fibonacci.py b/fibonacci.py
index b6d3197..dc28f8c 100755
&lt;/span&gt;&lt;span class=&quot;gd&quot;&gt;--- a/fibonacci.py
&lt;/span&gt;&lt;span class=&quot;gi&quot;&gt;+++ b/fibonacci.py
&lt;/span&gt;&lt;span class=&quot;gu&quot;&gt;@@ -39,7 +39,7 @@ class TestFibonacciGenerator(unittest.TestCase):
&lt;/span&gt;     def testLengthOfSeven(self):
         self.assertRaises(ValueError, self.fibonacciGenerator, 7)
 
&lt;span class=&quot;gd&quot;&gt;-    def testLengthOf51(self):
&lt;/span&gt;&lt;span class=&quot;gi&quot;&gt;+    def testLengthOfFiftyOne(self):
&lt;/span&gt;         self.assertRaises(ValueError, self.fibonacciGenerator, 51)
 
 if __name__ == &#39;__main__&#39;:

commit b73e6566b457ae493195ab04d8baf2bf5cfaf1bf
Author: Will Price &amp;lt;will.price94@gmail.com&amp;gt;
Date:   Tue Jan 29 17:56:13 2013 +0000

    Code to pass testLengthOf51

&lt;span class=&quot;gh&quot;&gt;diff --git a/fibonacci.py b/fibonacci.py
index d3df5a9..b6d3197 100755
&lt;/span&gt;&lt;span class=&quot;gd&quot;&gt;--- a/fibonacci.py
&lt;/span&gt;&lt;span class=&quot;gi&quot;&gt;+++ b/fibonacci.py
&lt;/span&gt;&lt;span class=&quot;gu&quot;&gt;@@ -4,7 +4,7 @@ import unittest
&lt;/span&gt; 
 class TestFibonacciGenerator(unittest.TestCase):
     def fibonacciGenerator(self, length):
&lt;span class=&quot;gd&quot;&gt;-        if (length &amp;lt; 8):
&lt;/span&gt;&lt;span class=&quot;gi&quot;&gt;+        if (length &amp;lt; 8 or length &amp;gt; 50):
&lt;/span&gt;             raise ValueError
 
         fibonacciSequence = [0, 1]
&lt;span class=&quot;gu&quot;&gt;@@ -39,5 +39,8 @@ class TestFibonacciGenerator(unittest.TestCase):
&lt;/span&gt;     def testLengthOfSeven(self):
         self.assertRaises(ValueError, self.fibonacciGenerator, 7)
 
&lt;span class=&quot;gi&quot;&gt;+    def testLengthOf51(self):
+        self.assertRaises(ValueError, self.fibonacciGenerator, 51)
+
&lt;/span&gt; if __name__ == &#39;__main__&#39;:
     unittest.main()

commit 67062b240b5d25631fd8d87fc2aeb3ae5e9b983e
Author: Will Price &amp;lt;will.price94@gmail.com&amp;gt;
Date:   Tue Jan 29 17:54:41 2013 +0000

    Code to pass TestLengthOfSeven

&lt;span class=&quot;gh&quot;&gt;diff --git a/fibonacci.py b/fibonacci.py
index fcd695d..d3df5a9 100755
&lt;/span&gt;&lt;span class=&quot;gd&quot;&gt;--- a/fibonacci.py
&lt;/span&gt;&lt;span class=&quot;gi&quot;&gt;+++ b/fibonacci.py
&lt;/span&gt;&lt;span class=&quot;gu&quot;&gt;@@ -4,6 +4,9 @@ import unittest
&lt;/span&gt; 
 class TestFibonacciGenerator(unittest.TestCase):
     def fibonacciGenerator(self, length):
&lt;span class=&quot;gi&quot;&gt;+        if (length &amp;lt; 8):
+            raise ValueError
+
&lt;/span&gt;         fibonacciSequence = [0, 1]
 
         for i in range(2, length):

commit c313448c856360f009864e4c54d0fb25b47143ef
Author: Will Price &amp;lt;will.price94@gmail.com&amp;gt;
Date:   Tue Jan 29 17:53:56 2013 +0000

    Test for length of 7 (invalid)

&lt;span class=&quot;gh&quot;&gt;diff --git a/fibonacci.py b/fibonacci.py
index 274d12b..fcd695d 100755
&lt;/span&gt;&lt;span class=&quot;gd&quot;&gt;--- a/fibonacci.py
&lt;/span&gt;&lt;span class=&quot;gi&quot;&gt;+++ b/fibonacci.py
&lt;/span&gt;&lt;span class=&quot;gu&quot;&gt;@@ -33,5 +33,8 @@ class TestFibonacciGenerator(unittest.TestCase):
&lt;/span&gt;     def testValidLength(self):
         self.assertEquals(8, len(self.fibonacciGenerator(8)))
 
&lt;span class=&quot;gi&quot;&gt;+    def testLengthOfSeven(self):
+        self.assertRaises(ValueError, self.fibonacciGenerator, 7)
+
&lt;/span&gt; if __name__ == &#39;__main__&#39;:
     unittest.main()

commit 0ad4ec5dd3a1df92fe40afb608f62ac7c8c52cda
Author: Will Price &amp;lt;will.price94@gmail.com&amp;gt;
Date:   Tue Jan 29 17:50:05 2013 +0000

    Changed testLength to testValidLength for clarity

&lt;span class=&quot;gh&quot;&gt;diff --git a/fibonacci.py b/fibonacci.py
index 61f6f9a..274d12b 100755
&lt;/span&gt;&lt;span class=&quot;gd&quot;&gt;--- a/fibonacci.py
&lt;/span&gt;&lt;span class=&quot;gi&quot;&gt;+++ b/fibonacci.py
&lt;/span&gt;&lt;span class=&quot;gu&quot;&gt;@@ -30,7 +30,8 @@ class TestFibonacciGenerator(unittest.TestCase):
&lt;/span&gt;     def testSixthNumber(self):
         self.assertEquals(5, self.fibonacciGenerator(8)[5])
 
&lt;span class=&quot;gd&quot;&gt;-    def testLength(self):
&lt;/span&gt;&lt;span class=&quot;gi&quot;&gt;+    def testValidLength(self):
&lt;/span&gt;         self.assertEquals(8, len(self.fibonacciGenerator(8)))
&lt;span class=&quot;gi&quot;&gt;+
&lt;/span&gt; if __name__ == &#39;__main__&#39;:
     unittest.main()

commit f3c473f0fdd0d3e21f23efcf0916ea188a08f44c
Author: Will Price &amp;lt;will.price94@gmail.com&amp;gt;
Date:   Tue Jan 29 17:49:13 2013 +0000

    Test length of list

&lt;span class=&quot;gh&quot;&gt;diff --git a/fibonacci.py b/fibonacci.py
index 783b800..61f6f9a 100755
&lt;/span&gt;&lt;span class=&quot;gd&quot;&gt;--- a/fibonacci.py
&lt;/span&gt;&lt;span class=&quot;gi&quot;&gt;+++ b/fibonacci.py
&lt;/span&gt;&lt;span class=&quot;gu&quot;&gt;@@ -7,7 +7,7 @@ class TestFibonacciGenerator(unittest.TestCase):
&lt;/span&gt;         fibonacciSequence = [0, 1]
 
         for i in range(2, length):
&lt;span class=&quot;gd&quot;&gt;-            fibonacciSequence.append(fibonacciSequence[i-2] + fibonacciSequence[i-1])
&lt;/span&gt;&lt;span class=&quot;gi&quot;&gt;+            fibonacciSequence.append(fibonacciSequence[i - 2] + fibonacciSequence[i - 1])
&lt;/span&gt; 
         return fibonacciSequence
 
&lt;span class=&quot;gu&quot;&gt;@@ -29,5 +29,8 @@ class TestFibonacciGenerator(unittest.TestCase):
&lt;/span&gt; 
     def testSixthNumber(self):
         self.assertEquals(5, self.fibonacciGenerator(8)[5])
&lt;span class=&quot;gi&quot;&gt;+
+    def testLength(self):
+        self.assertEquals(8, len(self.fibonacciGenerator(8)))
&lt;/span&gt; if __name__ == &#39;__main__&#39;:
     unittest.main()

commit 1130cea31b30924f49fe49f3042da45a2825a460
Author: Will Price &amp;lt;will.price94@gmail.com&amp;gt;
Date:   Tue Jan 29 17:47:05 2013 +0000

    Test 6th number + code for that

&lt;span class=&quot;gh&quot;&gt;diff --git a/fibonacci.py b/fibonacci.py
index f1b21d9..783b800 100755
&lt;/span&gt;&lt;span class=&quot;gd&quot;&gt;--- a/fibonacci.py
&lt;/span&gt;&lt;span class=&quot;gi&quot;&gt;+++ b/fibonacci.py
&lt;/span&gt;&lt;span class=&quot;gu&quot;&gt;@@ -5,8 +5,10 @@ import unittest
&lt;/span&gt; class TestFibonacciGenerator(unittest.TestCase):
     def fibonacciGenerator(self, length):
         fibonacciSequence = [0, 1]
&lt;span class=&quot;gi&quot;&gt;+
&lt;/span&gt;         for i in range(2, length):
&lt;span class=&quot;gd&quot;&gt;-            fibonacciSequence.append(i - 1)
&lt;/span&gt;&lt;span class=&quot;gi&quot;&gt;+            fibonacciSequence.append(fibonacciSequence[i-2] + fibonacciSequence[i-1])
+
&lt;/span&gt;         return fibonacciSequence
 
     # TESTS
&lt;span class=&quot;gu&quot;&gt;@@ -24,5 +26,8 @@ class TestFibonacciGenerator(unittest.TestCase):
&lt;/span&gt; 
     def testFifthNumber(self):
         self.assertEquals(3, self.fibonacciGenerator(8)[4])
&lt;span class=&quot;gi&quot;&gt;+
+    def testSixthNumber(self):
+        self.assertEquals(5, self.fibonacciGenerator(8)[5])
&lt;/span&gt; if __name__ == &#39;__main__&#39;:
     unittest.main()

commit d0256181239d47d8d975eed0bfb4277fb7a78ae2
Author: Will Price &amp;lt;will.price94@gmail.com&amp;gt;
Date:   Tue Jan 29 17:40:18 2013 +0000

    Test fifth number, no code needed to pass

&lt;span class=&quot;gh&quot;&gt;diff --git a/fibonacci.py b/fibonacci.py
index 3400d82..f1b21d9 100755
&lt;/span&gt;&lt;span class=&quot;gd&quot;&gt;--- a/fibonacci.py
&lt;/span&gt;&lt;span class=&quot;gi&quot;&gt;+++ b/fibonacci.py
&lt;/span&gt;&lt;span class=&quot;gu&quot;&gt;@@ -22,5 +22,7 @@ class TestFibonacciGenerator(unittest.TestCase):
&lt;/span&gt;     def testFourthNumber(self):
         self.assertEquals(2, self.fibonacciGenerator(8)[3])
 
&lt;span class=&quot;gi&quot;&gt;+    def testFifthNumber(self):
+        self.assertEquals(3, self.fibonacciGenerator(8)[4])
&lt;/span&gt; if __name__ == &#39;__main__&#39;:
     unittest.main()

commit 92b636a26292f1e78078652c039347bca2027321
Author: Will Price &amp;lt;will.price94@gmail.com&amp;gt;
Date:   Tue Jan 29 17:36:11 2013 +0000

    Test fourth number, no code needed to pass

&lt;span class=&quot;gh&quot;&gt;diff --git a/fibonacci.py b/fibonacci.py
index c43b118..3400d82 100755
&lt;/span&gt;&lt;span class=&quot;gd&quot;&gt;--- a/fibonacci.py
&lt;/span&gt;&lt;span class=&quot;gi&quot;&gt;+++ b/fibonacci.py
&lt;/span&gt;&lt;span class=&quot;gu&quot;&gt;@@ -19,5 +19,8 @@ class TestFibonacciGenerator(unittest.TestCase):
&lt;/span&gt;     def testThirdNumber(self):
         self.assertEquals(1, self.fibonacciGenerator(8)[2])
 
&lt;span class=&quot;gi&quot;&gt;+    def testFourthNumber(self):
+        self.assertEquals(2, self.fibonacciGenerator(8)[3])
+
&lt;/span&gt; if __name__ == &#39;__main__&#39;:
     unittest.main()

commit 08b1e5edc66858f2205e16f32875706e06a128e6
Author: Will Price &amp;lt;will.price94@gmail.com&amp;gt;
Date:   Tue Jan 29 17:35:02 2013 +0000

    Code for third test

&lt;span class=&quot;gh&quot;&gt;diff --git a/fibonacci.py b/fibonacci.py
index 28ed083..c43b118 100755
&lt;/span&gt;&lt;span class=&quot;gd&quot;&gt;--- a/fibonacci.py
&lt;/span&gt;&lt;span class=&quot;gi&quot;&gt;+++ b/fibonacci.py
&lt;/span&gt;&lt;span class=&quot;gu&quot;&gt;@@ -4,8 +4,12 @@ import unittest
&lt;/span&gt; 
 class TestFibonacciGenerator(unittest.TestCase):
     def fibonacciGenerator(self, length):
&lt;span class=&quot;gd&quot;&gt;-        return [0, 1]
&lt;/span&gt;&lt;span class=&quot;gi&quot;&gt;+        fibonacciSequence = [0, 1]
+        for i in range(2, length):
+            fibonacciSequence.append(i - 1)
+        return fibonacciSequence
&lt;/span&gt; 
&lt;span class=&quot;gi&quot;&gt;+    # TESTS
&lt;/span&gt;     def testFirstNumber(self):
         self.assertEquals(0, self.fibonacciGenerator(8)[0])
 

commit a5f3e527cdc205afeaf8df930534304a991091bd
Author: Will Price &amp;lt;will.price94@gmail.com&amp;gt;
Date:   Tue Jan 29 14:59:51 2013 +0000

    Add code for passing second test, test for third number

&lt;span class=&quot;gh&quot;&gt;diff --git a/fibonacci.py b/fibonacci.py
index c9d28f3..28ed083 100755
&lt;/span&gt;&lt;span class=&quot;gd&quot;&gt;--- a/fibonacci.py
&lt;/span&gt;&lt;span class=&quot;gi&quot;&gt;+++ b/fibonacci.py
&lt;/span&gt;&lt;span class=&quot;gu&quot;&gt;@@ -4,7 +4,7 @@ import unittest
&lt;/span&gt; 
 class TestFibonacciGenerator(unittest.TestCase):
     def fibonacciGenerator(self, length):
&lt;span class=&quot;gd&quot;&gt;-        return [0]
&lt;/span&gt;&lt;span class=&quot;gi&quot;&gt;+        return [0, 1]
&lt;/span&gt; 
     def testFirstNumber(self):
         self.assertEquals(0, self.fibonacciGenerator(8)[0])
&lt;span class=&quot;gu&quot;&gt;@@ -12,6 +12,8 @@ class TestFibonacciGenerator(unittest.TestCase):
&lt;/span&gt;     def testSecondNumber(self):
         self.assertEquals(1, self.fibonacciGenerator(8)[1])
 
&lt;span class=&quot;gi&quot;&gt;+    def testThirdNumber(self):
+        self.assertEquals(1, self.fibonacciGenerator(8)[2])
&lt;/span&gt; 
 if __name__ == &#39;__main__&#39;:
     unittest.main()

commit f04d7ec901640e5771a4ae816f17fbfade9ee9af
Author: Will Price &amp;lt;will.price94@gmail.com&amp;gt;
Date:   Tue Jan 29 14:58:04 2013 +0000

    Code to pass first test, test for second number

&lt;span class=&quot;gh&quot;&gt;diff --git a/fibonacci.py b/fibonacci.py
index 54fe5bf..c9d28f3 100755
&lt;/span&gt;&lt;span class=&quot;gd&quot;&gt;--- a/fibonacci.py
&lt;/span&gt;&lt;span class=&quot;gi&quot;&gt;+++ b/fibonacci.py
&lt;/span&gt;&lt;span class=&quot;gu&quot;&gt;@@ -4,11 +4,14 @@ import unittest
&lt;/span&gt; 
 class TestFibonacciGenerator(unittest.TestCase):
     def fibonacciGenerator(self, length):
&lt;span class=&quot;gd&quot;&gt;-        return [None]
&lt;/span&gt;&lt;span class=&quot;gi&quot;&gt;+        return [0]
&lt;/span&gt; 
     def testFirstNumber(self):
         self.assertEquals(0, self.fibonacciGenerator(8)[0])
 
&lt;span class=&quot;gi&quot;&gt;+    def testSecondNumber(self):
+        self.assertEquals(1, self.fibonacciGenerator(8)[1])
+
&lt;/span&gt; 
 if __name__ == &#39;__main__&#39;:
     unittest.main()

commit a6a83808fb900638706ccfdbbe922b36f5e27d4d
Author: Will Price &amp;lt;will.price94@gmail.com&amp;gt;
Date:   Tue Jan 29 14:51:39 2013 +0000

    Testing first fibonacci number, implemented fibonacciGenerator function

&lt;span class=&quot;gh&quot;&gt;diff --git a/fibonacci.py b/fibonacci.py
index f4dfbd8..54fe5bf 100755
&lt;/span&gt;&lt;span class=&quot;gd&quot;&gt;--- a/fibonacci.py
&lt;/span&gt;&lt;span class=&quot;gi&quot;&gt;+++ b/fibonacci.py
&lt;/span&gt;&lt;span class=&quot;gu&quot;&gt;@@ -1,7 +1,14 @@
&lt;/span&gt; #!/usr/bin/env python2
 import unittest
 
&lt;span class=&quot;gi&quot;&gt;+
&lt;/span&gt; class TestFibonacciGenerator(unittest.TestCase):
&lt;span class=&quot;gi&quot;&gt;+    def fibonacciGenerator(self, length):
+        return [None]
+
+    def testFirstNumber(self):
+        self.assertEquals(0, self.fibonacciGenerator(8)[0])
+
&lt;/span&gt; 
 if __name__ == &#39;__main__&#39;:
     unittest.main()

commit d8bbcd07a01cc3b84a006bb8546133604bed12ba
Author: Will Price &amp;lt;will.price94@gmail.com&amp;gt;
Date:   Tue Jan 29 10:16:20 2013 +0000

    Skeleton

&lt;span class=&quot;gh&quot;&gt;diff --git a/fibonacci.py b/fibonacci.py
&lt;/span&gt;new file mode 100755
&lt;span class=&quot;gh&quot;&gt;index 0000000..f4dfbd8
&lt;/span&gt;&lt;span class=&quot;gd&quot;&gt;--- /dev/null
&lt;/span&gt;&lt;span class=&quot;gi&quot;&gt;+++ b/fibonacci.py
&lt;/span&gt;&lt;span class=&quot;gu&quot;&gt;@@ -0,0 +1,7 @@
&lt;/span&gt;&lt;span class=&quot;gi&quot;&gt;+#!/usr/bin/env python2
+import unittest
+
+class TestFibonacciGenerator(unittest.TestCase):
+
+if __name__ == &#39;__main__&#39;:
&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;+    unittest.main()&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;You might disagree with my steps, or marvel at my crap commit messages; I’m just
getting started with the tools and methodologies so hopefully in 6 months time
I’ll be able to look back at this and correct all my mistakes.&lt;/p&gt;

&lt;p&gt;I’ve been using &lt;code class=&quot;highlighter-rouge&quot;&gt;tmux&lt;/code&gt; to organise my work, &lt;code class=&quot;highlighter-rouge&quot;&gt;vim&lt;/code&gt; to edit it, &lt;code class=&quot;highlighter-rouge&quot;&gt;git&lt;/code&gt; to save
progress and &lt;code class=&quot;highlighter-rouge&quot;&gt;watch&lt;/code&gt; to continually test my code (this is very handy!). I’m
reasonably pleased with this workflow, it’s both simple and flexible.
[1] - ‘–follow’ handles renames, ‘–all’ shows commits on all branches, ‘-p’
shows the changes in patch form (otherwise you just get commit messages)&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>CS101 Unit 4: Homework 4: Splitting Strings</title>
   <link href="http://willprice.org//2012/11/19/CS101-Homework-4-splitting-strings.html"/>
   <updated>2012-11-19T00:00:00+00:00</updated>
   <id>http://willprice.org/2012/11/19/CS101-Homework-4-splitting-strings</id>
   <content type="html">&lt;p&gt;I’ve been going through CS101 on Udacity to get a decent grounding in Python and some CS concepts. So far I’ve found it quite rewarding thanks to some rather challenging questions. This question in particular (Unit 4 homework, question 4) I found very difficult to crack and finally had to watch the answer video. I’ll explain the question and how the solution is reached for those that didn’t find the video particularly clear.&lt;/p&gt;

&lt;p&gt;The question:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt; # 1 Gold Star
 
 # The built-in &amp;lt;string&amp;gt;.split() procedure works
 # okay, but fails to find all the words on a page
 # because it only uses whitespace to split the
 # string. To do better, we should also use punctuation
 # marks to split the page into words.
 
 # Define a procedure, split_string, that takes two
 # inputs: the string to split and a string containing
 # all of the characters considered separators. The
 # procedure should return a list of strings that break
 # the source string up by the characters in the
 # splitlist.
 #
 # def split_string(source,splitlist)
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;There are also some examples and expected behaviour given:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt; out = split_string(&quot;This is a test-of the,string separation-code!&quot;,&quot; ,!-&quot;)
 print out
 #&amp;gt;&amp;gt;&amp;gt; [&#39;This&#39;, &#39;is&#39;, &#39;a&#39;, &#39;test&#39;, &#39;of&#39;, &#39;the&#39;, &#39;string&#39;, &#39;separation&#39;, &#39;code&#39;]
 
 out = split_string(&quot;After  the flood   ...  all the colors came out.&quot;, &quot; .&quot;)
 print out
 #&amp;gt;&amp;gt;&amp;gt; [&#39;After&#39;, &#39;the&#39;, &#39;flood&#39;, &#39;all&#39;, &#39;the&#39;, &#39;colors&#39;, &#39;came&#39;, &#39;out&#39;]
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;Approaching the problem from a high level we can see that in essence we need produce a list of words (sets of characters that aren’t members of &lt;code class=&quot;highlighter-rouge&quot;&gt;splitlist&lt;/code&gt;) that are separated by splitting characters (as defined in &lt;code class=&quot;highlighter-rouge&quot;&gt;splitlist&lt;/code&gt;).&lt;/p&gt;

&lt;p&gt;Let’s define a list,&lt;code class=&quot;highlighter-rouge&quot;&gt;word_list&lt;/code&gt;, that will hold all the words from source without the splitting characters present, each block of characters seperated by splitlist characters will be a new entry in &lt;code class=&quot;highlighter-rouge&quot;&gt;word_list&lt;/code&gt;. We want to iterate through &lt;code class=&quot;highlighter-rouge&quot;&gt;source&lt;/code&gt; adding characters to a string present in &lt;code class=&quot;highlighter-rouge&quot;&gt;word_list&lt;/code&gt; until we hit upon a splitting character. At that point we want to skip to the next character and check whether that’s also a splitting character, if it is, then skip to the next one and so on until we reach a word character (i.e. one not present in splitlist). Once we reach that new word character, we’ll need to start a new entry in the word_list list otherwise we’ll continue appending to the first word we found and therefore just end up with an list containing one element; a string containing all the words without any splitting characters in it.&lt;/p&gt;

&lt;p&gt;Now we have a better of idea of the problem and how to implement the solution we can start writing code:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-py&quot; data-lang=&quot;py&quot;&gt;&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;split_string&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;source&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;splitlist&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;word_list&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[]&lt;/span&gt;

    &lt;span class=&quot;c&quot;&gt;# Once we&#39;ve filled word list, we&#39;ll want to return the list containing all the words&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;word_list&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;So we’ve got a skeleton function now, we know what parameters the function is going to take and the end result. We’ll now add functionality that loops through &lt;code class=&quot;highlighter-rouge&quot;&gt;source&lt;/code&gt; and check which characters are members of split list&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-py&quot; data-lang=&quot;py&quot;&gt;&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;split_string&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;source&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;splitlist&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;word_list&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[]&lt;/span&gt;

    &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;char&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;source&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;char&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;splitlist&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;print&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;this char: &quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;str&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;char&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot; is in splitlist&quot;&lt;/span&gt;

    &lt;span class=&quot;c&quot;&gt;# Once we&#39;ve filled word list, we&#39;ll want to return the list containing all the words&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;word_list&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;out&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;split_string&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;This is a test-of the,string separation-code!&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot; ,!-.&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;print&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;out&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;This code results in:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;  this char:   is in splitlist
  this char:   is in splitlist
  this char:   is in splitlist
  this char: - is in splitlist
  this char:   is in splitlist
  this char: , is in splitlist
  this char:   is in splitlist
  this char: - is in splitlist
  this char: ! is in splitlist
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;We’ve got a code block that is executed when &lt;code class=&quot;highlighter-rouge&quot;&gt;char&lt;/code&gt; is equal to a character from &lt;code class=&quot;highlighter-rouge&quot;&gt;splitlist&lt;/code&gt;. We can now implement the code that will add the words to &lt;code class=&quot;highlighter-rouge&quot;&gt;word_list&lt;/code&gt;. Remember that once we’ve added a word to &lt;code class=&quot;highlighter-rouge&quot;&gt;word_list&lt;/code&gt; and have iterated over the splitting characters between the word just added and the word about to be added, a new list entry needs to be added otherwise we’ll end up with one great list of words without spaces. First we’ll acheive this unwanted behaviour as it’s a step in the right direction, then we’ll add checks to create new list entries splitting the words properly.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-py&quot; data-lang=&quot;py&quot;&gt;&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;split_string&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;source&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;splitlist&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;word_list&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&#39;&#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;

    &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;char&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;source&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;char&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;splitlist&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;print&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;this char: &quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;str&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;char&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot; is in splitlist&quot;&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;word_list&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;word_list&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;char&lt;/span&gt;
    &lt;span class=&quot;c&quot;&gt;# Once we&#39;ve filled word list, we&#39;ll want to return the list containing all the words&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;word_list&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;out&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;split_string&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;This is a test-of the,string separation-code!&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot; ,.!-&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;print&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;out&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;word_list&lt;/code&gt;s initialisation value has changed so that it contains an empty string, this will allow us to concatenate characters with it, otherwise an error would be raised if it was simply left empty. In our for loop there is a conditional that will now concatenate non-splitting characters with our string in &lt;code class=&quot;highlighter-rouge&quot;&gt;word_list&lt;/code&gt;. This produces one big string inside the list, our code now has to be modified so that each word gets a new entry in the list.&lt;/p&gt;

&lt;p&gt;To acheive the functionality above, we need to know when we get to splitting characters, we’ve already got a block of code that deals with this situation, it’s simply printing lines at the moment, not doing anything useful, we’ll change that so we know when we’ve reached a splitting character.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-py&quot; data-lang=&quot;py&quot;&gt;&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;split_string&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;source&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;splitlist&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;word_list&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&#39;&#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;

    &lt;span class=&quot;n&quot;&gt;at_split&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;bp&quot;&gt;False&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;char&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;source&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;char&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;splitlist&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;at_split&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;bp&quot;&gt;True&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;at_split&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;bp&quot;&gt;False&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;word_list&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;word_list&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;char&lt;/span&gt;
    &lt;span class=&quot;c&quot;&gt;# Once we&#39;ve filled word list, we&#39;ll want to return the list containing all the words&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;word_list&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;out&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;split_string&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;This is a test-of the,string separation-code!&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot; ,.!-&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;print&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;out&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Here we’ve intialised &lt;code class=&quot;highlighter-rouge&quot;&gt;at_split&lt;/code&gt; outside of the for loop as it’s going to be used in the else statement and hence has to be accessible by the if and else statements. This change hasn’t affected the functionality of &lt;code class=&quot;highlighter-rouge&quot;&gt;split_string&lt;/code&gt; yet, but it’s a step in the right direction, we now have a variable that can be used to execute code blocks when an end of word is reached, which is the last step to reproducing the desired behaviour.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-py&quot; data-lang=&quot;py&quot;&gt;&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;split_string&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;source&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;splitlist&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;word_list&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&#39;&#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;

    &lt;span class=&quot;n&quot;&gt;at_split&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;bp&quot;&gt;False&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;char&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;source&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;char&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;splitlist&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;at_split&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;bp&quot;&gt;True&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;at_split&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
                &lt;span class=&quot;c&quot;&gt;# We&#39;ve now reached the start of the word, time to make a new element in the list&lt;/span&gt;
                &lt;span class=&quot;n&quot;&gt;word_list&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;append&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;char&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;c&quot;&gt;# This creates a new element in the array with the value of &#39;char&#39;&lt;/span&gt;
                &lt;span class=&quot;c&quot;&gt;# Reset at_split so no more elements are created until we reach a new word&lt;/span&gt;
                &lt;span class=&quot;n&quot;&gt;at_split&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;bp&quot;&gt;False&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
                &lt;span class=&quot;c&quot;&gt;# Char is not in splitlist, and we&#39;re not at the start of a word, so simply concatenate&lt;/span&gt;
                &lt;span class=&quot;c&quot;&gt;# char with the last entry in word_list&lt;/span&gt;
                &lt;span class=&quot;n&quot;&gt;word_list&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;word_list&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;char&lt;/span&gt;

    &lt;span class=&quot;c&quot;&gt;# Once we&#39;ve filled word list, we&#39;ll want to return the list containing all the words&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;word_list&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;out&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;split_string&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;This is a test-of the,string separation-code!&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot; ,.!-&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;print&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;out&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Finally, we have the behaviour, the code above prints:
      [‘This’, ‘is’, ‘a’, ‘test’, ‘of’, ‘the’, ‘string’, ‘separation’, ‘code’]&lt;/p&gt;

&lt;p&gt;Mission accomplished.&lt;/p&gt;

&lt;p&gt;I’ve also used Python Tutor’s visualise program to show how the code is executed: &lt;a href=&quot;http://goo.gl/GSRHJ&quot;&gt;Visualised&lt;/a&gt;. I found this helpful to understand what was happening as words were ending and new elements in the list were being created.&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>Processing and XMonad</title>
   <link href="http://willprice.org//2012/11/07/processing-and-xmonad.html"/>
   <updated>2012-11-07T00:00:00+00:00</updated>
   <id>http://willprice.org/2012/11/07/processing-and-xmonad</id>
   <content type="html">&lt;p&gt;After having put up with problems with the Processing IDE for quite a
while, I could no longer take not being able to focus the text area
without clicking on the stop button.&lt;/p&gt;

&lt;p&gt;It transpires this is an issue caused by XMonad’s handling of Java swing
applications as noted by Krzysztof Krason in a &lt;a href=&quot;http://youtrack.jetbrains.com/issue/IDEA-65637&quot;&gt;thread&lt;/a&gt;
in regard to the IDEA IDE (which also uses Java swing).&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;It’s not a problem with Intellij but with XMonad, it has problems with
java swing applications.
The solution is to use something like this in to add “import
XMonad.Hooks.ICCCMFocus” and in your logHook add “takeTopFocus”.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;So the solution is remarkable simple. Just add these lines to your
xmonad.hs file:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-haskell&quot; data-lang=&quot;haskell&quot;&gt;&lt;span class=&quot;kr&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;XMonad.Hooks.ICCCMFocus&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;main&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kr&quot;&gt;do&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;logHook&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;...&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;gt&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;gt&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;takeTopFocus&lt;/span&gt; &lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

</content>
 </entry>
 
 <entry>
   <title>Gmail Notifier</title>
   <link href="http://willprice.org//2012/01/07/gmail-notifier.html"/>
   <updated>2012-01-07T00:00:00+00:00</updated>
   <id>http://willprice.org/2012/01/07/gmail-notifier</id>
   <content type="html">&lt;div class=&#39;post&#39;&gt;
4 Years ago Tom Paton posted &lt;a href=&quot;http://successlessness.blogspot.com/2007/07/ambient-email-notifier.html&quot;&gt;this&lt;/a&gt;&amp;nbsp;and I asked him about his code, thus prompting him to post &lt;a href=&quot;http://successlessness.blogspot.com/2008/02/ambient-email-notifier-some-code.html&quot;&gt;this&lt;/a&gt;. 4 Years later, now finally equipped with some know how and a little bit more experience with microcontrollers and programming, I thought this a fairly ideal project to have a bash at.&lt;br /&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;div&gt;I adapted his python code to something a little more appropriate for my usage:&lt;br /&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;script src=&quot;https://gist.github.com/1579856.js&quot;&gt; &lt;/script&gt;&lt;/div&gt;&lt;div&gt;(replace &lt;b&gt;username &lt;/b&gt;and &lt;b&gt;password&lt;/b&gt;&amp;nbsp;with your username and password. You might also need to fiddle with the serial port I&#39;ve got mine setup as /dev/ttyUSB1)&lt;br /&gt;&lt;br /&gt;Here&#39;s the Arduino code:&lt;br /&gt;&lt;br /&gt;&lt;/div&gt;&lt;div&gt;&lt;script src=&quot;https://gist.github.com/1575531.js&quot;&gt;  &lt;/script&gt;I&#39;ll be updating this post as I go, with pictures and videos. I&#39;ve currently put a servo in a little mailbox made out of card and when I have an email the flag is raised. I&#39;m working on getting the right sized enclosure and am currently using a Arduino Pro Mini which has no USB interface and I have to work out how to remedy this. Admittedly, this is a total waste of an Arduino as it&#39;s overkill for this project, but at the moment I don&#39;t have enough time to learn how to write C code for AVR micros, but when I do, I&#39;ll make this a little less wasteful and hopefully use a micro with USB support built in. But for the time being -- Arduino and USB to UART Adapter.&lt;/div&gt;&lt;/div&gt;
&lt;h2&gt;Comments&lt;/h2&gt;
&lt;div class=&#39;comments&#39;&gt;
&lt;div class=&#39;comment&#39;&gt;
&lt;div class=&#39;author&#39;&gt;Will Price&lt;/div&gt;
&lt;div class=&#39;content&#39;&gt;
Hi fatmi,&lt;br /&gt;thanks for the comments. The python code is a bit shoddy, if you unplug the Arduino it crashes so I need to fiddle around and start adding error exceptions to handle these events.&lt;br /&gt;At the moment I&amp;#39;m busy with exams hence I have very little time to work on my hobbies!&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#39;comment&#39;&gt;
&lt;div class=&#39;author&#39;&gt;fatmi&lt;/div&gt;
&lt;div class=&#39;content&#39;&gt;
Nice work.&lt;br /&gt;&lt;br /&gt;&lt;a href=&quot;http://www.jayconsystems.com&quot; rel=&quot;nofollow&quot;&gt; Arduino &lt;/a&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
</content>
 </entry>
 
 <entry>
   <title>TP-Link WR703N, OpenWRT and MPD</title>
   <link href="http://willprice.org//2011/12/27/tp-link-wr703n-openwrt-mpd.html"/>
   <updated>2011-12-27T00:00:00+00:00</updated>
   <id>http://willprice.org/2011/12/27/tp-link-wr703n-openwrt-mpd</id>
   <content type="html">
</content>
 </entry>
 
 <entry>
   <title>A little bit about Arch Linux</title>
   <link href="http://willprice.org//linux/arch/2011/08/17/little-bit-about-arch-linux.html"/>
   <updated>2011-08-17T00:00:00+01:00</updated>
   <id>http://willprice.org/linux/arch/2011/08/17/little-bit-about-arch-linux</id>
   <content type="html">&lt;div class=&#39;post&#39;&gt;
&lt;div&gt;&lt;span class=&quot;Apple-style-span&quot;&gt;I&#39;ve recently switched from Ubuntu to Arch, which I have always wanted to do but time restrictions have been in the &lt;/span&gt;way, since it&#39;s summer I&#39;ve been able to dedicate a good chunk of time to do this. I have a few things I&#39;d like to note about it for myself as a historical record.&lt;/div&gt;&lt;div&gt;
&lt;br /&gt;&lt;/div&gt;&lt;div&gt;&lt;span class=&quot;Apple-style-span&quot;&gt;The installer did not work for me on the &lt;a href=&quot;http://www.archlinux.org/download/&quot;&gt;official download page&lt;/a&gt;. I downloaded multiple isos from the &lt;a href=&quot;http://releng.archlinux.org/&quot;&gt;releng arch site&lt;/a&gt; which proved futile, again with installer problems, I finally downloaded 08.15 which worked flawlessly from a local-core install (I didn&#39;t want to download the packages from the internet - netinstall as I have a rubbish connection). After this install I had my arch installation up and running, command line only using the nouveau kernel module I do believe (The terminal was full screen, which isn&#39;t the case without nouveau, nvidia doesn&#39;t run it fullscreen either)&lt;/span&gt;&lt;/div&gt;&lt;div&gt;&lt;span class=&quot;Apple-style-span&quot;&gt;
&lt;br /&gt;&lt;/span&gt;&lt;/div&gt;&lt;div&gt;&lt;span class=&quot;Apple-style-span&quot;&gt;A few bits and pieces on config files:&lt;/span&gt;&lt;/div&gt;&lt;div&gt;&lt;span class=&quot;Apple-style-span&quot;&gt;Added net-profiles and net-cfg to start my wireless connection at boot up (init level 3) that way I wouldn&#39;t have to touch it when I launch X. I had to add a config file in /etc/network.d/ for netcfg to work, which was based on wireless-wpa in the examples folder, this was easy, added pricelan, the name of my netcfg profile to rc.conf in the NETWORKS=() section. Installed dbus and ntfs-3g, the latter I edited my fstab to automatically mount on startup. I had to add avahi-daemon to daemons in rc.conf for rhythmbox to start properly otherwise it would take ages to start up.&lt;/span&gt;&lt;/div&gt;&lt;div&gt;&lt;span class=&quot;Apple-style-span&quot;&gt;
&lt;br /&gt;&lt;/span&gt;&lt;/div&gt;&lt;div&gt;&lt;span class=&quot;Apple-style-span&quot;&gt;So now I wanted to setup my system, for the basics I Installed:&lt;/span&gt;&lt;/div&gt;&lt;div&gt;&lt;span class=&quot;Apple-style-span&quot;&gt;- Xorg &amp;amp; nvidia for a graphical interface&lt;/span&gt;&lt;/div&gt;&lt;div&gt;&lt;span class=&quot;Apple-style-span&quot;&gt;- Xmonad for window managing (wonderful!)&lt;/span&gt;&lt;/div&gt;&lt;div&gt;&lt;span class=&quot;Apple-style-span&quot;&gt;- Links to browse the internet from the command line so I could read the wiki as I installed xorg etc, highly recommended.&lt;/span&gt;&lt;/div&gt;&lt;div&gt;&lt;span class=&quot;Apple-style-span&quot;&gt;- Dmenu to launch programs in xmonad&lt;/span&gt;&lt;/div&gt;&lt;div&gt;&lt;span class=&quot;Apple-style-span&quot;&gt;
&lt;br /&gt;&lt;/span&gt;&lt;/div&gt;&lt;div&gt;&lt;span class=&quot;Apple-style-span&quot;&gt;Once I could launch X using the basic twm wm, I changed to xmonad, I did this by changing my ~/.xinitrc to launch xmonad, just placing &#39;xmonad&#39; at the bottom of the file, nice and easy. When you launch X this time, you&#39;ll notice you just have a cross, press &#39;Alt-P&#39; to launch d-menu and then some applications, &#39;man xmonad&#39; has a good summary of the window tiling algorithm commands.&lt;/span&gt;&lt;/div&gt;&lt;div&gt;&lt;span class=&quot;Apple-style-span&quot;&gt;
&lt;br /&gt;&lt;/span&gt;&lt;/div&gt;&lt;div&gt;&lt;span class=&quot;Apple-style-span&quot;&gt;Now to install my essential applications:&lt;/span&gt;&lt;/div&gt;&lt;div&gt;&lt;span class=&quot;Apple-style-span&quot;&gt;- Chromium for web browsing&lt;/span&gt;&lt;/div&gt;&lt;div&gt;&lt;span class=&quot;Apple-style-span&quot;&gt;- Rhythmbox for music&lt;/span&gt;&lt;/div&gt;&lt;div&gt;&lt;span class=&quot;Apple-style-span&quot;&gt;- gnome-terminal&lt;/span&gt;&lt;/div&gt;&lt;div&gt;&lt;span class=&quot;Apple-style-span&quot;&gt;- Nautilus for file browsing&lt;/span&gt;&lt;/div&gt;&lt;div&gt;&lt;span class=&quot;Apple-style-span&quot;&gt;
&lt;br /&gt;&lt;/span&gt;&lt;/div&gt;&lt;div&gt;&lt;span class=&quot;Apple-style-span&quot;&gt;After installing these I couldn&#39;t get chromium to launch nautilus from the &quot;Show in folder&quot; dialog in downloads, I ammended this by installing &#39;perl-file-mimeinfo&#39; which has the command &#39;mimeopen&#39;, it handles all the mimetypes so when you open files, it opens the proper program. After installing this chromium launched fine, however I had added the following lines to &lt;/span&gt;&lt;/div&gt;&lt;div&gt;&lt;span class=&quot;Apple-style-span&quot;&gt;~/.local/share/applications/defaults.list    and    ~/.local/share/applications/mimeapps.list
&lt;br /&gt;&quot;inode/directory=nautilus-folder-handler.desktop&quot;&lt;/span&gt;&lt;/div&gt;&lt;div&gt;&lt;span class=&quot;Apple-style-span&quot;&gt;which may be needed, I don&#39;t know, I didn&#39;t try it without adding these lines.&lt;/span&gt;&lt;/div&gt;&lt;div&gt;&lt;span class=&quot;Apple-style-span&quot;&gt;
&lt;br /&gt;&lt;/span&gt;&lt;/div&gt;&lt;div&gt;&lt;span class=&quot;Apple-style-span&quot;&gt;Rhythmbox won&#39;t open .pls files in the radio section as some gnome services aren&#39;t running, I know it isn&#39;t gnome-settings-daemon, or obviously the keyring daemon. I&#39;ll have to look further into this to try and remedy the issue, I hope to find the right service to run rather than running xmonad ontop of gnome, I prefer xmonad neat, gnome3 is horrid. Anyway, I don&#39;t need a DE, WM will do me fine.&lt;/span&gt;&lt;/div&gt;&lt;div&gt;&lt;span class=&quot;Apple-style-span&quot;&gt;
&lt;br /&gt;&lt;/span&gt;&lt;/div&gt;&lt;div&gt;&lt;span class=&quot;Apple-style-span&quot;&gt;I&#39;m still fiddling about with setting the wallpaper in xmonad, I&#39;m using &quot;xloadimage -onroot -fullscreen $path to image&quot; at the moment which isn&#39;t stretching my 1980x1200 wallpapers to 1980x1080, A bit more exploration is required on my part to sort this out, once I have I&#39;ll be adding it to my ~/.xinitrc so when X starts my wallpaper will be set.&lt;/span&gt;&lt;/div&gt;&lt;div&gt;&lt;span class=&quot;Apple-style-span&quot;&gt;
&lt;br /&gt;I have dipped my toes into xmonad configuration but the haskell syntax is a bit off-putting and I&#39;m struggling with it at the moment but &lt;a href=&quot;http://haskell.org/haskellwiki/Xmonad/Config_archive/John_Goerzen&#39;s_Configuration&quot;&gt;this&lt;/a&gt; holds your hand quite well and I&#39;m currently going through it. The xmonad wiki is pretty handy as well, I think this will take a while to produce decent results though.&lt;/span&gt;&lt;/div&gt;&lt;div&gt;&lt;span class=&quot;Apple-style-span&quot;&gt;
&lt;br /&gt;&lt;/span&gt;&lt;/div&gt;&lt;div&gt;&lt;span class=&quot;Apple-style-span&quot;&gt;
&lt;br /&gt;I&#39;d finally like to say I only switched to arch based on it&#39;s &lt;a href=&quot;https://wiki.archlinux.org/index.php/The_Arch_Way&quot;&gt;philosophy&lt;/a&gt; and &lt;a href=&quot;https://wiki.archlinux.org/index.php/Main_Page&quot;&gt;beautiful wiki&lt;/a&gt;.&lt;/span&gt;&lt;/div&gt;&lt;div&gt;&lt;span class=&quot;Apple-style-span&quot;&gt;
&lt;br /&gt;&lt;/span&gt;&lt;/div&gt;&lt;div&gt;&lt;span class=&quot;Apple-style-span&quot;&gt;P.s. man does&lt;a href=&quot;https://github.com/mojombo/jekyll&quot;&gt; jekyll &lt;/a&gt;look good...&lt;/span&gt;&lt;/div&gt;&lt;/div&gt;
&lt;h2&gt;Comments&lt;/h2&gt;
&lt;div class=&#39;comments&#39;&gt;
&lt;div class=&#39;comment&#39;&gt;
&lt;div class=&#39;author&#39;&gt;Will Price&lt;/div&gt;
&lt;div class=&#39;content&#39;&gt;
I am indeed, it&amp;#39;s very good, I would never learn so much if I were still using Ubuntu. I can see why both exist, I love Ubuntu for it&amp;#39;s simplicity in terms of setup, but then I love Arch for it&amp;#39;s simplicity in terms of configuration and ease to delve into your system, none of the details are abstracted away from you, they&amp;#39;re all there for you to have a look at and play with, on the whole, I prefer the latter, I find my computer knowledge has vastly increased since using Arch and I&amp;#39;m much less timid trying out things that I would have otherwise found daunting!&lt;br /&gt;&lt;br /&gt;Have you any experiences with Arch yourself?&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#39;comment&#39;&gt;
&lt;div class=&#39;author&#39;&gt;Jake&lt;/div&gt;
&lt;div class=&#39;content&#39;&gt;
Are you still using Arch, how are you finding it?&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
</content>
 </entry>
 
 <entry>
   <title>Boolean Logic in electronics</title>
   <link href="http://willprice.org//2011/05/14/boolean-logic-in-electronics.html"/>
   <updated>2011-05-14T00:00:00+01:00</updated>
   <id>http://willprice.org/2011/05/14/boolean-logic-in-electronics</id>
   <content type="html">&lt;div class=&#39;post&#39;&gt;
I stumbled across this &lt;a href=&quot;http://www.antonine-education.co.uk/&quot;&gt;great website&lt;/a&gt; in regards to basic electronics (for the AS Electronics course in the UK). Alas at the moment I don&#39;t have time to do much electronics or programming as I&#39;m just about to start a month of exams, come the 20th June, I shall be back with hopefully some interesting posts!&lt;br /&gt;See you then..&lt;/div&gt;
</content>
 </entry>
 
 <entry>
   <title>PCB etch tank</title>
   <link href="http://willprice.org//pcb/2011/05/06/pcb-etch-tank-update.html"/>
   <updated>2011-05-06T00:00:00+01:00</updated>
   <id>http://willprice.org/pcb/2011/05/06/pcb-etch-tank-update</id>
   <content type="html">&lt;div class=&#39;post&#39;&gt;
&lt;div style=&quot;text-align: left;&quot;&gt;So I&#39;ve got hold of some of the things I need, aquarium heater, bubbler and check valves, the chemicals are on there way and should be here soon, I&#39;m looking forward to testing some things out. The immediate problem, being a student, I am somewhat poor and I have slightly broken my aquarium heater (more on that later in this post) so things progress slowly (I also have exams and &lt;i&gt;should be &lt;/i&gt;focussing on them, but I&#39;m not, because I like electronics more and I&#39;m dedicated to my hobby...)&lt;/div&gt;&lt;div style=&quot;text-align: left;&quot;&gt;&lt;br /&gt;&lt;/div&gt;&lt;div style=&quot;text-align: left;&quot;&gt;Here are a few pictures of the the parts:&lt;/div&gt;&lt;table style=&quot;width: auto;&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td&gt;&lt;a href=&quot;https://picasaweb.google.com/lh/photo/MaH3V8uwfP1VCvv3BAN9l0gjfRgjgzLDNPYATrcVkss?feat=embedwebsite&quot;&gt;&lt;img height=&quot;400&quot; src=&quot;https://lh4.googleusercontent.com/-VikNZxXst0M/TcSBy9oIeXI/AAAAAAAAA1Q/shSowZCoyYQ/s400/DSCF3929.JPG&quot; width=&quot;300&quot; /&gt;&lt;/a&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td style=&quot;font-family: arial,sans-serif; font-size: 11px; text-align: right;&quot;&gt;From &lt;a href=&quot;https://picasaweb.google.com/105545134685620195788/PCBEtchTank?authuser=0&amp;amp;feat=embedwebsite&quot;&gt;PCB etch tank&lt;/a&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;table style=&quot;width: auto;&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td&gt;&lt;a href=&quot;https://picasaweb.google.com/lh/photo/REQMWX-Vla-ev3WxnLdc6kgjfRgjgzLDNPYATrcVkss?feat=embedwebsite&quot;&gt;&lt;img height=&quot;400&quot; src=&quot;https://lh6.googleusercontent.com/-09Ma3i3p9w8/TcSB3z6GDSI/AAAAAAAAA1Q/5LcKdzs__mI/s400/DSCF3926.JPG&quot; width=&quot;300&quot; /&gt;&lt;/a&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td style=&quot;font-family: arial,sans-serif; font-size: 11px; text-align: right;&quot;&gt;From &lt;a href=&quot;https://picasaweb.google.com/105545134685620195788/PCBEtchTank?authuser=0&amp;amp;feat=embedwebsite&quot;&gt;PCB etch tank&lt;/a&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;br /&gt;I got the heater today, I thought &quot;Great, this is exactly what I want&quot; I even managed to slice the limit stopping you from turning the knob too far so I could reach higher temperatures (read: ~40  &lt;span class=&quot;Apple-style-span&quot; style=&quot;line-height: 15px;&quot;&gt;&lt;span class=&quot;Apple-style-span&quot;&gt;°C) &lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;div&gt;&lt;span class=&quot;Apple-style-span&quot; style=&quot;line-height: 15px;&quot;&gt;&lt;span class=&quot;Apple-style-span&quot;&gt;&lt;br /&gt;&lt;/span&gt;&lt;/span&gt;&lt;/div&gt;&lt;div&gt;&lt;span class=&quot;Apple-style-span&quot; style=&quot;line-height: 15px;&quot;&gt;N.B. *Sigh* just looked at the cupric chloride guide:&lt;/span&gt;&lt;/div&gt;&lt;div&gt;&lt;span class=&quot;Apple-style-span&quot; style=&quot;line-height: 15px;&quot;&gt;&lt;br /&gt;&lt;/span&gt;&lt;/div&gt;&lt;div&gt;&lt;span class=&quot;Apple-style-span&quot; style=&quot;line-height: 15px;&quot;&gt;&lt;span class=&quot;Apple-style-span&quot;&gt;&lt;table border=&quot;1&quot; cellpadding=&quot;2&quot; cellspacing=&quot;2&quot; style=&quot;font-family: Ubuntu, UbuntuBeta !important; height: 50px; line-height: normal; text-align: left; width: 700px;&quot;&gt;&lt;tbody style=&quot;font-family: Ubuntu, UbuntuBeta !important;&quot;&gt;&lt;tr style=&quot;font-family: Ubuntu, UbuntuBeta !important;&quot;&gt;&lt;td style=&quot;font-family: Ubuntu, UbuntuBeta !important; text-align: left; vertical-align: top;&quot;&gt;Temperature (°C)&lt;/td&gt;&lt;td style=&quot;font-family: Ubuntu, UbuntuBeta !important; font-weight: bold; text-align: center; vertical-align: top;&quot;&gt;0&lt;/td&gt;&lt;td style=&quot;font-family: Ubuntu, UbuntuBeta !important; font-weight: bold; text-align: center; vertical-align: top;&quot;&gt;40&lt;/td&gt;&lt;td style=&quot;font-family: Ubuntu, UbuntuBeta !important; text-align: left; vertical-align: top;&quot;&gt;HCl fuming increases.&lt;br /&gt;Etch speed increases. (see note 1)&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/span&gt;&lt;/span&gt;&lt;/div&gt;&lt;br /&gt;&lt;div&gt;&lt;/div&gt;&lt;div&gt;Looks like I might not even need that heater... I think for the sake of simplicity and cost I shall eliminate it. Good, I feel like I have less things to limit my design now.&lt;/div&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;div&gt;Coming back from my tangent, I had modded it and let it sit at ~45°C for a bit and went out for a run leaving it on, I came back to find it no longer working. I took it apart and found that the framework it was all attached to had melted and had pushed the magnet out stopping the lever from making contact with the contact. (best described with a picture)&lt;/div&gt;&lt;table style=&quot;width: auto;&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td&gt;&lt;a href=&quot;https://picasaweb.google.com/lh/photo/oJuPogM5kc_qZfUNua7VlkgjfRgjgzLDNPYATrcVkss?feat=embedwebsite&quot;&gt;&lt;img height=&quot;300&quot; src=&quot;https://lh6.googleusercontent.com/-5cpEy1ELxQU/TcSCFJJ9VqI/AAAAAAAAA1Q/TaGDof4k-7s/s400/DSCF3921.JPG&quot; width=&quot;400&quot; /&gt;&lt;/a&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td style=&quot;font-family: arial,sans-serif; font-size: 11px; text-align: right;&quot;&gt;From &lt;a href=&quot;https://picasaweb.google.com/105545134685620195788/PCBEtchTank?authuser=0&amp;amp;feat=embedwebsite&quot;&gt;PCB etch tank&lt;/a&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;The lever on the bottom touches a contact when the blue knob is turned (this is how you set the temperature). When the temperature has reached a certain point, the lever expands and the magnet can no longer hold it touching the contact so it returns to the position in the picture breaking the circuit, I tried to remold the magnet hold and to some extent I had some sucess, I put it back in it&#39;s glass tube and turn it back on. *BANG* I have a nice set of sun spots and the breakers go; the heating element had shorted. &lt;br /&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;div&gt;&lt;u&gt;&lt;b&gt;Before:&lt;/b&gt;&lt;/u&gt;&lt;/div&gt;&lt;table style=&quot;width: auto;&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td&gt;&lt;a href=&quot;https://picasaweb.google.com/lh/photo/iu4Q3jh_sEtbIwwYEDHlX0gjfRgjgzLDNPYATrcVkss?feat=embedwebsite&quot;&gt;&lt;img height=&quot;400&quot; src=&quot;https://lh4.googleusercontent.com/-vgJQYdxlNH0/TcSCDC4faZI/AAAAAAAAA1Q/jTojFX6nF3k/s400/DSCF3922.JPG&quot; width=&quot;300&quot; /&gt;&lt;/a&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td style=&quot;font-family: arial,sans-serif; font-size: 11px; text-align: right;&quot;&gt;From &lt;a href=&quot;https://picasaweb.google.com/105545134685620195788/PCBEtchTank?authuser=0&amp;amp;feat=embedwebsite&quot;&gt;PCB etch tank&lt;/a&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;div&gt;&lt;b&gt;&lt;u&gt;After:&lt;/u&gt;&lt;/b&gt;&lt;/div&gt;&lt;table style=&quot;width: auto;&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td&gt;&lt;a href=&quot;https://picasaweb.google.com/lh/photo/WsLoAPQldbg32BnZPU-7SEgjfRgjgzLDNPYATrcVkss?feat=embedwebsite&quot;&gt;&lt;img height=&quot;400&quot; src=&quot;https://lh6.googleusercontent.com/-TQ9T5MNTs1M/TcSB9TFwL_I/AAAAAAAAA1Q/blxH88Y50BA/s400/DSCF3924.JPG&quot; width=&quot;300&quot; /&gt;&lt;/a&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td style=&quot;font-family: arial,sans-serif; font-size: 11px; text-align: right;&quot;&gt;From &lt;a href=&quot;https://picasaweb.google.com/105545134685620195788/PCBEtchTank?authuser=0&amp;amp;feat=embedwebsite&quot;&gt;PCB etch tank&lt;/a&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;br /&gt;I took it all apart and tested all the components then fixed the heating element (shortening it due to a part blowing off it. I assumed the bulb had gone so took it out and replaced it with a jumper, it didn&#39;t work. After 30 minutes of troubleshooting I thought to check the fuse (I should have done this first) and low behold it had blown. After reassembling it this time I got a lovely red glow from the element so I&#39;m assuming this is due to the loss of part of the element and the element&#39;s resistance has gone down. &lt;br /&gt;&lt;table style=&quot;width: auto;&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td&gt;&lt;a href=&quot;https://picasaweb.google.com/lh/photo/U7aZzRHElE35n8-h_mMFukgjfRgjgzLDNPYATrcVkss?feat=embedwebsite&quot;&gt;&lt;img height=&quot;400&quot; src=&quot;https://lh4.googleusercontent.com/-NnyZk-8Xooc/TcSB65sQCZI/AAAAAAAAA1Q/cmHDENPKjo4/s400/DSCF3925.JPG&quot; width=&quot;300&quot; /&gt;&lt;/a&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td style=&quot;font-family: arial,sans-serif; font-size: 11px; text-align: right;&quot;&gt;From &lt;a href=&quot;https://picasaweb.google.com/105545134685620195788/PCBEtchTank?authuser=0&amp;amp;feat=embedwebsite&quot;&gt;PCB etch tank&lt;/a&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;div&gt;Because the circuit is setup as a &lt;a href=&quot;http://en.wikipedia.org/wiki/Voltage_divider&quot;&gt;potential divider&lt;/a&gt; the bulb was dimmer due to the lower resistance of the element &amp;amp; thus lower current through the bulb. The bulb is attached to a ~120k resistor which I think I&#39;ll replace with a lower value one to divert more current to the bulb and hopefully remedy the over powered element issue.&lt;br /&gt;&lt;table style=&quot;width: auto;&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td&gt;&lt;a href=&quot;https://picasaweb.google.com/lh/photo/AOu-whSlAio4aSnEOxENbEgjfRgjgzLDNPYATrcVkss?feat=embedwebsite&quot;&gt;&lt;img height=&quot;400&quot; src=&quot;https://lh3.googleusercontent.com/-W9jKL1a_rIM/TcSCHHA2cLI/AAAAAAAAA1Q/Khojoi5L9Yo/s400/DSCF3920.JPG&quot; width=&quot;300&quot; /&gt;&lt;/a&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td style=&quot;font-family: arial,sans-serif; font-size: 11px; text-align: right;&quot;&gt;From &lt;a href=&quot;https://picasaweb.google.com/105545134685620195788/PCBEtchTank?authuser=0&amp;amp;feat=embedwebsite&quot;&gt;PCB etch tank&lt;/a&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;My apologies if this is a little incoherent, It&#39;s getting a bit late here. Time for experiment 18 I think, I fancy some electronics to calm me down after such an eventful evening!&lt;/div&gt;&lt;/div&gt;
</content>
 </entry>
 
 <entry>
   <title>MAKE Electronics: Experiment 17: Emitting a tone (555)</title>
   <link href="http://willprice.org//make%20electronics/2011/05/06/make-electronics-experiment-17-emitting.html"/>
   <updated>2011-05-06T00:00:00+01:00</updated>
   <id>http://willprice.org/make%20electronics/2011/05/06/make-electronics-experiment-17-emitting</id>
   <content type="html">&lt;div class=&#39;post&#39;&gt;
&lt;div&gt;&lt;u&gt;PART 1:&lt;/u&gt;&lt;/div&gt;&lt;div&gt;This experiment sets the 555 up in &lt;i&gt;astable mode&lt;/i&gt; (check out the previous post for an explanation). The 555 will emit pulses at a certain frequency which will drive the speaker. Changing the frequency of the pulses will then in turn change the frequency of the speaker&#39;s tone. To change the pulse frequency or rate, we adjust the external capacitor connected to pin 6, the threshold pin. (or the resistor between 6 &amp;amp; 7)&lt;/div&gt;&lt;table style=&quot;width: auto;&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td&gt;&lt;a href=&quot;https://picasaweb.google.com/lh/photo/5aDcrpN8_uHNqZwPdGYIKKu880KGXKM6JH070mDi2bE?feat=embedwebsite&quot;&gt;&lt;img height=&quot;300&quot; src=&quot;https://lh4.googleusercontent.com/-9KUjQn41tso/TbXJU2xfptI/AAAAAAAAA1s/tMBsDxSgsMs/s400/DSCF3879.JPG&quot; width=&quot;400&quot; /&gt;&lt;/a&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td style=&quot;font-family: arial,sans-serif; font-size: 11px; text-align: right;&quot;&gt;From &lt;a href=&quot;https://picasaweb.google.com/105545134685620195788/MAKEElectronicsExperiment17555InAstableMode?authuser=0&amp;amp;feat=embedwebsite&quot;&gt;MAKE: Electronics: Experiment 17 (555 in astable mode)&lt;/a&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;table style=&quot;width: auto;&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td&gt;&lt;a href=&quot;https://picasaweb.google.com/lh/photo/i5qQgGkzBqycccJt89Xu16u880KGXKM6JH070mDi2bE?feat=embedwebsite&quot;&gt;&lt;img height=&quot;300&quot; src=&quot;https://lh5.googleusercontent.com/-2FLZ_Puwf6c/Tb8yv6veNpI/AAAAAAAAA1s/ErMl0WQrKPk/s400/DSCF3917.JPG&quot; width=&quot;400&quot; /&gt;&lt;/a&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td style=&quot;font-family: arial,sans-serif; font-size: 11px; text-align: right;&quot;&gt;From &lt;a href=&quot;https://picasaweb.google.com/105545134685620195788/MAKEElectronicsExperiment17555InAstableMode?authuser=0&amp;amp;feat=embedwebsite&quot;&gt;MAKE: Electronics: Experiment 17 (555 in astable mode)&lt;/a&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;br /&gt;&lt;div&gt;Here&#39;s the circuit, lets have a look at the schematic of the 555 in astable mode again:&lt;/div&gt;&lt;div&gt;&lt;br /&gt;&lt;img alt=&quot;&quot; border=&quot;0&quot; src=&quot;https://lh5.googleusercontent.com/_tW3WwfDXALM/TbV_J1qkKkI/AAAAAAAAAkg/PyiJbfbd4XY/220px-555_Astable_Diagram.svg.png&quot; style=&quot;cursor: hand; cursor: pointer; float: left; height: 200px; margin: 0 10px 10px 0; width: 220px;&quot; /&gt;&lt;/div&gt;&lt;div&gt;So the THRESHOLD is connected to the TRIGGER, when the cap, C, is charged past 2/3 of the Vsupply the threshold is passed and the capacitor discharges through R2 into pin 7 (DISCHARGE) and a pulse is emitted from OUT. Once the cap has discharged and the IC is no longer triggered, the cap starts charging again, when it reaches 2/3 Vsupply it repeats the process, this results in a series of pulses, this is called a &lt;b&gt;square wave&lt;/b&gt; &lt;b&gt;oscillator&lt;/b&gt;, because it&#39;s producing a a series of square wave pulses. This is great for generating tones on speakers, flashing LEDs (albeit highly overkill!) etc.&lt;/div&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;div&gt;&lt;u&gt;PART 2:&lt;/u&gt;&lt;/div&gt;&lt;div&gt;Now we chain 2 chips together, both in astable mode, this produces a warbling tone.&lt;/div&gt;&lt;div&gt;The 555 on the left (IC2) is working in the same way as in part 1, however this time, a second 555 (IC1) is chained to the chip with it&#39;s output attached to pin 5 of the tone generator 555 (IC2). When IC1 produces a pulse it increases the voltage at pin 5 (2/3 Vsupply results in the chip emitting a pulse) so when IC1 emits a pulse and triggers the second chip to generate a pulse the capacitor attached to pin 5 of IC2 is less charged than it would have been if IC1 wasn&#39;t chained to IC2, this results in a higher pitch, because IC1 is oscillating far slower than IC2, IC2 isn&#39;t always triggered by a pulse from IC1 meaning it operates in its normal mode and produces a lower frequency tone.&lt;/div&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;div&gt;This results in a warbling sound to be produced as some of the time IC2 is producing high frequency square waves (when IC1 is emitting a pulse) and some of the time IC2 is producing lower frequency square waves (when IC1 is not emitting a pulse)&lt;/div&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;div&gt;&lt;br /&gt;&lt;iframe allowfullscreen=&quot;&quot; frameborder=&quot;0&quot; height=&quot;349&quot; src=&quot;http://www.youtube.com/embed/bzwGqTeHEYI?rel=0&quot; width=&quot;425&quot;&gt;&lt;/iframe&gt;&lt;/div&gt;&lt;div&gt;(the video shows the circuit the other way round, sorry about that!)&lt;/div&gt;&lt;br /&gt;There is a hell of a lot of info in this experiment so I think I&#39;ll spend some time playing around with the 555 trying to figure out how to get it to emit different pulses, an oscilloscope would be great to have around for this experiment! &lt;br /&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;/div&gt;
</content>
 </entry>
 
 <entry>
   <title>Custom etch tank: The start.</title>
   <link href="http://willprice.org//pcb/2011/05/05/custom-etch-tank-start.html"/>
   <updated>2011-05-05T00:00:00+01:00</updated>
   <id>http://willprice.org/pcb/2011/05/05/custom-etch-tank-start</id>
   <content type="html">&lt;div class=&#39;post&#39;&gt;
&lt;span class=&quot;Apple-style-span&quot; &gt;I&#39;ve decided to have a bash at making an etch tank as I like making PCBs, however at the moment I&#39;ve got no way to heat my etchant up and the whole affair is looking like a rather sorry state. After reading &lt;a href=&quot;http://www.instructables.com/id/Circuit-Board-Lab-POV-Business-Card/#step1&quot;&gt;this instructable&lt;/a&gt;, I decided to build my own, I really like the etch tank design but would like to redesign it myself, purely for the practice in CAD and in-depth knowledge it will provide. I&#39;ve bought an aquarium pump and heater to use in it and I will be using &lt;a href=&quot;http://members.optusnet.com.au/eseychell/PCB/etching_CuCl/index.html&quot;&gt;cupric chloride&lt;/a&gt; to etch.&lt;/span&gt;&lt;div&gt;&lt;span class=&quot;Apple-style-span&quot; &gt;I&#39;ve found a wonderful &lt;a href=&quot;http://www.vp-scientific.com/Chemical_Resistance_Chart.htm&quot;&gt;website&lt;/a&gt; with a list of several materials and their resistances to specified chemicals, it&#39;s really invaluable to picking materials to use.&lt;/span&gt;&lt;/div&gt;&lt;div&gt;&lt;span class=&quot;Apple-style-span&quot; &gt;So far I have chosen a few materials:&lt;/span&gt;&lt;/div&gt;&lt;div&gt;&lt;span class=&quot;Apple-style-span&quot; &gt;&lt;br /&gt;&lt;/span&gt;&lt;/div&gt;&lt;div&gt;&lt;span class=&quot;Apple-style-span&quot; &gt;Etch tank - &lt;i&gt;Acrylic&lt;/i&gt;&lt;/span&gt;&lt;/div&gt;&lt;div&gt;&lt;span class=&quot;Apple-style-span&quot; &gt;Tubing - &lt;i&gt;Ideally polypropylene (but I will settle for PVC) 1/4&quot; ID (same as aquarium pump)&lt;/i&gt;&lt;/span&gt;&lt;/div&gt;&lt;div&gt;&lt;span class=&quot;Apple-style-span&quot; &gt;Fittings - &lt;i&gt;Ideally polypropylene, but if PVC one are available I&#39;d settle for them, they&#39;re expensive and hard to find.&lt;/i&gt;&lt;/span&gt;&lt;/div&gt;&lt;div&gt;&lt;i&gt;&lt;span class=&quot;Apple-style-span&quot; &gt;&lt;br /&gt;&lt;/span&gt;&lt;/i&gt;&lt;/div&gt;&lt;div&gt;&lt;span class=&quot;Apple-style-span&quot; &gt;It&#39;s a rather pitiful list but it&#39;s all I&#39;ve decided on for the moment. I&#39;m looking at buying chemicals, shipping is painfully expensive and I haven&#39;t really calculated how much I need to get, so that&#39;s on my to do list. It looks like higher concentration solutions of hydrogen peroxide cost the same as the lower concentration ones, obviously I&#39;ll go for the higher concentration as It&#39;s less to store, shipping will be cheaper and It&#39;s easy to dilute it.&lt;/span&gt;&lt;/div&gt;&lt;div&gt;&lt;span class=&quot;Apple-style-span&quot; &gt;&lt;br /&gt;&lt;/span&gt;&lt;/div&gt;&lt;div&gt;&lt;span class=&quot;Apple-style-span&quot; &gt;I also need to get some methylene chloride for solvent welding acrylic, it&#39;s pretty cheap &lt;a href=&quot;http://www.bonnymans.co.uk/products/product.php?categoryID=1415&amp;amp;productID=6284&quot;&gt;here&lt;/a&gt;, but I might buy it from ebay depending on delivery prices, this &lt;a href=&quot;http://stores.ebay.co.uk/BIOSTAIN-ON-E-BAY?_trksid=p4340.l2563&quot;&gt;seller&lt;/a&gt; has most/all of the chemicals I need. Scratch that, the first seller mostly what I want at lower prices, excellent!&lt;/span&gt;&lt;/div&gt;&lt;div&gt;&lt;span class=&quot;Apple-style-span&quot; &gt;Hydrogen peroxide is the only thing that isn&#39;t stocked there, I thought I&#39;d figure out how much I need, at 35% it&#39;s pretty concentrated, I used this handy &lt;a href=&quot;http://www.trimen.pl/witek/calculators/stezenia.html&quot;&gt;calculator&lt;/a&gt; to find the concentration in mol/dm^3, so 500ml at 35% can be diluted to give 5 litres of 1.16mol/dm^3 looking at the equation on the cupric chloride link:&lt;/span&gt;&lt;/div&gt;&lt;div&gt;&lt;span class=&quot;Apple-style-span&quot; &gt;2H&lt;sup&gt;+&lt;/sup&gt; + Cu&lt;sup&gt;1+&lt;/sup&gt; + O&lt;sub&gt;{aq}&lt;/sub&gt; →  Cu&lt;sup&gt;2+&lt;/sup&gt;  + H&lt;sub&gt;2&lt;/sub&gt;O&lt;/span&gt;&lt;/div&gt;&lt;div&gt;&lt;span class=&quot;Apple-style-span&quot; &gt;This looks like it&#39;s probably going to be more than sufficient. Actually looking at the page again, it just occurred to me, I don&#39;t even need hydrogen peroxide after producing the etchant as I can regenerate the solution using air, I&#39;m going to just get 250ml... &lt;/span&gt;&lt;/div&gt;&lt;div&gt;&lt;span class=&quot;Apple-style-span&quot; &gt;The acid gets used up so I&#39;m buying a litre of that, the common mix to produce the starter etchant seems to be:&lt;/span&gt;&lt;/div&gt;&lt;div&gt;&lt;span class=&quot;Apple-style-span&quot; &gt;1 part HCl (35%)&lt;/span&gt;&lt;/div&gt;&lt;div&gt;&lt;span class=&quot;Apple-style-span&quot; &gt;2 parts H2O2 (3%)&lt;/span&gt;&lt;/div&gt;&lt;div&gt;&lt;span class=&quot;Apple-style-span&quot; &gt;&lt;br /&gt;&lt;/span&gt;&lt;/div&gt;&lt;div&gt;&lt;span class=&quot;Apple-style-span&quot; &gt;UPDATE:&lt;br /&gt;Just bought:&lt;/span&gt;&lt;/div&gt;&lt;div&gt;&lt;span class=&quot;Apple-style-span&quot; &gt;1 Litre HCl&lt;/span&gt;&lt;/div&gt;&lt;div&gt;&lt;span class=&quot;Apple-style-span&quot; &gt;1 Litre Acetone&lt;/span&gt;&lt;/div&gt;&lt;div&gt;&lt;span class=&quot;Apple-style-span&quot; &gt;1 Litre methylene chloride&lt;/span&gt;&lt;/div&gt;&lt;div&gt;&lt;span class=&quot;Apple-style-span&quot; &gt;1 kg NaOH (just in case I want to do titration and analyze my etchant)&lt;/span&gt;&lt;/div&gt;&lt;div&gt;&lt;span class=&quot;Apple-style-span&quot; &gt;£9.50 for delivery&lt;/span&gt;&lt;/div&gt;&lt;div&gt;&lt;span class=&quot;Apple-style-span&quot; &gt;£11.50 for the chemicals&lt;/span&gt;&lt;/div&gt;&lt;div&gt;&lt;i&gt;&lt;span class=&quot;Apple-style-span&quot; &gt;&lt;br /&gt;&lt;/span&gt;&lt;/i&gt;&lt;/div&gt;&lt;div&gt;&lt;span class=&quot;Apple-style-span&quot; &gt;Now I can whip up some etchant, have a play around with it and see whether the check valves I&#39;ve bought are or are not made from polycarbonate... hopefully they&#39;ll be OK.&lt;/span&gt;&lt;/div&gt;&lt;div&gt;&lt;span class=&quot;Apple-style-span&quot; &gt;&lt;br /&gt;&lt;/span&gt;&lt;/div&gt;&lt;div&gt;&lt;span class=&quot;Apple-style-span&quot; &gt;On a side note: I&#39;ve picked up a laser printer (from freecycle!) which I may play around &lt;a href=&quot;http://warrantyvoidifremoved.com/posts/2007-03-22/mark-3&quot;&gt;modding to print on circuit boards&lt;/a&gt;. However, it looks like a fairly complicated endeavour which currently I&#39;m not sure I need to embark on, one for the future perhaps.&lt;/span&gt;&lt;/div&gt;&lt;div&gt;&lt;span class=&quot;Apple-style-span&quot; &gt;&lt;br /&gt;&lt;/span&gt;&lt;/div&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;/div&gt;
</content>
 </entry>
 
 <entry>
   <title>Learning Processing Chapter 5.6</title>
   <link href="http://willprice.org//learning%20processing/2011/05/01/learning-processing-chapter-56.html"/>
   <updated>2011-05-01T00:00:00+01:00</updated>
   <id>http://willprice.org/learning%20processing/2011/05/01/learning-processing-chapter-56</id>
   <content type="html">&lt;div class=&#39;post&#39;&gt;
&lt;b&gt;&lt;u&gt;BOOLEAN VARIABLES:&lt;/u&gt;&lt;/b&gt;&lt;div&gt;Just a short post today, lots of work to get on with.&lt;/div&gt;&lt;div&gt;This little segment teaches you how to program a button in processing, a basic of UI design. &lt;/div&gt;&lt;div&gt;Boolean variables are either &lt;i&gt;true &lt;/i&gt; or &lt;i&gt;false&lt;/i&gt;, nothing in between. &lt;/div&gt;&lt;div&gt;&lt;b&gt;&lt;i&gt;&lt;br /&gt;&lt;/i&gt;&lt;/b&gt;&lt;/div&gt;&lt;div&gt;&lt;i style=&quot;font-weight: bold; &quot;&gt;mousePressed &lt;/i&gt;is a boolean variable, it is &lt;i&gt;true&lt;/i&gt; when a mouse button is pressed and &lt;i&gt;false &lt;/i&gt;when they are not. We use this in the button example, this is an emulation of a light switch in a dark room, when you press the switch the light comes on, when you let go, the light goes off and the room goes dark. This is implemented using similar code to the roll-over example:&lt;/div&gt;&lt;div&gt;&lt;a href=&quot;http://www.learningprocessing.com/examples/chapter-5/example-5-4/&quot;&gt;&lt;br /&gt;&lt;/a&gt;&lt;/div&gt;&lt;div&gt;&lt;a href=&quot;http://www.learningprocessing.com/examples/chapter-5/example-5-4/&quot;&gt;Shiffmans code:&lt;/a&gt;&lt;/div&gt;&lt;pre style=&quot;font-family:arial;font-size:12px;border:1px dashed #CCCCCC;width:99%;height:auto;overflow:auto;background:#f0f0f0;padding:0px;color:#000000;text-align:left;line-height:20px;&quot;&gt;&lt;code style=&quot;color:#000000;word-wrap:normal;&quot;&gt; // Learning Processing&lt;br /&gt;// Daniel Shiffman&lt;br /&gt;// http://www.learningprocessing.com&lt;br /&gt;&lt;br /&gt;// Example 5-4: Hold down the button&lt;br /&gt;boolean button = false;&lt;br /&gt;&lt;br /&gt;int x = 50;&lt;br /&gt;int y = 50;&lt;br /&gt;int w = 100;&lt;br /&gt;int h = 75;&lt;br /&gt;&lt;br /&gt;void setup() {&lt;br /&gt;size(200,200);&lt;br /&gt;}&lt;br /&gt;&lt;br /&gt;void draw() {&lt;br /&gt;// The button is pressed if (mouseX,mouseY) is inside the rectangle and mousePressed is true.&lt;br /&gt;if (mouseX &amp;gt; x &amp;amp;&amp;amp; mouseX &amp;lt; x+w &amp;amp;&amp;amp; mouseY &amp;gt; y &amp;amp;&amp;amp; mouseY &amp;lt; y+h &amp;amp;&amp;amp; mousePressed) {&lt;br /&gt;button = true;&lt;br /&gt;} else {&lt;br /&gt;button = false;&lt;br /&gt;}&lt;br /&gt;&lt;br /&gt;if (button) {&lt;br /&gt;background(255);&lt;br /&gt;stroke(0);&lt;br /&gt;} else {&lt;br /&gt;background(0);&lt;br /&gt;stroke(255);&lt;br /&gt;}&lt;br /&gt;&lt;br /&gt;fill(175);&lt;br /&gt;rect(x,y,w,h);&lt;br /&gt;}&lt;br /&gt;&lt;br /&gt;&lt;/code&gt;&lt;/pre&gt;&lt;applet code=&quot;example_5_4&quot; archive=&quot;http://www.learningprocessing.com/example-files/chapter05/jar/example_5_4.jar&quot; width=&quot;200&quot; height=&quot;200&quot;&gt;&lt;br /&gt;     &lt;param name=&quot;progressbar&quot; value=&quot;true&quot;&gt;&lt;br /&gt;     &lt;param name=&quot;progresscolor&quot; value=&quot;#666666&quot;&gt;&lt;br /&gt;     &lt;param name=&quot;background-color&quot; value=&quot;#666666&quot;&gt;&lt;br /&gt;    &lt;/applet&gt;&lt;div&gt;&lt;span class=&quot;Apple-style-span&quot; &gt;(Taken from the &lt;i&gt;learning processing&lt;/i&gt; site, all credit to Daniel Shiffman)&lt;/span&gt;&lt;/div&gt;&lt;div&gt;&lt;span class=&quot;Apple-style-span&quot;&gt;&lt;br /&gt;&lt;/span&gt;&lt;/div&gt;&lt;div&gt;This code is fairly self-explanatory after the rollover exercises, the only thing I am a little unsure about it is this line:&lt;/div&gt;&lt;div&gt;&lt;div&gt;&lt;pre style=&quot;font-family: arial; font-size: 12px; border-top-width: 1px; border-right-width: 1px; border-bottom-width: 1px; border-left-width: 1px; border-top-style: dashed; border-right-style: dashed; border-bottom-style: dashed; border-left-style: dashed; border-top-color: rgb(204, 204, 204); border-right-color: rgb(204, 204, 204); border-bottom-color: rgb(204, 204, 204); border-left-color: rgb(204, 204, 204); width: 675px; height: auto; overflow-x: auto; overflow-y: auto; background-image: initial; background-attachment: initial; background-origin: initial; background-clip: initial; background-color: rgb(240, 240, 240); padding-top: 0px; padding-right: 0px; padding-bottom: 0px; padding-left: 0px; color: rgb(0, 0, 0); text-align: left; line-height: 20px; background-position: initial initial; background-repeat: initial initial; &quot;&gt;&lt;code style=&quot;font-family: Ubuntu, UbuntuBeta !important; color: rgb(0, 0, 0); word-wrap: normal; &quot;&gt;if (button) {&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;div&gt;I assume that &lt;i&gt;(button) &lt;/i&gt;is the same as writing &lt;i&gt;(button == true) &lt;/i&gt;&lt;/div&gt;&lt;div&gt;looking on this &lt;a href=&quot;http://processing.org/learning/basics/truefalse.html&quot;&gt;link&lt;/a&gt; it appears so, and &lt;i&gt;(!button) &lt;/i&gt;would be the same as writing &lt;i&gt;(button == false).&lt;/i&gt;&lt;/div&gt;&lt;div&gt;&lt;i&gt;&lt;br /&gt;&lt;/i&gt;&lt;/div&gt;&lt;div&gt;The next step on is to implement a switch feature so that when the button is pressed, it latches and stays on until you click it again. This makes use of putting code in the &lt;i style=&quot;font-weight: bold; &quot;&gt;mousePressed&lt;/i&gt; function.&lt;/div&gt;&lt;/div&gt;&lt;div&gt;&lt;pre style=&quot;font-family:arial;font-size:12px;border:1px dashed #CCCCCC;width:99%;height:auto;overflow:auto;background:#f0f0f0;padding:0px;color:#000000;text-align:left;line-height:20px;&quot;&gt;&lt;code style=&quot;color:#000000;word-wrap:normal;&quot;&gt; void mousePressed() {&lt;br /&gt;if (mouseX &amp;gt; x &amp;amp;&amp;amp; mouseX &amp;lt; x+w &amp;amp;&amp;amp; mouseY &amp;gt; y &amp;amp;&amp;amp; mouseY &amp;lt; y+h &amp;amp;&amp;amp; mousePressed) {&lt;br /&gt;button = !button;&lt;br /&gt;}&lt;br /&gt;&lt;/code&gt;&lt;/pre&gt;We just add this to the end of the code and get rid of the first conditional in the draw() loop as it is no longer needed.&lt;/div&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;div&gt;Shiffman&#39;s Code:&lt;/div&gt;&lt;div&gt;&lt;pre style=&quot;font-family:arial;font-size:12px;border:1px dashed #CCCCCC;width:99%;height:auto;overflow:auto;background:#f0f0f0;padding:0px;color:#000000;text-align:left;line-height:20px;&quot;&gt;&lt;code style=&quot;color:#000000;word-wrap:normal;&quot;&gt; // Learning Processing&lt;br /&gt;// Daniel Shiffman&lt;br /&gt;// http://www.learningprocessing.com&lt;br /&gt;&lt;br /&gt;// Example 5-5: Button as switch&lt;br /&gt;boolean button = false;&lt;br /&gt;&lt;br /&gt;int x = 50;&lt;br /&gt;int y = 50;&lt;br /&gt;int w = 100;&lt;br /&gt;int h = 75;&lt;br /&gt;&lt;br /&gt;void setup() {&lt;br /&gt;size(200,200); &lt;br /&gt;}&lt;br /&gt;&lt;br /&gt;void draw() {&lt;br /&gt;if (button) {&lt;br /&gt; background(255);&lt;br /&gt; stroke(0);&lt;br /&gt;} else {&lt;br /&gt; background(0);&lt;br /&gt; stroke(255);&lt;br /&gt;}&lt;br /&gt;&lt;br /&gt;fill(175);&lt;br /&gt;rect(x,y,w,h);&lt;br /&gt;}&lt;br /&gt;&lt;br /&gt;// When the mouse is pressed, the state of the button is toggled.  &lt;br /&gt;// Try moving this code to draw() like in the rollover example. What goes wrong?&lt;br /&gt;void mousePressed() {&lt;br /&gt;if (mouseX &amp;gt; x &amp;amp;&amp;amp; mouseX &amp;lt; x+w &amp;amp;&amp;amp; mouseY &amp;gt; y &amp;amp;&amp;amp; mouseY &amp;lt; y+h) {&lt;br /&gt; button = !button;&lt;br /&gt;} &lt;br /&gt;}&lt;br /&gt;&lt;br /&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;div&gt;So this time, when the mouse is pressed inside the rectangle, &lt;i&gt;button &lt;/i&gt; is set to set to the opposite of what it was, if it was &lt;i&gt;true&lt;/i&gt; then it would become &lt;i&gt;false&lt;/i&gt; and vica versa.&lt;/div&gt;&lt;div&gt;I had to think about this for a bit to understand how it works, Draw is continually looping looking at &lt;i&gt;button&lt;/i&gt;&#39;s value (true or false).The &#39;mousePressed&#39; code is only initiated when (as you already knew) the button is pressed, (let&#39;s say the original value was false) clicking inside the rectangle changes the code to the opposite of what it was, so, it becomes true. Draw() loops and reads that button == true from the line &quot;if(button) {&quot; and then changes the background colour and stroke colour accordingly.&lt;/div&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;div&gt;Here&#39;s what it produces:&lt;/div&gt;&lt;div&gt;&lt;applet code=&quot;example_5_5&quot; archive=&quot;http://www.learningprocessing.com/example-files/chapter05/jar/example_5_5.jar&quot; width=&quot;200&quot; height=&quot;200&quot;&gt;&lt;/applet&gt;&lt;/div&gt;&lt;div&gt;&lt;span class=&quot;Apple-style-span&quot; style=&quot;font-size: x-small; &quot;&gt;(Taken from the &lt;i style=&quot;font-family: Ubuntu, UbuntuBeta !important; &quot;&gt;learning processing&lt;/i&gt; site, all credit to Daniel Shiffman)&lt;/span&gt;&lt;/div&gt;&lt;div&gt;&lt;span class=&quot;Apple-style-span&quot; style=&quot;font-size: x-small; &quot;&gt;&lt;br /&gt;&lt;/span&gt;&lt;/div&gt;&lt;/div&gt;
</content>
 </entry>
 
 <entry>
   <title>Learning Processing: Chapter 5.4-5.5</title>
   <link href="http://willprice.org//learning%20processing/2011/04/27/learning-processing-chapter-54-55.html"/>
   <updated>2011-04-27T00:00:00+01:00</updated>
   <id>http://willprice.org/learning%20processing/2011/04/27/learning-processing-chapter-54-55</id>
   <content type="html">&lt;div class=&#39;post&#39;&gt;
&lt;b&gt;&lt;u&gt;CHAPTER 5.4 - LOGICAL OPERATORS:&lt;/u&gt;&lt;/b&gt;&lt;div&gt;So, what on earth are &lt;i&gt;&quot;logical operators&quot;&lt;/i&gt;, &lt;a href=&quot;http://en.wikipedia.org/wiki/Logical_connective&quot;&gt;wikipedia&lt;/a&gt; defines them as &quot;A symbol or word used to connect to or more sentences in a grammatically valid way&quot;. &lt;/div&gt;&lt;div&gt;Not that I really understand that, for things I don&#39;t understand, I find it massively helpful to apply the mathematical paradigm of abstraction, instead of comprehending the (I&#39;m pretty sure it&#39;s used in other fields as well, but this is where I first came upon it, just a warning to the pedants!). &lt;/div&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;div&gt;So what properties do logical operators have, there are 3:&lt;/div&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;div&gt;NOT - &lt;a href=&quot;http://processing.org/reference/logicalNOT.html&quot;&gt;!&lt;/a&gt;&lt;/div&gt;&lt;div&gt;AND - &lt;a href=&quot;http://processing.org/reference/logicalAND.html&quot;&gt;&amp;amp;&amp;amp;&lt;/a&gt;&lt;br /&gt;OR - &lt;a href=&quot;http://processing.org/reference/logicalOR.html&quot;&gt;||&lt;/a&gt; &lt;/div&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;div&gt;&lt;b&gt;&lt;/b&gt;&lt;/div&gt;&lt;blockquote&gt;&lt;div&gt;&lt;b&gt;NOT&lt;/b&gt; is used to invert a boolean expression, so if we asked the question &quot;Is the sky blue&quot;, NOT would return &quot;false&quot; thus having inverted &quot;true&quot;&lt;/div&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;div&gt;&lt;b&gt;AND&lt;/b&gt; is used to compare two boolean expressions and only return &quot;true&quot; if both of the 2 expressions are satisfied. For example if we were to ask the question &quot;is the sky blue AND is the sea blue&quot; processing would return &quot;true&quot; if we asked &quot;is the sky blue AND the sea orange&quot; processing would return &quot;false&quot;, although one of the expressions is true, the other is false, AND only returns true when both expressions are true.&lt;/div&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;div&gt;&lt;b&gt;OR &lt;/b&gt;is like AND, however only one of the expressions has to be true to for it to return &#39;true&#39;, for example &quot;is the sky blue OR is the sea orange&quot;, this returns &#39;true&#39; because the first expression is true, even though the second is false.&lt;/div&gt;&lt;/blockquote&gt;&lt;div&gt;&lt;/div&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;div&gt;&lt;span class=&quot;Apple-style-span&quot; &gt;&lt;i&gt;Looking at what I&#39;ve just written, that is an incredibly lengthy explanation for such simple concepts, I blame this on wikipedias overly wordy explanation of a &#39;logical operator&#39; and it being quite late... now with the explanations dispensed, time to document the chapter.&lt;/i&gt;&lt;/span&gt;&lt;/div&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;div&gt;&lt;br /&gt;In 5.4 we write a simple program to change a rectangles colour when the mouse is over it. I expanded on this code a bit and implemented a multiple rollover, when the mouse is not on the rectangle, the background is &lt;i&gt;black&lt;/i&gt; and the rectangle &lt;i&gt;white&lt;/i&gt;. When the mouse is on the rectangle, the background is &lt;i&gt;white &lt;/i&gt;and the rectangle &lt;i&gt;black. &lt;/i&gt;Hopefully the code is commented well enough for most people to understand!&lt;/div&gt;&lt;br /&gt;&lt;pre style=&quot;font-family:arial;font-size:12px;border:1px dashed #CCCCCC;width:99%;height:auto;overflow:auto;background:#f0f0f0;padding:0px;color:#000000;text-align:left;line-height:20px;&quot;&gt;&lt;code style=&quot;color:#000000;word-wrap:normal;&quot;&gt; /* logical operators in use in a simple sketch, &amp;amp;&amp;amp; is AND&lt;br /&gt;|| is OR */&lt;br /&gt;&lt;br /&gt;void setup() {&lt;br /&gt;size(200,200);  //200x200 canvas&lt;br /&gt;smooth();  //set anti-aliasing&lt;br /&gt;}&lt;br /&gt;&lt;br /&gt;void draw() {&lt;br /&gt;background(255);  //set backgroudn white&lt;br /&gt;if (mouseX &amp;gt; width/2 &amp;amp;&amp;amp; mouseY &amp;gt; width/2) {  //if mouse X coord is on the right AND the mouse Y coord is on the bottom half of the canvas&lt;br /&gt;fill(0); //fill rect with black&lt;br /&gt;rect(width/2,height/2,width/2,height/2);  //draw rect at bottom right&lt;br /&gt;}&lt;br /&gt;else if (mouseX &amp;lt; width/2 || mouseY &amp;lt; height/2) {  //else if the mouse X coord is less than half of the width OR the mouse Y coord is above the middle of the canvas&lt;br /&gt;background(0);  //fill background with black&lt;br /&gt;fill(255);  //fill rectangle with white&lt;br /&gt;rect(width/2,height/2,width/2,height/2);  //draw rect at bottom right&lt;br /&gt;}&lt;br /&gt;}&lt;br /&gt;&lt;br /&gt;&lt;/code&gt;&lt;/pre&gt;&lt;br /&gt;&lt;iframe width=&quot;228&quot; height=&quot;280&quot; scrolling=&quot;no&quot; frameborder=&quot;0&quot; src=&quot;http://www.openprocessing.org/visuals/iframe.php?visualID=27654&amp;amp;width=200&amp;amp;height=200&amp;amp;border=true&quot;&gt;&lt;/iframe&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;div&gt;In 5.5 we learn to implement &#39;multiple rollovers&#39; Shiffman has provided some pseudocode of his next example, however I decided to implement it myself before going ahead and reading his example, as usual my code is cruder, less well written and much harder to mod, but I&#39;m proud of it, it accomplishes the same thing as Shiffman&#39;s code.&lt;/div&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;div&gt;&lt;u&gt;MY CODE:&lt;/u&gt;&lt;/div&gt;&lt;div&gt;&lt;pre style=&quot;font-family:arial;font-size:12px;border:1px dashed #CCCCCC;width:99%;height:auto;overflow:auto;background:#f0f0f0;padding:0px;color:#000000;text-align:left;line-height:20px;&quot;&gt;&lt;code style=&quot;color:#000000;word-wrap:normal;&quot;&gt;&lt;br /&gt;int w = 200; //width of canvas&lt;br /&gt;int h = 200; //height of canvas&lt;br /&gt;int c1 = 255; //colour1 = white&lt;br /&gt;int c2 = 255; //colour2 = white&lt;br /&gt;int c3 = 255; //colour3 = white&lt;br /&gt;int c4 =255; //colour4 = white&lt;br /&gt;&lt;br /&gt;void setup() {&lt;br /&gt;size (w,h); //set canvas size&lt;br /&gt;smooth(); //anti-aliasing&lt;br /&gt;rectMode(CORNER);&lt;br /&gt;}&lt;br /&gt;&lt;br /&gt;void draw() {&lt;br /&gt;if (mouseX &amp;lt; width/2 &amp;amp;&amp;amp; mouseY &amp;lt; height/2) {&lt;br /&gt;c1 = 0;&lt;br /&gt;c2 = 255;&lt;br /&gt;c3 = 255;&lt;br /&gt;c4 = 255;&lt;br /&gt;&lt;br /&gt;} else if (mouseX &amp;lt; width/2 &amp;amp;&amp;amp; mouseY &amp;gt; height/2){&lt;br /&gt;c1 = 255;&lt;br /&gt;c2 = 255;&lt;br /&gt;c3 = 0;&lt;br /&gt;c4 = 255;&lt;br /&gt;&lt;br /&gt;} else if (mouseX &amp;gt; width/2 &amp;amp;&amp;amp; mouseY &amp;lt; height/2) {&lt;br /&gt;c1 = 255;&lt;br /&gt;c2 = 0;&lt;br /&gt;c3 = 255;&lt;br /&gt;c4 = 255;&lt;br /&gt;&lt;br /&gt;} else if (mouseX &amp;gt; width/2 &amp;amp;&amp;amp; mouseY &amp;gt; height/2) {&lt;br /&gt;c1 = 255;&lt;br /&gt;c2 = 255;&lt;br /&gt;c3 = 255;&lt;br /&gt;c4 = 0;&lt;br /&gt;}&lt;br /&gt;&lt;br /&gt;background(255); //set white background&lt;br /&gt;fill(c1);&lt;br /&gt;rect(0,0,width/2,height/2);&lt;br /&gt;fill(c2);&lt;br /&gt;rect(width/2,0,width/2,height/2);&lt;br /&gt;fill(c3);&lt;br /&gt;rect(0,height/2,width/2,height/2);&lt;br /&gt;fill(c4);&lt;br /&gt;rect(width/2,height/2,width/2,height/2);&lt;br /&gt;&lt;br /&gt;println(&quot;X = &quot; + mouseX + &quot; Y = &quot; + mouseY);&lt;br /&gt;}&lt;br /&gt;&lt;/code&gt;&lt;/pre&gt;&lt;div&gt;&lt;/div&gt;&lt;br /&gt;&lt;/div&gt;&lt;br /&gt;&lt;iframe width=&quot;228&quot; height=&quot;280&quot; scrolling=&quot;no&quot; frameborder=&quot;0&quot; src=&quot;http://www.openprocessing.org/visuals/iframe.php?visualID=27655&amp;amp;width=200&amp;amp;height=200&amp;amp;border=true&quot;&gt;&lt;/iframe&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;div&gt;&lt;u&gt;VS. &lt;a href=&quot;http://www.learningprocessing.com/examples/chapter-5/example-5-3/&quot;&gt;SHIFFMAN&#39;S CODE&lt;/a&gt;:&lt;/u&gt;&lt;/div&gt;&lt;pre style=&quot;font-family:arial;font-size:12px;border:1px dashed #CCCCCC;width:99%;height:auto;overflow:auto;background:#f0f0f0;padding:0px;color:#000000;text-align:left;line-height:20px;&quot;&gt;&lt;code style=&quot;color:#000000;word-wrap:normal;&quot;&gt; // Learning Processing&lt;br /&gt;// Daniel Shiffman&lt;br /&gt;// http://www.learningprocessing.com&lt;br /&gt;&lt;br /&gt;// Example 5-3: Rollovers&lt;br /&gt;void setup() {&lt;br /&gt;size(200,200);&lt;br /&gt;}&lt;br /&gt;&lt;br /&gt;void draw() {&lt;br /&gt;background(255);&lt;br /&gt;stroke(0);&lt;br /&gt;line(100,0,100,200);&lt;br /&gt;line(0,100,200,100);&lt;br /&gt;&lt;br /&gt;// Fill a black color&lt;br /&gt;noStroke();&lt;br /&gt;fill(0);&lt;br /&gt;&lt;br /&gt;// Depending on the mouse location, a different rectangle is displayed. &lt;br /&gt;if (mouseX &amp;lt; 100 &amp;amp;&amp;amp; mouseY &amp;lt; 100) {&lt;br /&gt;rect(0,0,100,100);&lt;br /&gt;} else if (mouseX &amp;gt; 100 &amp;amp;&amp;amp; mouseY &amp;lt; 100) {&lt;br /&gt;rect(100,0,100,100);&lt;br /&gt;} else if (mouseX &amp;lt; 100 &amp;amp;&amp;amp; mouseY &amp;gt; 100) {&lt;br /&gt;rect(0,100,100,100);&lt;br /&gt;} else if (mouseX &amp;gt; 100 &amp;amp;&amp;amp; mouseY &amp;gt; 100) {&lt;br /&gt;rect(100,100,100,100);&lt;br /&gt;}&lt;br /&gt;}&lt;br /&gt;&lt;br /&gt;&lt;/code&gt;&lt;/pre&gt;&lt;br /&gt;&lt;div&gt;&lt;/div&gt;Right, I think that&#39;s it for tonight...&lt;/div&gt;
</content>
 </entry>
 
 <entry>
   <title>MAKE: Electronics: Experiment 16: 555 timer</title>
   <link href="http://willprice.org//make%20electronics/2011/04/25/make-electronics-experiment-16-555.html"/>
   <updated>2011-04-25T00:00:00+01:00</updated>
   <id>http://willprice.org/make%20electronics/2011/04/25/make-electronics-experiment-16-555</id>
   <content type="html">&lt;div class=&#39;post&#39;&gt;
&lt;div style=&quot;text-align: center;&quot;&gt;&lt;br /&gt;&lt;/div&gt;&lt;b&gt;&lt;u&gt;INTRODUCTION TO THE 555 TIMER:&lt;/u&gt;&lt;/b&gt;&lt;div&gt;&lt;b&gt;&lt;u&gt;&lt;br /&gt;&lt;/u&gt;&lt;/b&gt;&lt;/div&gt;&lt;div&gt;&lt;b&gt;&lt;u&gt;&lt;img src=&quot;https://lh5.googleusercontent.com/_tW3WwfDXALM/TbV_ozFAB1I/AAAAAAAAAk8/eLJyp8re6cg/220px-555_Pinout.svg.png&quot; style=&quot;display: block; margin: 0px auto 10px; text-align: center; cursor: pointer; width: 220px; height: 145px;&quot; alt=&quot;&quot; border=&quot;0&quot; /&gt;&lt;/u&gt;&lt;/b&gt;&lt;/div&gt;&lt;div&gt;&lt;b&gt;&lt;u&gt;&lt;br /&gt;&lt;/u&gt;&lt;/b&gt;&lt;/div&gt;&lt;div&gt;So, we finally get to play with some ICs now! I feel I have quite a good understanding of the basic components now, so in the coming weeks I shall have a go making some circuits up using transistors etc.&lt;/div&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;div&gt;The 555 timer is perhaps the most ubiquitous IC on the planet, it is estimated that 1 billion per year are still produced, it has &lt;i style=&quot;font-family: Ubuntu,UbuntuBeta ! important;&quot;&gt;3 modes&lt;/i&gt;:&lt;/div&gt;&lt;div&gt;&lt;i&gt;&lt;br /&gt;&lt;/i&gt;&lt;/div&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;img src=&quot;https://lh5.googleusercontent.com/_tW3WwfDXALM/TbV_J2tEosI/AAAAAAAAAkk/Cam6gfcshj0/220px-555_Monostable.svg.png&quot; style=&quot;float: left; margin: 0pt 10px 10px 0pt; cursor: pointer; width: 220px; height: 200px;&quot; alt=&quot;&quot; border=&quot;0&quot; /&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;div&gt;-&lt;i&gt; &lt;/i&gt;&lt;i&gt;&lt;b&gt;Monostable mode&lt;/b&gt; &lt;/i&gt; - This means that when the IC is triggered it produces &lt;u&gt;one pulse&lt;/u&gt;, it can be used to trigger other ICs. A square waveform pulse is produced.&lt;/div&gt;&lt;div&gt;&lt;i&gt;&lt;br /&gt;&lt;/i&gt;&lt;/div&gt;&lt;div&gt;&lt;i&gt;&lt;br /&gt;&lt;/i&gt;&lt;/div&gt;&lt;div&gt;&lt;i&gt;&lt;br /&gt;&lt;/i&gt;&lt;/div&gt;&lt;div&gt;&lt;i&gt;&lt;br /&gt;&lt;/i&gt;&lt;/div&gt;&lt;div&gt;&lt;i&gt;&lt;br /&gt;&lt;/i&gt;&lt;/div&gt;&lt;div&gt;&lt;i&gt;&lt;br /&gt;&lt;/i&gt;&lt;/div&gt;&lt;div&gt;&lt;i&gt;&lt;img src=&quot;https://lh5.googleusercontent.com/_tW3WwfDXALM/TbV_J1qkKkI/AAAAAAAAAkg/PyiJbfbd4XY/220px-555_Astable_Diagram.svg.png&quot; style=&quot;float: left; margin: 0pt 10px 10px 0pt; cursor: pointer; width: 220px; height: 200px;&quot; alt=&quot;&quot; border=&quot;0&quot; /&gt;&lt;/i&gt;&lt;/div&gt;&lt;div&gt;&lt;i&gt;&lt;br /&gt;&lt;/i&gt;&lt;/div&gt;&lt;div&gt;&lt;i&gt;&lt;br /&gt;&lt;/i&gt;&lt;/div&gt;&lt;div&gt;&lt;i&gt;&lt;br /&gt;&lt;/i&gt;&lt;/div&gt;&lt;div&gt;&lt;i&gt;- &lt;b&gt;Astable mode&lt;/b&gt; - &lt;/i&gt;This means that when triggered the IC acts as an oscillator, it is not stable, hence the astable name. This &lt;/div&gt;&lt;div&gt;is useful for flashing LEDs, producing tones on speakers etc. A square waveform is produced.&lt;/div&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;div&gt;&lt;i&gt;&lt;br /&gt;&lt;/i&gt;&lt;/div&gt;&lt;div&gt;&lt;i&gt;&lt;br /&gt;&lt;/i&gt;&lt;/div&gt;&lt;img src=&quot;https://lh6.googleusercontent.com/_tW3WwfDXALM/TbV_J2YNyWI/AAAAAAAAAko/y93BOtz_gvI/555buff%20%281%29.gif&quot; style=&quot;float: left; margin: 0pt 10px 10px 0pt; cursor: pointer; width: 220px; height: 200px;&quot; alt=&quot;&quot; border=&quot;0&quot; /&gt;&lt;div&gt;&lt;i&gt;&lt;b&gt;&lt;br /&gt;&lt;/b&gt;&lt;/i&gt;&lt;/div&gt;&lt;div&gt;&lt;i&gt;&lt;b&gt;&lt;br /&gt;&lt;/b&gt;&lt;/i&gt;&lt;/div&gt;&lt;div&gt;- &lt;b style=&quot;font-style: italic;&quot;&gt;Bistable mode&lt;/b&gt;&lt;i&gt; - &lt;/i&gt;When triggered the IC acts as a flip flop, this is useful to remove the bounce (&lt;a href=&quot;http://www.elexp.com/t_bounc.htm&quot;&gt;http://www.elexp.com/t_bounc.htm&lt;/a&gt;) from a switch. I don&#39;t really know much about flips flops, but I guess later on in the book when logic will have been covered I&#39;ll have a greater understanding of the concept.&lt;/div&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;div&gt;&lt;br /&gt;&lt;b&gt;&lt;u&gt;&lt;br /&gt;&lt;/u&gt;&lt;/b&gt;&lt;/div&gt;&lt;div&gt;&lt;b&gt;&lt;u&gt;Pinouts:&lt;/u&gt;&lt;/b&gt;&lt;/div&gt;&lt;div&gt;&lt;i&gt;(refer to the top diagram)&lt;/i&gt;&lt;/div&gt;&lt;div&gt;1 - (GND) Connected to &lt;b&gt;GROUND&lt;/b&gt;&lt;/div&gt;&lt;div&gt;2 - (TRIG) &lt;b&gt;Trigger&lt;/b&gt;, pull low when you want to trigger the chip (1/3 of Vs)&lt;/div&gt;&lt;div&gt;3 - (OUT) The &lt;b&gt;pulses&lt;/b&gt; are delivered here (+V)&lt;/div&gt;&lt;div&gt;4 - (RESET) Pull low when you want to &lt;b&gt;reset&lt;/b&gt; the chip&lt;/div&gt;&lt;div&gt;5 - (CTRL) &lt;b&gt;Control&lt;/b&gt;, access to the internal voltage divider to change the threshold voltage (default &amp;gt; 2/3 Vs) which pulls pin 3 low (0V)&lt;/div&gt;&lt;div&gt;6 - (THR) &lt;b&gt;Threshold&lt;/b&gt;, when pulled high (2/3 Vs) it sets pin 3 to 0V&lt;/div&gt;&lt;div&gt;7 - (DIS) &lt;b&gt;Discharge&lt;/b&gt;, when a pulse is initiated, the capacitor attached to this pin discharges through it to ground, this is the timing capacitor, hence the larger the value, the longer it takes to discharge and the longer the pulse&lt;/div&gt;&lt;div&gt;8 - (Vcc) &lt;b&gt;Positive supply voltage&lt;/b&gt;, from 3 - 15V&lt;/div&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;div&gt;&lt;b&gt;&lt;u&gt;The Circuit : Monostable mode&lt;/u&gt;&lt;/b&gt;&lt;/div&gt;&lt;div&gt;This experiment uses the 555 timer in &#39;monostable&#39; mode, when we trigger the chip, it will emit a pulse of a length determined by the capacitor attached to pin 6, the larger the capacitance, the longer the length of the pulse. &lt;/div&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;div&gt;The circuit is wired up so when a button is pressed, it pulls pin 2 low, triggering the IC, a pulse is delivered on pin 3 thus powering the LED in the circuit. A potentiometer is connected in between the switch (connected to the trigger) and ground, by varying this pot, the pin is pulled to differing voltages, only if the pin is pulled below 1/3 of the supply voltage will the IC be triggered.&lt;/div&gt;&lt;div&gt;(more great info here &lt;a href=&quot;http://www.kpsec.freeuk.com/555timer.htm&quot;&gt;http://www.kpsec.freeuk.com/555timer.htm&lt;/a&gt;)&lt;/div&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;div&gt;I plan on playing a bit with this chip and documenting my experiences further, I&#39;m getting quite a good idea of how to use it.&lt;/div&gt;&lt;/div&gt;
</content>
 </entry>
 
 <entry>
   <title>Learning Processing: Chapter 5.1 - 5.3</title>
   <link href="http://willprice.org//learning%20processing/2011/04/25/learning-processing-chapter-51-53.html"/>
   <updated>2011-04-25T00:00:00+01:00</updated>
   <id>http://willprice.org/learning%20processing/2011/04/25/learning-processing-chapter-51-53</id>
   <content type="html">&lt;div class=&#39;post&#39;&gt;
&lt;div&gt;&lt;b&gt;&lt;u&gt;CHAPTER 5: CONDITIONALS:&lt;/u&gt;&lt;/b&gt;&lt;/div&gt;&lt;div&gt; So today I taught myself to use conditionals (haven&#39;t finished the chapter yet!). Boolean expressions are the foundation of conditionals, a boolean expression is a &lt;i&gt;true/false question&lt;/i&gt;, these are the only types of questions computers can answer. An example of a boolean expression:&lt;/div&gt;&lt;div&gt;&lt;blockquote&gt;&lt;/blockquote&gt;&lt;blockquote&gt;&quot;15 &amp;gt; 20 false&quot;&lt;/blockquote&gt;In processing there are&lt;i&gt; 3 types&lt;/i&gt; of conditionals:&lt;/div&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;div&gt;- &lt;i&gt;if &lt;/i&gt;statements&lt;/div&gt;&lt;div&gt;   e.g. &quot;If x&amp;gt;y do something&quot;&lt;/div&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;div&gt;- &lt;i&gt;else &lt;/i&gt;statements&lt;/div&gt;&lt;div&gt;   e.g. &quot;If x&amp;gt;y (do something), else (do this instead)&quot;&lt;/div&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;div&gt;- &lt;i&gt;else if &lt;/i&gt;statements&lt;/div&gt;&lt;div&gt;   e.g. &quot;If x&amp;gt;y (do something), else if (do this instead), else (quit)&quot;&lt;/div&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;div&gt;You can only ever have 1 &lt;i&gt;else &lt;/i&gt; and 1 &lt;i&gt;if &lt;/i&gt; in a sketch,&lt;/div&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;div&gt;&lt;u&gt;Ex 5.1:&lt;/u&gt;&lt;/div&gt;&lt;iframe width=&quot;428&quot; height=&quot;480&quot; scrolling=&quot;no&quot; frameborder=&quot;0&quot; src=&quot;http://www.openprocessing.org/visuals/iframe.php?visualID=27557&amp;amp;width=400&amp;amp;height=400&amp;amp;border=true&quot;&gt;&lt;/iframe&gt;&lt;div&gt;&lt;span class=&quot;Apple-style-span&quot;&gt;&lt;i&gt;(check this out on the open processing website, it needs to be run multiple times to give different background colours and prints stuff in the command line, maybe just DL the code and paste it in processing and run it)&lt;/i&gt;&lt;/span&gt;&lt;/div&gt;&lt;div&gt;&lt;span class=&quot;Apple-style-span&quot;&gt;&lt;i&gt;&lt;br /&gt;&lt;/i&gt;&lt;/span&gt;&lt;/div&gt;&lt;div&gt;&lt;span class=&quot;Apple-style-span&quot;&gt;&lt;i&gt;&lt;br /&gt;&lt;/i&gt;&lt;/span&gt;&lt;/div&gt;&lt;div&gt;&lt;span class=&quot;Apple-style-span&quot;&gt;&lt;a href=&quot;http://www.learningprocessing.com/exercises/chapter-5/exercise-5-2/&quot;&gt;Ex 5.2&lt;/a&gt; gave me a bit of trouble, I couldn&#39;t figure out what was wrong in the code on the 2nd problem. I didn&#39;t spot two if statements were used vs. 1 if and 1 else (which is what the second column of code uses). &lt;/span&gt;&lt;/div&gt;&lt;div&gt;&lt;span class=&quot;Apple-style-span&quot;&gt;&lt;br /&gt;&lt;/span&gt;&lt;/div&gt;&lt;div&gt;&lt;span class=&quot;Apple-style-span&quot;&gt;Shiffman&#39;s website is pretty great, It&#39;s really handy to be able to check out whether you are wrong or right and you can just paste the code if you can&#39;t be bothered to write it out (which I don&#39;t usually do, I usually think about whats happening when I type it in, tonight I couldn&#39;t be bothered though!)&lt;/span&gt;&lt;/div&gt;&lt;div&gt;&lt;span class=&quot;Apple-style-span&quot;&gt;&lt;br /&gt;&lt;/span&gt;&lt;/div&gt;&lt;div&gt;&lt;b&gt;&lt;u&gt;&lt;span class=&quot;Apple-style-span&quot;&gt;5.3 CONDITIONALS IN A SKETCH&lt;/span&gt;&lt;/u&gt;&lt;/b&gt;&lt;/div&gt;&lt;div&gt;&lt;b&gt;&lt;u&gt;&lt;span class=&quot;Apple-style-span&quot;&gt;&lt;br /&gt;&lt;/span&gt;&lt;/u&gt;&lt;/b&gt;&lt;/div&gt;&lt;div&gt;&lt;span class=&quot;Apple-style-span&quot;&gt;The first part of chapter 5.3 gives you some pseudo code, I wanted to test my coding skills so before turning the page I implemented the steps into code to see how my code compared to Shiffman&#39;s.&lt;/span&gt;&lt;/div&gt;&lt;div&gt;&lt;br /&gt;&lt;iframe width=&quot;228&quot; height=&quot;280&quot; scrolling=&quot;no&quot; frameborder=&quot;0&quot; src=&quot;http://www.openprocessing.org/visuals/iframe.php?visualID=27561&amp;amp;width=200&amp;amp;height=200&amp;amp;border=true&quot;&gt;&lt;/iframe&gt;&lt;br /&gt;&lt;div&gt;&lt;/div&gt;&lt;b&gt;My Code:&lt;/b&gt;&lt;br /&gt;&lt;pre style=&quot;font-family:arial;font-size:12px;border:1px dashed #CCCCCC;width:99%;height:auto;overflow:auto;background:#f0f0f0;;background-image:URL(http://2.bp.blogspot.com/_z5ltvMQPaa8/SjJXr_U2YBI/AAAAAAAAAAM/46OqEP32CJ8/s320/codebg.gif);padding:0px;color:#000000;text-align:left;line-height:20px;&quot;&gt;&lt;code style=&quot;color:#000000;word-wrap:normal;&quot;&gt; //set values and types of variable of RGB.&lt;br /&gt;&lt;br /&gt;float r = mouseX;&lt;br /&gt;float g = 100;&lt;br /&gt;float b = 150;&lt;br /&gt;&lt;br /&gt;// set window size and enable anti-aliasing&lt;br /&gt;void setup() {&lt;br /&gt;size(200,200);&lt;br /&gt;smooth();&lt;br /&gt;}&lt;br /&gt;&lt;br /&gt;//start loop&lt;br /&gt;void draw() {&lt;br /&gt;&lt;br /&gt;if (r &amp;gt; 255) { //if &#39;r&#39; is bigger than 255 set it to 255 (i.e. limit it)&lt;br /&gt;r = 255;&lt;br /&gt;}&lt;br /&gt;else if(r &amp;lt; 0) { //if &#39;r&#39; is smaller than 0 set it to 0 (limit it)&lt;br /&gt;r = 0;&lt;br /&gt;}&lt;br /&gt;else {&lt;br /&gt;println(&quot;r = &quot; + r); //print line to debug to make sure 0&amp;lt;r&amp;lt;255&lt;br /&gt;}&lt;br /&gt;&lt;br /&gt;&lt;br /&gt;if (mouseX &amp;lt;= 100) { //if mouseX is on the left increase &#39;r&#39; value by 5&lt;br /&gt;r = r + 5;&lt;br /&gt;}&lt;br /&gt;else if (mouseX &amp;gt; 100) { // if mouseX is on the right decrease &#39;r&#39; value by 5&lt;br /&gt;r = r - 5;&lt;br /&gt;}&lt;br /&gt;background(r,g,b);&lt;br /&gt;}&lt;br /&gt;&lt;br /&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;div&gt;&lt;b&gt;&lt;br /&gt;&lt;/b&gt;&lt;/div&gt;&lt;div&gt;&lt;b&gt;Vs. &lt;a href=&quot;http://www.learningprocessing.com/examples/chapter-5/example-5-1/&quot;&gt;Shiffman&#39;s code&lt;/a&gt;:&lt;/b&gt;&lt;/div&gt;&lt;div&gt;&lt;pre style=&quot;font-family:arial;font-size:12px;border:1px dashed #CCCCCC;width:99%;height:auto;overflow:auto;background:#f0f0f0;;background-image:URL(http://2.bp.blogspot.com/_z5ltvMQPaa8/SjJXr_U2YBI/AAAAAAAAAAM/46OqEP32CJ8/s320/codebg.gif);padding:0px;color:#000000;text-align:left;line-height:20px;&quot;&gt;&lt;code style=&quot;color:#000000;word-wrap:normal;&quot;&gt;&lt;br /&gt;// Learning Processing&lt;br /&gt;// Daniel Shiffman&lt;br /&gt;// http://www.learningprocessing.com&lt;br /&gt;&lt;br /&gt;// Example 5-1: Conditionals&lt;br /&gt;&lt;br /&gt;// Variables&lt;br /&gt;float r = 150;&lt;br /&gt;float g = 0;&lt;br /&gt;float b = 0;&lt;br /&gt;&lt;br /&gt;void setup() {&lt;br /&gt;size(200,200);&lt;br /&gt;}&lt;br /&gt;&lt;br /&gt;void draw() {&lt;br /&gt;// Draw stuff&lt;br /&gt;background(r,g,b);&lt;br /&gt;stroke(255);&lt;br /&gt;line(width/2,0,width/2,height);&lt;br /&gt;&lt;br /&gt;&lt;br /&gt;// If the mouse is on the right side of the screen is equivalent to&lt;br /&gt;// &quot;if mouseX is greater than width divided by 2.&quot;&lt;br /&gt;if(mouseX &amp;gt; width/2) {&lt;br /&gt;r = r + 1;&lt;br /&gt;} else {&lt;br /&gt;r = r - 1;&lt;br /&gt;}&lt;br /&gt;&lt;br /&gt;// If r is greater than 255, set it back to 255.&lt;br /&gt;// If r is less than 0, set it back to 0.&lt;br /&gt;if (r &amp;gt; 255) {&lt;br /&gt;r = 255;&lt;br /&gt;} else if (r &amp;lt; 0) {&lt;br /&gt;r = 0;&lt;br /&gt;}&lt;br /&gt;}&lt;br /&gt;&lt;br /&gt;&lt;/code&gt;&lt;/pre&gt;&lt;br /&gt;&lt;div&gt;&lt;/div&gt;&lt;/div&gt;Arghh! And then after all that we learn there is a  function named &lt;i&gt;&quot;constrain()&quot; &lt;/i&gt;which does this all for you e.g. &lt;i&gt;r = constrain(r,0,255);&lt;/i&gt;&lt;div&gt;&lt;/div&gt;&lt;div&gt;That would have been far easier, but it&#39;s nice to know I understand the concept of how to implement constraints without a specialised function.&lt;/div&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;div&gt;Example 5.2 improves upon this last sketch by changing &lt;i&gt;r,g &lt;/i&gt;and &lt;i&gt;b.&lt;/i&gt; It also makes use of the &lt;i&gt;constrain()&lt;/i&gt; function.&lt;/div&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;div&gt;&lt;b&gt;&lt;a href=&quot;http://www.learningprocessing.com/examples/chapter-5/example-5-2/&quot;&gt;Shiffman&#39;s code&lt;/a&gt;:&lt;/b&gt;&lt;/div&gt;&lt;div&gt;&lt;b&gt;&lt;br /&gt;&lt;/b&gt;&lt;/div&gt;&lt;pre style=&quot;font-family:arial;font-size:12px;border:1px dashed #CCCCCC;width:99%;height:auto;overflow:auto;background:#f0f0f0;;background-image:URL(http://2.bp.blogspot.com/_z5ltvMQPaa8/SjJXr_U2YBI/AAAAAAAAAAM/46OqEP32CJ8/s320/codebg.gif);padding:0px;color:#000000;text-align:left;line-height:20px;&quot;&gt;&lt;code style=&quot;color:#000000;word-wrap:normal;&quot;&gt;&lt;br /&gt;// Learning Processing&lt;br /&gt;// Daniel Shiffman&lt;br /&gt;// http://www.learningprocessing.com&lt;br /&gt;&lt;br /&gt;// Example 5-2: More conditionals&lt;br /&gt;&lt;br /&gt;// Three variables for the background color.&lt;br /&gt;float r = 0;&lt;br /&gt;float b = 0;&lt;br /&gt;float g = 0;&lt;br /&gt;&lt;br /&gt;void setup() {&lt;br /&gt;size(200,200);&lt;br /&gt;}&lt;br /&gt;&lt;br /&gt;void draw() {&lt;br /&gt;// Color the background and draw lines to divide the window in quadrants.&lt;br /&gt;background(r,g,b);&lt;br /&gt;stroke(0);&lt;br /&gt;line(width/2,0,width/2,height);&lt;br /&gt;line(0,height/2,width,height/2);&lt;br /&gt;&lt;br /&gt;// If the mouse is on the right hand side of the window, increase red.&lt;br /&gt;// Otherwise, it is on the left hand side and decrease red.&lt;br /&gt;if (mouseX &amp;gt; width/2) {&lt;br /&gt;r = r + 1;&lt;br /&gt;} else {&lt;br /&gt;r = r - 1;&lt;br /&gt;}&lt;br /&gt;&lt;br /&gt;// If the mouse is on the bottom of the window, increase blue.&lt;br /&gt;// Otherwise, it is on the top and decrease blue.&lt;br /&gt;if (mouseY &amp;gt; height/2) {&lt;br /&gt;b = b + 1;&lt;br /&gt;} else {&lt;br /&gt;b = b - 1;&lt;br /&gt;}&lt;br /&gt;&lt;br /&gt;// If the mouse is pressed (using the system variable mousePressed)&lt;br /&gt;if (mousePressed) {&lt;br /&gt;g = g + 1;&lt;br /&gt;} else {&lt;br /&gt;g = g - 1;&lt;br /&gt;}&lt;br /&gt;&lt;br /&gt;// Constrain all color values to between 0 and 255.&lt;br /&gt;r = constrain(r,0,255);&lt;br /&gt;g = constrain(g,0,255);&lt;br /&gt;b = constrain(b,0,255);&lt;br /&gt;}&lt;br /&gt;&lt;br /&gt;&lt;/code&gt;&lt;/pre&gt;In 5.4 I&#39;ll learn about Logical operator (AND, OR, NOT) which looks quite interesting and should hopefully be transferable to logic circuits when I get to them in MAKE: Electronics. This was quite a quite a long chapter so far, it&#39;s been hard but rewarding. I&#39;m glad I&#39;ve tried to implement the examples myself before looking at the code, it makes sure I understand the principles even if it is tough going!&lt;div&gt;&lt;/div&gt;&lt;/div&gt;
</content>
 </entry>
 
 <entry>
   <title>MAKE: Electronics: Experiment 15 (Burglar Alarm)</title>
   <link href="http://willprice.org//electonics/burglar%20alarm/make%20electronics/2011/04/22/make-electronics-experiment-15-burglar.html"/>
   <updated>2011-04-22T00:00:00+01:00</updated>
   <id>http://willprice.org/electonics/burglar%20alarm/make%20electronics/2011/04/22/make-electronics-experiment-15-burglar</id>
   <content type="html">&lt;div class=&#39;post&#39;&gt;
&lt;b style=&quot;font-family: Ubuntu, UbuntuBeta !important;&quot;&gt;&lt;u style=&quot;font-family: Ubuntu, UbuntuBeta !important;&quot;&gt;EXPERIMENT 15: INTRUSION ALARM (REVISITED):&lt;/u&gt;&lt;/b&gt;&lt;br /&gt;&lt;div&gt;&lt;b&gt;&lt;u&gt;&lt;br /&gt;&lt;/u&gt;&lt;/b&gt;&lt;/div&gt;&lt;div&gt;&lt;b&gt;&lt;u&gt;&lt;br /&gt;&lt;object height=&quot;344&quot; width=&quot;425&quot;&gt;&lt;param name=&quot;movie&quot; value=&quot;http://www.youtube.com/v/p3N6f3BW1cc?hl=en&amp;amp;fs=1&quot;&gt;&lt;param name=&quot;allowFullScreen&quot; value=&quot;true&quot;&gt;&lt;param name=&quot;allowscriptaccess&quot; value=&quot;always&quot;&gt;&lt;embed src=&quot;http://www.youtube.com/v/p3N6f3BW1cc?hl=en&amp;amp;fs=1&quot; type=&quot;application/x-shockwave-flash&quot; allowscriptaccess=&quot;always&quot; allowfullscreen=&quot;true&quot; width=&quot;425&quot; height=&quot;344&quot;&gt;&lt;/embed&gt;&lt;/object&gt;&lt;/u&gt;&lt;/b&gt;&lt;/div&gt;&lt;div&gt;&lt;i&gt;&lt;span class=&quot;Apple-style-span&quot;&gt;(this video is showing how the relay is wired up, once the sensor circuit is broken (open) the relay energises, when the sensor circuit is closed, the relay stays energised)&lt;/span&gt;&lt;/i&gt;&lt;/div&gt;&lt;div&gt;&lt;b&gt;&lt;br /&gt;&lt;/b&gt;&lt;/div&gt;&lt;div&gt;&lt;b&gt;&lt;br /&gt;&lt;/b&gt;&lt;/div&gt;&lt;b&gt;&lt;object height=&quot;344&quot; width=&quot;425&quot;&gt;&lt;param name=&quot;movie&quot; value=&quot;http://www.youtube.com/v/P6BSgw2qxgI?hl=en&amp;amp;fs=1&quot;&gt;&lt;param name=&quot;allowFullScreen&quot; value=&quot;true&quot;&gt;&lt;param name=&quot;allowscriptaccess&quot; value=&quot;always&quot;&gt;&lt;embed src=&quot;http://www.youtube.com/v/P6BSgw2qxgI?hl=en&amp;amp;fs=1&quot; type=&quot;application/x-shockwave-flash&quot; allowscriptaccess=&quot;always&quot; allowfullscreen=&quot;true&quot; width=&quot;425&quot; height=&quot;344&quot;&gt;&lt;/embed&gt;&lt;/object&gt;&lt;/b&gt;&lt;br /&gt;&lt;div&gt;&lt;b&gt;&lt;br /&gt;&lt;/b&gt;&lt;/div&gt;&lt;div&gt;&lt;div&gt;&lt;u&gt;Part 1: Stripboard Layout:&lt;/u&gt;&lt;/div&gt;&lt;div&gt;This experiment calls for a protoboard in the same layout of a breadboard, which does seem a great way to introduce beginners to transferring projects from solderless breadboard to permanent perfboard. However I found this nigh on impossible to find in the UK. I settled using a perfboard and arranging the layout in a somewhat similar manner to a breadboard.&lt;/div&gt;&lt;div&gt;The picture shows the top side and under side of the board, I have mirrored the photograph so the top right of the up side = the top right of the under side, basically, you can overlay the pictures over each other as they correspond (I&#39;m not really sure how to say this more clearly!)&lt;/div&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;table style=&quot;width: auto;&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td&gt;&lt;a href=&quot;https://picasaweb.google.com/lh/photo/JwFYo2RqytXj-h4E4keV6MTAw1aMUgxnzJpSY1lHcVc?feat=embedwebsite&quot;&gt;&lt;img height=&quot;400&quot; src=&quot;https://lh6.googleusercontent.com/-zFwN5CT8fKM/TbCd4VjAquI/AAAAAAAAA1w/vbaQIvLRYY0/s400/Underside%2520and%2520Topside%2520of%2520protoboard.jpg&quot; width=&quot;303&quot; /&gt;&lt;/a&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td style=&quot;font-family: arial,sans-serif; font-size: 11px; text-align: right;&quot;&gt;From &lt;a href=&quot;https://picasaweb.google.com/105545134685620195788/MAKEElectronicsExperiment15BurglarAlarm?authuser=0&amp;amp;feat=embedwebsite&quot;&gt;MAKE Electronics: Experiment 15: Burglar Alarm&lt;/a&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;br /&gt;&lt;div&gt;At the top of the board is the alarm circuit created back in experiment 11. At the bottom is a circuit that when triggered by an opening in the sensor circuit (i.e. opening a door) turns power on to the alarm circuit. If the sensor circuit is then closed again (door closed) power is still supplied to the alarm so it does not turn off. This is explained exceptionally well in the book however I think I only truly appreciated how the circuit worked when making my own (far less elegant) arrangement on a breadboard to see how it all worked from the schematic diagram. &lt;/div&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;div&gt;I soldered everything on the stripboard first, then I took a dremel to it with a cutting wheel and trimmed it down and then sanded the sides, it fits in just between the slots in the project box so I don&#39;t have to screw it down (very convenient!).&lt;/div&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;div&gt;&lt;u&gt;Part 2: Project Box&lt;/u&gt;&lt;/div&gt;&lt;div&gt;The point of this experiment is to show how one goes from a fairly minimalist circuit on the breadboard to a fully-fledged project. This requires casing to maintain the longevity of the project and also somewhere to mount a user interface. The UI for this project is fairly simple, it consists of:&lt;/div&gt;&lt;div&gt;(i) An &lt;i&gt;Arming&lt;/i&gt; button - arms the alarm (and lights green LED to indicate the alarm is armed)&lt;/div&gt;&lt;div&gt;(ii) A &lt;i&gt;Test &lt;/i&gt;button - (un-armed) lights up LED when sensor circuit is close, (armed) tests alarm circuit/speaker&lt;/div&gt;&lt;div&gt;&lt;br /&gt;&lt;table style=&quot;width: auto;&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td&gt;&lt;a href=&quot;https://picasaweb.google.com/lh/photo/r3kqLd8l4MoSMODx8k2YD8TAw1aMUgxnzJpSY1lHcVc?feat=embedwebsite&quot;&gt;&lt;img height=&quot;300&quot; src=&quot;https://lh4.googleusercontent.com/-uDxpvl23yMM/TbCd0uYx1BI/AAAAAAAAA1w/GZphwxA0Ivc/s400/DSCF3867.JPG&quot; width=&quot;400&quot; /&gt;&lt;/a&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td style=&quot;font-family: arial,sans-serif; font-size: 11px; text-align: right;&quot;&gt;From &lt;a href=&quot;https://picasaweb.google.com/105545134685620195788/MAKEElectronicsExperiment15BurglarAlarm?authuser=0&amp;amp;authkey=Gv1sRgCLXCp_z7r--PwwE&amp;amp;feat=embedwebsite&quot;&gt;MAKE Electronics: Experiment 15: Burglar Alarm&lt;/a&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;br /&gt;&lt;/div&gt;&lt;div&gt;I added some banana plugs to my magnetic sensor, I currently don&#39;t have anywhere to put it, Platt says later in the book that I&#39;ll learn how to integrate an &#39;away from home&#39; feature and add a keypad to it (Hopefully I can figure out how to use a matrix keypad instead of a common pin type keypad) So I might get round to using it pending on how well it turns out. When activated the alarm isn&#39;t exactly loud so I will build an amplifier circuit at some point (I tried driving it with an old amp and it goes fairly loud for its size, it can certainly be ear piercing) &lt;/div&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;div style=&quot;font-family: arial,sans-serif; font-size: 13px; width: 400px;&quot;&gt;&lt;div&gt;&lt;embed flashvars=&quot;host=picasaweb.google.com&amp;amp;noautoplay=1&amp;amp;hl=en_GB&amp;amp;feat=flashalbum&amp;amp;RGB=0x000000&amp;amp;feed=https%3A%2F%2Fpicasaweb.google.com%2Fdata%2Ffeed%2Fapi%2Fuser%2F105545134685620195788%2Falbumid%2F5598146669219072273%3Falt%3Drss%26kind%3Dphoto%26authkey%3DGv1sRgCLXCp_z7r--PwwE%26hl%3Den_GB&quot; height=&quot;267&quot; pluginspage=&quot;http://www.macromedia.com/go/getflashplayer&quot; src=&quot;https://picasaweb.google.com/s/c/bin/slideshow.swf&quot; type=&quot;application/x-shockwave-flash&quot; width=&quot;400&quot;&gt;&lt;/embed&gt;&lt;/div&gt;&lt;span style=&quot;float: left;&quot;&gt;&lt;a href=&quot;https://picasaweb.google.com/105545134685620195788/MAKEElectronicsExperiment15BurglarAlarm?authuser=0&amp;amp;authkey=Gv1sRgCLXCp_z7r--PwwE&amp;amp;feat=flashalbum&quot; style=&quot;color: #3964c2;&quot;&gt;View all&lt;/a&gt;&lt;/span&gt;&lt;br /&gt;&lt;div style=&quot;text-align: right;&quot;&gt;&lt;a href=&quot;http://picasaweb.google.com/lh/getEmbed?feat=flashalbum&quot; style=&quot;color: #3964c2;&quot;&gt;Get your own&lt;/a&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;
</content>
 </entry>
 
 <entry>
   <title>Learning Processing: Chapter 4</title>
   <link href="http://willprice.org//learning%20processing/2011/04/17/learning-processing-chapter-4.html"/>
   <updated>2011-04-17T00:00:00+01:00</updated>
   <id>http://willprice.org/learning%20processing/2011/04/17/learning-processing-chapter-4</id>
   <content type="html">&lt;div class=&#39;post&#39;&gt;
&lt;b&gt;&lt;u&gt;CHAPTER 4:  Variables&lt;/u&gt;&lt;/b&gt;&lt;div&gt;&lt;b&gt;&lt;u&gt;&lt;br /&gt;&lt;/u&gt;&lt;/b&gt;&lt;/div&gt;&lt;div&gt;Chapter 4 is the start of &#39;Lesson 2&#39; focussing on the rest of the basics of programming: variables, conditionals and loops. &lt;/div&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;div&gt;A variable is a pointer to a location in the computers memory where a value is stored. This value can &lt;i&gt;vary&lt;/i&gt; hence the name. The chapter introduces the different types of variables; &lt;i&gt;int, float, boolean, char, byte, short, long &lt;/i&gt;and &lt;i&gt;double. &lt;/i&gt;Each should be used in a different circumstance depending on the need, the book explains where to use each one clearly and concisely.  Variables can be named, and addressed in a sketch. for example &lt;i&gt;mouseX &lt;/i&gt;is an integer storing the mouses X-coordinate - this is a system-wide variable, one already established in processing, these are mainly commonly used variables (e.g. frameCount) and so have been built into the language. &lt;/div&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;div&gt;The exercise for using system variables gets you to create a little picture out of basic geometry that will scale itself accordingly when you change the size of the window. I thought that the large square was itself a square and not the bounds of the &lt;i&gt;size&lt;/i&gt; therefore my code is somewhat different to the code posted on Shiffmans website as I shall ellaborate on.&lt;/div&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;div&gt;&lt;br /&gt;&lt;iframe src=&quot;http://www.openprocessing.org/visuals/iframe.php?visualID=27230&amp;amp;width=200&amp;amp;height=200&amp;amp;border=true&quot; frameborder=&quot;0&quot; height=&quot;280&quot; scrolling=&quot;no&quot; width=&quot;228&quot;&gt;&lt;/iframe&gt;&lt;br /&gt;&lt;br /&gt;&lt;iframe id=&quot;iframe4aef2f41-8c76-4b69-bb9a-a59d44c0cd27&quot; src=&quot;http://www.blogtrog.com/code.aspx?id=4aef2f41-8c76-4b69-bb9a-a59d44c0cd27&quot; style=&quot;width: 600px; height: 310px; border: 1px solid rgb(224, 224, 224); margin: 0px;&quot; frameborder=&quot;0&quot;&gt;&lt;/iframe&gt;&lt;/div&gt;&lt;div id=&quot;noIframeDiv4aef2f41-8c76-4b69-bb9a-a59d44c0cd27&quot; style=&quot;display: block; margin: 0px;&quot;&gt;&lt;pre&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;div&gt;&lt;code&gt;&lt;a href=&quot;http://www.learningprocessing.com/exercises/chapter-4/exercise-4-5/&quot;&gt;Shiffman&#39;s Code:&lt;/a&gt;&lt;br /&gt;&lt;br /&gt;&lt;iframe id=&quot;iframee59651b0-270f-42e0-bf37-fa46616f923a&quot; src=&quot;http://www.blogtrog.com/code.aspx?id=e59651b0-270f-42e0-bf37-fa46616f923a&quot; style=&quot;width: 600px; height: 300px; border: 1px solid rgb(224, 224, 224); margin: 0px;&quot; frameborder=&quot;0&quot;&gt;&lt;/iframe&gt;&lt;br /&gt;&lt;/code&gt;&lt;div id=&quot;noIframeDive59651b0-270f-42e0-bf37-fa46616f923a&quot; style=&quot;display: block; margin: 0px;&quot;&gt;&lt;pre&gt;&lt;div&gt;&lt;span class=&quot;Apple-style-span&quot; style=&quot;white-space: normal;&quot;&gt;&lt;i&gt;&lt;br /&gt;&lt;a href=&quot;http://processing.org/reference/random_.html&quot;&gt;random()&lt;/a&gt;&lt;/i&gt; is another function you learn how to use in this chapter. It focusses on using it in variables to create movement (e.g. Zoog the alien moving from side to side). The syntax is as follows &lt;i&gt;random(low value bound,high value bound)&lt;/i&gt; - It&#39;s pretty easy to start implementing random values into your sketches after learning the basics.&lt;/span&gt;&lt;/div&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
</content>
 </entry>
 
 <entry>
   <title>MAKE: Electronics: Experiment 14</title>
   <link href="http://willprice.org//make/electronics/2011/04/14/make-electronics-experiment-14.html"/>
   <updated>2011-04-14T00:00:00+01:00</updated>
   <id>http://willprice.org/make/electronics/2011/04/14/make-electronics-experiment-14</id>
   <content type="html">&lt;div class=&#39;post&#39;&gt;
&lt;b&gt;&lt;u&gt;EXPERIMENT 14: A PULSING GLOW:&lt;/u&gt;&lt;/b&gt;&lt;br /&gt;&lt;div&gt;This project takes your new found knowledge of soldering, breadboarding and PUTs to make a pulsing LED mounted on stripboard. I found this fairly easy, but it was a good practice of translating schematic to stripboard, the book does have a diagram of how the components should be arranged; but you can try and convert it yourself first before doing this - it is good practice!&lt;/div&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;div&gt;The way the circuit works is that the capacitor connected to the anode charges, when it reaches a voltage high enough to pass through the gate the capacitor discharges passing current to the LED, the capacitor discharges resulting in the LED fading from bright to dim. However unlike the last LED oscillating circuit in the book there is a capacitor attached to the LED provide it with current, so it doesn&#39;t flash on and off, as instead of turning off the LED is provided with enough current to be lit dimly this creates a &#39;pulsing glow&#39; as Platt puts it. &lt;/div&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;div style=&quot;font-family: arial,sans-serif; font-size: 13px; width: 400px;&quot;&gt;&lt;div&gt;&lt;embed flashvars=&quot;host=picasaweb.google.com&amp;amp;noautoplay=1&amp;amp;hl=en_GB&amp;amp;feat=flashalbum&amp;amp;RGB=0x000000&amp;amp;feed=https%3A%2F%2Fpicasaweb.google.com%2Fdata%2Ffeed%2Fapi%2Fuser%2F105545134685620195788%2Falbumid%2F5595530805713238209%3Falt%3Drss%26kind%3Dphoto%26authkey%3DGv1sRgCPbj7oywgObl4wE%26hl%3Den_GB&quot; height=&quot;267&quot; pluginspage=&quot;http://www.macromedia.com/go/getflashplayer&quot; src=&quot;https://picasaweb.google.com/s/c/bin/slideshow.swf&quot; type=&quot;application/x-shockwave-flash&quot; width=&quot;400&quot;&gt;&lt;/embed&gt;&lt;/div&gt;&lt;span style=&quot;float: left;&quot;&gt;&lt;a href=&quot;https://picasaweb.google.com/105545134685620195788/MAKEElectronicsExperiment14?authuser=0&amp;amp;authkey=Gv1sRgCPbj7oywgObl4wE&amp;amp;feat=flashalbum&quot; style=&quot;color: #3964c2;&quot;&gt;View all&lt;/a&gt;&lt;/span&gt;&lt;br /&gt;&lt;div style=&quot;text-align: right;&quot;&gt;&lt;a href=&quot;http://picasaweb.google.com/lh/getEmbed?feat=flashalbum&quot; style=&quot;color: #3964c2;&quot;&gt;Get your own&lt;/a&gt;&lt;/div&gt;&lt;/div&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;table style=&quot;width: auto;&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td&gt;&lt;a href=&quot;https://picasaweb.google.com/lh/photo/QnBYxAnMvbyF5HrsNAQJIYw0IKFfp4Wx46k7z-QuzVo?feat=embedwebsite&quot;&gt;&lt;img height=&quot;240&quot; src=&quot;https://lh5.googleusercontent.com/-iLuw-fEl1Ts/TadSad6or6I/AAAAAAAAA2M/QcUsDEol4Xc/s800/DSCF3853.jpg&quot; width=&quot;320&quot; /&gt;&lt;/a&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td style=&quot;font-family: arial,sans-serif; font-size: 11px; text-align: right;&quot;&gt;From &lt;a href=&quot;https://picasaweb.google.com/105545134685620195788/MAKEElectronicsVideos?authuser=0&amp;amp;feat=embedwebsite&quot;&gt;MAKE Electronics: Videos&lt;/a&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/div&gt;
</content>
 </entry>
 
 <entry>
   <title>MAKE: Electronics: Experiment 13</title>
   <link href="http://willprice.org//make/electronics/2011/04/13/make-electronics-experiment-13.html"/>
   <updated>2011-04-13T00:00:00+01:00</updated>
   <id>http://willprice.org/make/electronics/2011/04/13/make-electronics-experiment-13</id>
   <content type="html">&lt;div class=&#39;post&#39;&gt;
&lt;b&gt;&lt;u&gt;EXPERIMENT 13: BROIL AND LED:&lt;/u&gt;&lt;/b&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;div&gt;&lt;span class=&quot;Apple-style-span&quot; &gt;This experiment demonstrates how heat affects components - in particular, the LED. One heats the LED with a soldering iron for a while with a copper aligator clip (which diverts heat from the LED, thus preventing it from damage). After you remove it and just use the soldering iron on its own, it&#39;s luminosity slowly decreases in intensity for a period of time before it burns out due to excessive heat.&lt;/span&gt;&lt;/div&gt;&lt;div&gt;&lt;span class=&quot;Apple-style-span&quot; &gt;OK, I have a little confession to make, I failed this experiment, the LED only got slightly dim after 5 minutes of my soldering iron at 450&lt;span class=&quot;Apple-style-span&quot; style=&quot;line-height: 20px; &quot;&gt;°C so I gave up!&lt;/span&gt;&lt;/span&gt;&lt;/div&gt;&lt;div&gt;&lt;span class=&quot;Apple-style-span&quot; style=&quot;line-height: 20px;&quot;&gt;&lt;br /&gt;&lt;/span&gt;&lt;/div&gt;&lt;embed type=&quot;application/x-shockwave-flash&quot; src=&quot;https://picasaweb.google.com/s/c/bin/slideshow.swf&quot; width=&quot;400&quot; height=&quot;267&quot; flashvars=&quot;host=picasaweb.google.com&amp;amp;hl=en_GB&amp;amp;feat=flashalbum&amp;amp;RGB=0x000000&amp;amp;feed=https%3A%2F%2Fpicasaweb.google.com%2Fdata%2Ffeed%2Fapi%2Fuser%2Fwill.price94%2Falbumid%2F5595180125436545777%3Falt%3Drss%26kind%3Dphoto%26hl%3Den_GB&quot; pluginspage=&quot;http://www.macromedia.com/go/getflashplayer&quot;&gt;&lt;/embed&gt;&lt;div&gt;&lt;i&gt;&lt;span class=&quot;Apple-style-span&quot; &gt;The stop watch indicates how long the iron had been applied to the LED and the iron station shows the temperature the iron was at.&lt;/span&gt;&lt;/i&gt;&lt;/div&gt;&lt;/div&gt;
</content>
 </entry>
 
 <entry>
   <title>Learning Processing: Chapter 3</title>
   <link href="http://willprice.org//learning%20processing/2011/04/13/learning-processing-chapter-3.html"/>
   <updated>2011-04-13T00:00:00+01:00</updated>
   <id>http://willprice.org/learning%20processing/2011/04/13/learning-processing-chapter-3</id>
   <content type="html">&lt;div class=&#39;post&#39;&gt;
&lt;b&gt;&lt;u&gt;Chapter 3: &#39;Interaction&#39;&lt;/u&gt;&lt;/b&gt;&lt;div&gt;&lt;b&gt;&lt;u&gt;&lt;br /&gt;&lt;/u&gt;&lt;/b&gt;&lt;/div&gt;&lt;div&gt;Chapter 3 covers the &#39;flow&#39; of a program; what &lt;i&gt;setup() &lt;/i&gt;and &lt;i&gt;draw() &lt;/i&gt;do and how to use them, mouse interaction, &lt;i&gt;dynamic &lt;/i&gt;sketches and finally handling events (mouse clicks and key presses).&lt;/div&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;div&gt;I&#39;ve learnt that &lt;i&gt;setup() &lt;/i&gt;is run only once when the sketch is run, it sets the &#39;initialization code&#39; as Shiffman puts it. After &lt;i&gt;setup(), draw() &lt;/i&gt;is run, this runs, then loops back to the start of the code:&lt;/div&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;div&gt;&lt;i&gt;void setup() {&lt;/i&gt;&lt;/div&gt;&lt;div&gt;&lt;i&gt; //setup code&lt;/i&gt;&lt;/div&gt;&lt;div&gt;&lt;i&gt;}&lt;/i&gt;&lt;/div&gt;&lt;div&gt;&lt;i&gt;&lt;br /&gt;&lt;/i&gt;&lt;/div&gt;&lt;div&gt;&lt;i&gt;void draw() {&lt;/i&gt;&lt;/div&gt;&lt;div&gt;&lt;i&gt;  //code which loops&lt;/i&gt;&lt;/div&gt;&lt;div&gt;&lt;i&gt;}&lt;/i&gt;&lt;/div&gt;&lt;div&gt;&lt;i&gt;&lt;br /&gt;&lt;/i&gt;&lt;/div&gt;&lt;div&gt;The { } host a &#39;block of code&#39; allowing one to manage code as an individual part of a program.&lt;/div&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;div&gt;&lt;u&gt;MOUSE FUNCTIONS:&lt;/u&gt;&lt;/div&gt;&lt;div&gt;&lt;i&gt;mouseX&lt;/i&gt; - the current mouse x-coordinate&lt;/div&gt;&lt;div&gt;&lt;i&gt;mouseY &lt;/i&gt;- the current mouse y-coordinate&lt;/div&gt;&lt;div&gt;&lt;i&gt;pmouseX &lt;/i&gt;- the mouse x-coordinate in the previous run through &lt;i&gt;draw()&lt;/i&gt;&lt;/div&gt;&lt;div&gt;&lt;i&gt;pmouseY - &lt;/i&gt;the mouse y-coordinate in the previous run through &lt;i style=&quot;font-family: Ubuntu, UbuntuBeta !important; &quot;&gt;draw()&lt;/i&gt;&lt;/div&gt;&lt;div&gt;&lt;i&gt;void mousePressed() - &lt;/i&gt;function that runs code when a mouse button is pressed&lt;/div&gt;&lt;div&gt;&lt;i&gt;void keyPressed() -&lt;/i&gt; function that runs code when a key on the keyboard is pressed&lt;/div&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;div&gt;I feel I have a good understanding of all the above, I am starting to realise how one goes about programming and how hard it will be in future implementing features, it shall definitely improve my logic, something I have been looking forward to doing, it&#39;s not very often we get stretched in school!&lt;/div&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;div&gt;This chapter completes &#39;Lesson 1&#39; which covers the beginning of learning to program in processing. The end of lesson project is to create a dynamic sketch by interaction of the mouse and a static drawing. I have drawn a few things and added dynamics to them, currently I can&#39;t figure out how to export programs that actually display in webpages out, once I figure that out, they will be posted here.&lt;/div&gt;&lt;/div&gt;
</content>
 </entry>
 
 <entry>
   <title>Learning Processing: Chapter 2</title>
   <link href="http://willprice.org//learning%20processing/2011/04/13/learning-processing-chapter-2.html"/>
   <updated>2011-04-13T00:00:00+01:00</updated>
   <id>http://willprice.org/learning%20processing/2011/04/13/learning-processing-chapter-2</id>
   <content type="html">&lt;div class=&#39;post&#39;&gt;
Chapter 2 focusses on the topic of &#39;Processing&#39;:&lt;br /&gt;- How to get the IDE&lt;div&gt;- Introducing the &#39;sketchbook&#39;&lt;/div&gt;&lt;div&gt;- Interface&lt;/div&gt;&lt;div&gt;- The processing reference&lt;/div&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;div&gt;Essentially it is quite a dull chapter if you have already used the Processing IDE before but to those new to it, it will prove a nice introduction as to how to use the IDE and the reference.&lt;/div&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;div&gt;One problem I have found is with &#39;publishing&#39; my programs, when I export them, and I have a folder containing the code and index.html, when I open index.html I don&#39;t see my program, the layout is how it should be but just a box where my program should display. I&#39;m not sure what is causing this problem so I may have a browse on the processing forums to try and find a remedy to this problem!&lt;/div&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;/div&gt;
</content>
 </entry>
 
 <entry>
   <title>Learning Processing: Chapter 1</title>
   <link href="http://willprice.org//learning%20processing/2011/04/11/learning-processing-chapter-1.html"/>
   <updated>2011-04-11T00:00:00+01:00</updated>
   <id>http://willprice.org/learning%20processing/2011/04/11/learning-processing-chapter-1</id>
   <content type="html">&lt;div class=&#39;post&#39;&gt;
&lt;img style=&quot;float:left; margin:0 10px 10px 0;cursor:pointer; cursor:hand;width: 338px; height: 500px;&quot; src=&quot;http://mainline.brynmawr.edu/Courses/cs110/fall2010/Images/BookCover.jpg&quot; border=&quot;0&quot; alt=&quot;&quot; /&gt;&lt;br /&gt;I&#39;ve picked up another book to delve into, I&#39;ve always wanted to learn to program, &#39;&lt;i&gt;Processing&lt;/i&gt;&#39; seemed the logical choice &lt;i&gt;Arduino&lt;/i&gt; (the programming language) is based on processing so I shall get a better understanding of syntax and how programs are written including the logic behind how they are structured (I&#39;ve always been fascinated by this), thus giving me a step up when I go back to microcontrollers (after finishing this &amp;amp; Make: Electronics).&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;div&gt;The book is called &quot;&lt;b&gt;Learning Processing&lt;/b&gt;&quot; by &lt;b&gt;Daniel Shiffman&lt;/b&gt;&lt;/div&gt;&lt;div&gt;&lt;a href=&quot;http://www.learningprocessing.com/&quot;&gt;&lt;b&gt;&lt;/b&gt;http://www.learningprocessing.com/&lt;/a&gt;&lt;/div&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;div&gt;A few things drew me to this book, I like how it really takes you from not knowing a thing about programming, to a decent foundation. I think it is very important to learn the theory so when it comes to learning different languages you still have a thorough understanding of the paradigm but you only have to pick up the new aspects of the language.&lt;/div&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;div&gt;Processing is a language based on visual interaction vs text-based interaction. A program is written with text, displayed using visual then can be interacted with via mouse clicks (amongst other devices). Text-based languages operate by being written in text, producing text and then being interacted with by more text. Enough rambling, onto the first chapter...&lt;/div&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;div&gt;&lt;b&gt;&lt;u&gt;CHAPTER 1: Pixels&lt;/u&gt;&lt;/b&gt;&lt;/div&gt;&lt;div&gt;This chapter focuses on &#39;Pixels&#39;, it describes how to draw some basic euclidean shapes (e.g. lines, circles and triangles etc), colour theory (grayscale, RGB, transparency) - that&#39;s about it. The book introduces different exercises to have a bash at to make sure you understand and can implement the theory - I personally find this the strong point on the book so far (Yes, I am only on chapter 2 at the moment!)&lt;/div&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;div&gt;I&#39;ve learnt that the grid the computer draws is different to the &quot;Cartesian coordinate system&quot; (The one you use in mathematics at school). The x-axis is drawn from left to right (lower -&amp;gt; higher value. This is the same as in the &#39;normal&#39; graph system) however the y-axis is drawn from top to bottom, as you go down the y-value increases (not negatively).&lt;/div&gt;&lt;div&gt;I also have learnt how to draw - Rectangles, ellipses, triangles, lines and points, I know how to change line thickness, set the outline to be a different colour, set the inside to be a different colour etc. I don&#39;t quite understand how the colour mixing RGB system works yet, the mixing works like mixing lights; I&#39;ve never really understood how that works thus I will check out a few tuts later on this week on the subject.&lt;/div&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;div&gt;At the end of the chapter you have to draw your own &#39;character&#39; in processing, mine is fairly appalling compared to Shiffman&#39;s but it is original and I feel proud to have accomplished something. &lt;/div&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;div&gt;I tried to upload the code to openprocessing but it isn&#39;t displaying - not too sure why..&lt;/div&gt;&lt;div&gt;Here is the &lt;a href=&quot;http://pastebin.com/ydR1kSPr&quot;&gt;code&lt;/a&gt;.&lt;/div&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;/div&gt;
</content>
 </entry>
 
 <entry>
   <title>MAKE Electronics: Experiment 12</title>
   <link href="http://willprice.org//make/electronics/2011/04/07/make-electronics-experiment-12.html"/>
   <updated>2011-04-07T00:00:00+01:00</updated>
   <id>http://willprice.org/make/electronics/2011/04/07/make-electronics-experiment-12</id>
   <content type="html">&lt;div class=&#39;post&#39;&gt;
&lt;div&gt;&lt;b&gt;&lt;u&gt;Joining 2 wires together:&lt;/u&gt;&lt;/b&gt;&lt;/div&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;I have already soldered quite a bit prior to this so it was more a chance to hone my skills than learning anything new, however I had never soldered low gauge wire, so this was a new experience for me, larger diameters do need more power and my Weller could just about handle the wire in the power chord, I&#39;m not sure how I&#39;d feel about using a &#39;soldering gun&#39; they look rather unwieldy, I do have a low quality Weller hobby one in the garage which I might have a bash using at some point in the future.&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;div&gt;The first 2 solder joints, the first joint joined the wires across each other in an &#39;x&#39; shape, this went well. The second joint joined the wires parallel to each other, again, this proved to be successful, I heat shrinked the wires and was fairly happy with my hand work.&lt;/div&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;div&gt;Next I chopped up a long power chord and made it much shorter, I joined each individual wire and heat shrinked all 3 individually, then used some electrical tape on the outside of this as I didn&#39;t have a larger enough diameter of heat shrink to use for this purpose. I tested this cable out on my soldering iron, it worked flawlessly, I was somewhat hesitant as I thought I might end up tripping the breakers with a short circuit - this did not happen fortunately! &lt;/div&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;br /&gt;&lt;embed type=&quot;application/x-shockwave-flash&quot; src=&quot;https://picasaweb.google.com/s/c/bin/slideshow.swf&quot; width=&quot;400&quot; height=&quot;267&quot; flashvars=&quot;host=picasaweb.google.com&amp;amp;hl=en_GB&amp;amp;feat=flashalbum&amp;amp;RGB=0x000000&amp;amp;feed=https%3A%2F%2Fpicasaweb.google.com%2Fdata%2Ffeed%2Fapi%2Fuser%2Fwill.price94%2Falbumid%2F5592971306722935137%3Falt%3Drss%26kind%3Dphoto%26hl%3Den_GB&quot; pluginspage=&quot;http://www.macromedia.com/go/getflashplayer&quot;&gt;&lt;/embed&gt;&lt;/div&gt;
</content>
 </entry>
 
 <entry>
   <title>MAKE Electronics: Experiment 11</title>
   <link href="http://willprice.org//make/electronics/2011/03/31/make-electronics-experiment-11.html"/>
   <updated>2011-03-31T00:00:00+01:00</updated>
   <id>http://willprice.org/make/electronics/2011/03/31/make-electronics-experiment-11</id>
   <content type="html">&lt;div class=&#39;post&#39;&gt;
This is quite a long experiment so I will be writing it in steps.&lt;br /&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;div&gt;&lt;b&gt;&lt;u&gt;Step 1:  Flashing LED with a PUT:&lt;/u&gt;&lt;/b&gt;&lt;/div&gt;&lt;div&gt;A PUT, Programmable Unijunction Transistor is similar in function to a normal transistor in the sense that it acts as a switch. When voltage is applied to the anode it either is blocked or allowed to flow depending on the value that the gate is set at. The voltage at the gate determines how high the voltage at the anode has to be for current to flow.&lt;/div&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;div&gt;The first part of the circuit is setup to explain this theory. The 2 resistors at the gate determine the voltage at the gate (and thus the voltage barrier at the anode). A resistor at the anode protects the PUT from excess current. When the circuit is set up, the capacitor attached to the anode charges and thus the voltage increases until it reaches the voltage set by the gate and current flows through and lights the LED between the cathode and ground.&lt;/div&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;div&gt;&lt;table style=&quot;width: auto;&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td&gt;&lt;a href=&quot;https://picasaweb.google.com/lh/photo/PtoeAyyXIVdoyZGFUrAXsYw0IKFfp4Wx46k7z-QuzVo?feat=embedwebsite&quot;&gt;&lt;img height=&quot;240&quot; src=&quot;https://lh4.googleusercontent.com/-bNpEUvnTu8A/TZMdAImMazI/AAAAAAAAA2M/XIxvK_gIauc/s800/DSCF3770.jpg&quot; width=&quot;320&quot; /&gt;&lt;/a&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td style=&quot;font-family: arial,sans-serif; font-size: 11px; text-align: right;&quot;&gt;From &lt;a href=&quot;https://picasaweb.google.com/105545134685620195788/MAKEElectronicsVideos?authuser=0&amp;amp;feat=embedwebsite&quot;&gt;MAKE Electronics: Videos&lt;/a&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;br /&gt;&lt;/div&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;div&gt;&lt;b style=&quot;text-decoration: underline;&quot;&gt;Step 2: Making a metronome with a speaker:&lt;/b&gt;&lt;br /&gt;This is very much the same circuit as above however the LED is replaced with a speaker, there is a resistor in series with the speaker, I assume this is to protect the speaker or to stop it from distorting. The sound is only faintly audible because of the very low current. A metronome can be produced by using a capacitor with a larger capacitance, this slows the oscillating of the speaker, whereas using a lower capacitance results in a faster oscillation. In this circuit a 0.0047 uf capacitor is used, therefore the speaker oscillates fairly frequently.&lt;/div&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;div&gt;&lt;b&gt;&lt;u&gt;Step 3: Adding an amplifier:&lt;/u&gt;&lt;/b&gt;&lt;/div&gt;&lt;div&gt;In this step, a 2N222 transistor is added to amplify the current to the speaker so it makes a more audible tone. The collector of the transistor is protected by a resistor, the output of the PUT (cathode) is attached to the base of the transistor and then the speaker is put in series with the emitter and ground.&lt;/div&gt;&lt;div&gt;When the current flows through the PUT it reaches the base of the transistor which switches the current from the collector to the emitter. Because more current is flowing through the speaker it sounds louder.&lt;/div&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;div&gt;&lt;u style=&quot;font-weight: bold;&quot;&gt;Step 4: Adding another amplifier:&lt;/u&gt;&lt;/div&gt;&lt;div&gt;To give the speaker one final boost we add another 2N222, this time the speaker is hooked up between the positive voltage rail and anode, I assume it could also be placed in between the emitter and ground, the speaker only operates when the switch is open/the transistor is oscillating.&lt;/div&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;div&gt;&lt;table style=&quot;width: auto;&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td&gt;&lt;a href=&quot;https://picasaweb.google.com/lh/photo/zrmKpijLqfF1tOuieClxEYw0IKFfp4Wx46k7z-QuzVo?feat=embedwebsite&quot;&gt;&lt;img height=&quot;240&quot; src=&quot;https://lh4.googleusercontent.com/-C4e5toqDPuo/TZMyRjqix0I/AAAAAAAAA2M/_kIHx0eV4EY/s800/Demonstration%2520of%25201%2520amp%2520vs%25202.jpg&quot; width=&quot;320&quot; /&gt;&lt;/a&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td style=&quot;font-family: arial,sans-serif; font-size: 11px; text-align: right;&quot;&gt;From &lt;a href=&quot;https://picasaweb.google.com/105545134685620195788/MAKEElectronicsVideos?authuser=0&amp;amp;feat=embedwebsite&quot;&gt;MAKE Electronics: Videos&lt;/a&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;(at first the speaker is only going through 1 transistor, the second time it is being driven by 2, for some reason it is not much louder but at a slightly different pitch, I do not understand why this is!)&lt;/div&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;div&gt;&lt;b&gt;&lt;u&gt;Step 5: Adding step 1 (the slow oscillator) to the fast oscillator driving the speaker:&lt;/u&gt;&lt;/b&gt;&lt;/div&gt;&lt;div&gt;The output from the cathode of the PUT in the top circuit is joined to the gate of the PUT driving the speaker, I assume this varies the gate voltage which means that when the PUT in the top circuit is passing current, the the capacitor in the speaker PUT circuit takes less time to charge and therefore the speaker oscillates more quickly, thus producing a higher tone, then when the slow oscillating PUT is not passing current the capacitor charges slower (as it is having to reach a higher voltage) in the speaker circuit producing a lower tone in the speaker.&lt;/div&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;div&gt;&lt;table style=&quot;width: auto;&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td&gt;&lt;a href=&quot;https://picasaweb.google.com/lh/photo/014nGDELeqsRGihCCvcST4w0IKFfp4Wx46k7z-QuzVo?feat=embedwebsite&quot;&gt;&lt;img height=&quot;240&quot; src=&quot;https://lh5.googleusercontent.com/-WHYQ6XI9vlo/TZLSIX8B-DI/AAAAAAAAA2M/jl6q_PaAPJI/s800/DSCF3783.jpg&quot; width=&quot;320&quot; /&gt;&lt;/a&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td style=&quot;font-family: arial,sans-serif; font-size: 11px; text-align: right;&quot;&gt;From &lt;a href=&quot;https://picasaweb.google.com/105545134685620195788/MAKEElectronicsVideos?authuser=0&amp;amp;feat=embedwebsite&quot;&gt;MAKE Electronics: Videos&lt;/a&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/div&gt;&lt;/div&gt;
</content>
 </entry>
 
 <entry>
   <title>ATX Bench-top Power Supply</title>
   <link href="http://willprice.org//tools/electonics/atx%20psu%20benchtop/2011/03/29/atx-bench-top-power-supply.html"/>
   <updated>2011-03-29T00:00:00+01:00</updated>
   <id>http://willprice.org/tools/electonics/atx%20psu%20benchtop/2011/03/29/atx-bench-top-power-supply</id>
   <content type="html">&lt;div class=&#39;post&#39;&gt;
&lt;a href=&quot;https://lh5.googleusercontent.com/_tW3WwfDXALM/TZIk3rYI68I/AAAAAAAAARc/9M_7N8-v1A0/s800/DSCF3848.JPG&quot; onblur=&quot;try {parent.deselectBloggerImageGracefully();} catch(e) {}&quot;&gt;&lt;img style=&quot;float: left; margin: 0pt 10px 10px 0pt; cursor: pointer; width: 606px; height: 454px;&quot; src=&quot;https://lh5.googleusercontent.com/_tW3WwfDXALM/TZIk3rYI68I/AAAAAAAAARc/9M_7N8-v1A0/s800/DSCF3848.JPG&quot; alt=&quot;&quot; border=&quot;0&quot; /&gt;&lt;/a&gt;&lt;br /&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;br /&gt;&lt;br /&gt;&lt;br /&gt;&lt;br /&gt;&lt;br /&gt;&lt;br /&gt;&lt;br /&gt;&lt;br /&gt;&lt;br /&gt;&lt;br /&gt;&lt;br /&gt;&lt;br /&gt;&lt;br /&gt;&lt;br /&gt;&lt;br /&gt;&lt;br /&gt;&lt;br /&gt;&lt;br /&gt;&lt;br /&gt;&lt;br /&gt;&lt;br /&gt;&lt;br /&gt;&lt;br /&gt;I made this on the weekend. It&#39;s a converted ATX PSU, I cut the cables off and added binding posts to use as a bench-top power supply, I could have simply bought one of those cheap ones on ebay from china for ~£40 however I had this lying about and it cost me about £6 in parts. &lt;div&gt;First I took apart the PSU and took the PCB out after marking the top heights of the components on the case so I could figure out how to arrange the binding posts &amp;amp; fuses. I then drilled and sanded the holes (time to buy a hand reamer). &lt;/div&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;div&gt;The wires colours correspond to the voltages:&lt;/div&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;div&gt;Yellow - 12V &lt;/div&gt;&lt;div&gt;Yellow/Black - -12V&lt;/div&gt;&lt;div&gt;Orange - 3.3V&lt;/div&gt;&lt;div&gt;Red - 5V&lt;/div&gt;&lt;div&gt;Black - ground&lt;/div&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;div&gt;I desoldered a bunch of these which I didn&#39;t need clogging up the case, and then cut the others down to a reasonable length and heat-shrinked them (so far no shorts). I then soldered the leads corresponding to the voltages I wanted; 3.3V, 5V, 12V and ground to their corresponding fuse holders and then from the fuse holder I soldered wire with crimped connectors on the end (to be used with the binding posts), hooked them up and voila, all I had left to do was to attach a switch from ground to the thin green wire which turns the power supply on and off when it is plugged in.&lt;/div&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;div&gt;I mounted the fan the other way around as the binding post obstructed it from being in it&#39;s original position, I also put the fan guard on underneath as I didn&#39;t want the fan and the wires to hit each other. I used 5A quick blow fuses as these things can output ~20A and I&#39;d rather not see my projects go up in flames if I can help it. &lt;/div&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;div&gt;If you&#39;re looking for a &#39;how-to&#39; vs. an &#39;account&#39; I suggest looking at these links, which I used when making this power supply, I see no need to saturate the web with another set of instructions!&lt;/div&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;div&gt;&lt;a href=&quot;http://letsmakerobots.com/node/1355&quot;&gt;http://letsmakerobots.com/node/1355&lt;/a&gt; (I&#39;d like to note I do not use a load resistor, I didn&#39;t buy one and the supply seems to function ok without it)&lt;/div&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;div&gt;&lt;a href=&quot;http://www.instructables.com/id/ATX--%3E-Lab-Bench-Power-Supply-Conversion/&quot;&gt;http://www.instructables.com/id/ATX--%3E-Lab-Bench-Power-Supply-Conversion/&lt;/a&gt;&lt;/div&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;div&gt;&lt;a href=&quot;http://www.instructables.com/id/Convert-an-ATX-Power-Supply-Into-a-Regular-DC-Powe/&quot;&gt;http://www.instructables.com/id/Convert-an-ATX-Power-Supply-Into-a-Regular-DC-Powe/&lt;/a&gt;&lt;/div&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;div&gt;One final note, if you do undertake this project, be very careful of the power caps inside, I left my supply off for a week before touching it, I&#39;d rather be on the safe side!&lt;/div&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;br /&gt;&lt;embed type=&quot;application/x-shockwave-flash&quot; src=&quot;https://picasaweb.google.com/s/c/bin/slideshow.swf&quot; width=&quot;400&quot; height=&quot;267&quot; flashvars=&quot;host=picasaweb.google.com&amp;hl=en_GB&amp;feat=flashalbum&amp;RGB=0x000000&amp;feed=https%3A%2F%2Fpicasaweb.google.com%2Fdata%2Ffeed%2Fapi%2Fuser%2Fwill.price94%2Falbumid%2F5589568641862132273%3Falt%3Drss%26kind%3Dphoto%26hl%3Den_GB&quot; pluginspage=&quot;http://www.macromedia.com/go/getflashplayer&quot;&gt;&lt;/embed&gt;&lt;/div&gt;
</content>
 </entry>
 
 <entry>
   <title>MAKE Electronics Project 7 - 10</title>
   <link href="http://willprice.org//make:%20electronics/2011/03/27/make-electronics-project-7-10.html"/>
   <updated>2011-03-27T00:00:00+00:00</updated>
   <id>http://willprice.org/make:%20electronics/2011/03/27/make-electronics-project-7-10</id>
   <content type="html">&lt;div class=&#39;post&#39;&gt;
I have been working through the book &quot;Make: Electronics&quot; By Charles Platt. I have been inspired to document my progress by James Floyd Kelly&#39;s blog regarding the book, It has been invaluable when carrying out the projects, check it out here - &quot;http://handsonelectronics.blogspot.com/&quot; I like the idea of documenting your troubles and how you overcome them, it seems most people just document their success rather than failure, I think the latter is far more important when it comes to learning.&lt;br /&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;div&gt;I&#39;ve written a bit about project 7 - 10 on Xournal and uploaded the PDFs to Google Docs so people can have a look at what I learnt, I find writing down what I did right/wrong helps me understand the circuits and theory better and improves my retention of the content.&lt;/div&gt;&lt;div&gt;&lt;u&gt;&lt;br /&gt;&lt;/u&gt;&lt;/div&gt;&lt;div&gt;&lt;b&gt;&lt;u&gt;Project 7 &amp;amp; 8:&lt;/u&gt;&lt;/b&gt;&lt;/div&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;div&gt;&lt;br /&gt;&lt;iframe frameborder=&quot;0&quot; src=&quot;http://docs.google.com/gview?url=https://docs.google.com/viewer?a=v&amp;amp;pid=explorer&amp;amp;chrome=true&amp;amp;srcid=0B0b7Lw1a8gPuZmI5NDVhZGMtNjY2Zi00M2IyLWIxYmEtY2FkYzgzYzIzYzZi&amp;amp;hl=en_GB&amp;amp;embedded=true&quot; style=&quot;height: 500px; width: 600px;&quot;&gt;&lt;/iframe&gt;&lt;br /&gt;&lt;br /&gt;&lt;table style=&quot;width: auto;&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td&gt;&lt;a href=&quot;https://picasaweb.google.com/lh/photo/gdVnU5Mvp29TBD-xK26txow0IKFfp4Wx46k7z-QuzVo?feat=embedwebsite&quot;&gt;&lt;img height=&quot;240&quot; src=&quot;https://lh4.googleusercontent.com/-qYox8VOn8Ls/TZI1MV6AJmI/AAAAAAAAA2M/pCwNfH9ZzVE/s800/Demo.jpg&quot; width=&quot;320&quot; /&gt;&lt;/a&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td style=&quot;font-family: arial,sans-serif; font-size: 11px; text-align: right;&quot;&gt;From &lt;a href=&quot;https://picasaweb.google.com/105545134685620195788/MAKEElectronicsVideos?authuser=0&amp;amp;feat=embedwebsite&quot;&gt;MAKE Electronics: Videos&lt;/a&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;table style=&quot;width: auto;&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td&gt;&lt;a href=&quot;https://picasaweb.google.com/lh/photo/aLgP_tQtS5FIKRKeezhI64w0IKFfp4Wx46k7z-QuzVo?feat=embedwebsite&quot;&gt;&lt;img height=&quot;240&quot; src=&quot;https://lh3.googleusercontent.com/-1cjUaf3V1J4/TZI3BO_wvtI/AAAAAAAAA2M/WdIRShLQCko/s800/Relay%2520oscillating%2520sans%2520cap.jpg&quot; width=&quot;320&quot; /&gt;&lt;/a&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td style=&quot;font-family: arial,sans-serif; font-size: 11px; text-align: right;&quot;&gt;From &lt;a href=&quot;https://picasaweb.google.com/105545134685620195788/MAKEElectronicsVideos?authuser=0&amp;amp;feat=embedwebsite&quot;&gt;MAKE Electronics: Videos&lt;/a&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;table style=&quot;width: auto;&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td&gt;&lt;a href=&quot;https://picasaweb.google.com/lh/photo/wg7GKjSZ27SsAp8TNU02uIw0IKFfp4Wx46k7z-QuzVo?feat=embedwebsite&quot;&gt;&lt;img height=&quot;240&quot; src=&quot;https://lh5.googleusercontent.com/-yYw3qir70Vw/TZI3BH8uDyI/AAAAAAAAA2M/2zaiqJwb60A/s800/DSCF3761.jpg&quot; width=&quot;320&quot; /&gt;&lt;/a&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td style=&quot;font-family: arial,sans-serif; font-size: 11px; text-align: right;&quot;&gt;From &lt;a href=&quot;https://picasaweb.google.com/105545134685620195788/MAKEElectronicsVideos?authuser=0&amp;amp;feat=embedwebsite&quot;&gt;MAKE Electronics: Videos&lt;/a&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;div&gt;&lt;b&gt;&lt;u&gt;Project 9:&lt;/u&gt;&lt;/b&gt;&lt;/div&gt;&lt;div&gt;&lt;br /&gt;&lt;iframe frameborder=&quot;0&quot; src=&quot;http://docs.google.com/gview?url=https://docs.google.com/viewer?a=v&amp;amp;pid=explorer&amp;amp;chrome=true&amp;amp;srcid=0B0b7Lw1a8gPuNDZmNTdkNmYtNGQ2OC00MTY4LTgxM2QtZTc4YzhiYWJkNjhi&amp;amp;hl=en_GB&amp;amp;embedded=true&quot; style=&quot;height: 500px; width: 600px;&quot;&gt;&lt;/iframe&gt;&lt;br /&gt;&lt;/div&gt;&lt;div&gt;&lt;br /&gt;&lt;table style=&quot;width: auto;&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td&gt;&lt;a href=&quot;https://picasaweb.google.com/lh/photo/j527sA2WEdbF8R39jmA5DYw0IKFfp4Wx46k7z-QuzVo?feat=embedwebsite&quot;&gt;&lt;img height=&quot;240&quot; src=&quot;https://lh3.googleusercontent.com/-h-JCgH0yn5Y/TZNCVU5-kFI/AAAAAAAAA2M/bJt74ZPpNcM/s800/DSCF3764.jpg&quot; width=&quot;320&quot; /&gt;&lt;/a&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td style=&quot;font-family: arial,sans-serif; font-size: 11px; text-align: right;&quot;&gt;From &lt;a href=&quot;https://picasaweb.google.com/105545134685620195788/MAKEElectronicsVideos?authuser=0&amp;amp;feat=embedwebsite&quot;&gt;MAKE Electronics: Videos&lt;/a&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;br /&gt;&lt;/div&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;div&gt;&lt;b&gt;&lt;u&gt;Project 10:&lt;/u&gt;&lt;/b&gt;&lt;/div&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;iframe frameborder=&quot;0&quot; src=&quot;http://docs.google.com/gview?url=https://docs.google.com/viewer?a=v&amp;amp;pid=explorer&amp;amp;chrome=true&amp;amp;srcid=0B0b7Lw1a8gPuYTZmMjczZDYtMWQwMi00N2Y2LWEyYzQtZGI3NTQwODUwNmMw&amp;amp;hl=en_GB&amp;amp;embedded=true&quot; style=&quot;height: 500px; width: 600px;&quot;&gt;&lt;/iframe&gt;&lt;br /&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;table style=&quot;width: auto;&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td&gt;&lt;a href=&quot;https://picasaweb.google.com/lh/photo/27s4Y-PMmNvkJmxJXrWL94w0IKFfp4Wx46k7z-QuzVo?feat=embedwebsite&quot;&gt;&lt;img height=&quot;240&quot; src=&quot;https://lh6.googleusercontent.com/-iJnaBmAjdCQ/TZMyRgUgEyI/AAAAAAAAA2M/9qpp0seT4Sk/s800/DSCF3766.jpg&quot; width=&quot;320&quot; /&gt;&lt;/a&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td style=&quot;font-family: arial,sans-serif; font-size: 11px; text-align: right;&quot;&gt;From &lt;a href=&quot;https://picasaweb.google.com/105545134685620195788/MAKEElectronicsVideos?authuser=0&amp;amp;feat=embedwebsite&quot;&gt;MAKE Electronics: Videos&lt;/a&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;br /&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;object height=&quot;344&quot; width=&quot;425&quot;&gt;&lt;param name=&quot;movie&quot; value=&quot;http://www.youtube.com/v/Ox2s8i17i3I?hl=en&amp;amp;fs=1&quot;&gt;&lt;param name=&quot;allowFullScreen&quot; value=&quot;true&quot;&gt;&lt;param name=&quot;allowscriptaccess&quot; value=&quot;always&quot;&gt;&lt;embed src=&quot;http://www.youtube.com/v/Ox2s8i17i3I?hl=en&amp;amp;fs=1&quot; type=&quot;application/x-shockwave-flash&quot; allowscriptaccess=&quot;always&quot; allowfullscreen=&quot;true&quot; width=&quot;425&quot; height=&quot;344&quot;&gt;&lt;/embed&gt;&lt;/object&gt;&lt;/div&gt;&lt;/div&gt;
</content>
 </entry>
 
 
</feed>
