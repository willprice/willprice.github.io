<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
 
 <title>Will Price</title>
 <link href="http://www.willprice.org/feed/" rel="self"/>
 <link href="http://www.willprice.org"/>
 <updated>2012-11-19T17:09:11+00:00</updated>
 <id>http://willprice.org/</id>
 <author>
   <name>Will Price</name>
   <email>willprice94+blog@gmail.com</email>
 </author>

 
 <entry>
   <title>CS101 Unit 4: Homework 4: Splitting Strings</title>
   <link href="http://willprice.org//2012/11/19/CS101-Homework-4-splitting-strings.html"/>
   <updated>2012-11-19T00:00:00+00:00</updated>
   <id>http://willprice.org/2012/11/19/CS101-Homework-4-splitting-strings</id>
   <content type="html">&lt;p&gt;I&amp;#8217;ve been going through CS101 on Udacity to get a decent grounding in Python and some CS concepts. So far I&amp;#8217;ve found it quite rewarding thanks to some rather challenging questions. This question in particular (Unit 4 homework, question 4) I found very difficult to crack and finally had to watch the answer video. I&amp;#8217;ll explain the question and how the solution is reached for those that didn&amp;#8217;t find the video particularly clear.&lt;/p&gt;

&lt;p&gt;The question:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt; # 1 Gold Star
 
 # The built-in &amp;lt;string&amp;gt;.split() procedure works
 # okay, but fails to find all the words on a page
 # because it only uses whitespace to split the
 # string. To do better, we should also use punctuation
 # marks to split the page into words.
 
 # Define a procedure, split_string, that takes two
 # inputs: the string to split and a string containing
 # all of the characters considered separators. The
 # procedure should return a list of strings that break
 # the source string up by the characters in the
 # splitlist.
 #
 # def split_string(source,splitlist)&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;There are also some examples and expected behaviour given:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt; out = split_string(&amp;quot;This is a test-of the,string separation-code!&amp;quot;,&amp;quot; ,!-&amp;quot;)
 print out
 #&amp;gt;&amp;gt;&amp;gt; [&amp;#39;This&amp;#39;, &amp;#39;is&amp;#39;, &amp;#39;a&amp;#39;, &amp;#39;test&amp;#39;, &amp;#39;of&amp;#39;, &amp;#39;the&amp;#39;, &amp;#39;string&amp;#39;, &amp;#39;separation&amp;#39;, &amp;#39;code&amp;#39;]
 
 out = split_string(&amp;quot;After  the flood   ...  all the colors came out.&amp;quot;, &amp;quot; .&amp;quot;)
 print out
 #&amp;gt;&amp;gt;&amp;gt; [&amp;#39;After&amp;#39;, &amp;#39;the&amp;#39;, &amp;#39;flood&amp;#39;, &amp;#39;all&amp;#39;, &amp;#39;the&amp;#39;, &amp;#39;colors&amp;#39;, &amp;#39;came&amp;#39;, &amp;#39;out&amp;#39;]&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Approaching the problem from a high level we can see that in essence we need produce a list of words (sets of characters that aren&amp;#8217;t members of &lt;code&gt;splitlist&lt;/code&gt;) that are separated by splitting characters (as defined in &lt;code&gt;splitlist&lt;/code&gt;).&lt;/p&gt;

&lt;p&gt;Let&amp;#8217;s define a list,&lt;code&gt;word_list&lt;/code&gt;, that will hold all the words from source without the splitting characters present, each block of characters seperated by splitlist characters will be a new entry in &lt;code&gt;word_list&lt;/code&gt;. We want to iterate through &lt;code&gt;source&lt;/code&gt; adding characters to a string present in &lt;code&gt;word_list&lt;/code&gt; until we hit upon a splitting character. At that point we want to skip to the next character and check whether that&amp;#8217;s also a splitting character, if it is, then skip to the next one and so on until we reach a word character (i.e. one not present in splitlist). Once we reach that new word character, we&amp;#8217;ll need to start a new entry in the word_list list otherwise we&amp;#8217;ll continue appending to the first word we found and therefore just end up with an list containing one element; a string containing all the words without any splitting characters in it.&lt;/p&gt;

&lt;p&gt;Now we have a better of idea of the problem and how to implement the solution we can start writing code:&lt;/p&gt;
&lt;div class='highlight'&gt;&lt;pre&gt;&lt;code class='py'&gt;&lt;span class='k'&gt;def&lt;/span&gt; &lt;span class='nf'&gt;split_string&lt;/span&gt;&lt;span class='p'&gt;(&lt;/span&gt;&lt;span class='n'&gt;source&lt;/span&gt;&lt;span class='p'&gt;,&lt;/span&gt;&lt;span class='n'&gt;splitlist&lt;/span&gt;&lt;span class='p'&gt;):&lt;/span&gt;
    &lt;span class='n'&gt;word_list&lt;/span&gt; &lt;span class='o'&gt;=&lt;/span&gt; &lt;span class='p'&gt;[]&lt;/span&gt;

    &lt;span class='c'&gt;# Once we&amp;#39;ve filled word list, we&amp;#39;ll want to return the list containing all the words&lt;/span&gt;
    &lt;span class='k'&gt;return&lt;/span&gt; &lt;span class='n'&gt;word_list&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;p&gt;So we&amp;#8217;ve got a skeleton function now, we know what parameters the function is going to take and the end result. We&amp;#8217;ll now add functionality that loops through &lt;code&gt;source&lt;/code&gt; and check which characters are members of split list&lt;/p&gt;
&lt;div class='highlight'&gt;&lt;pre&gt;&lt;code class='py'&gt;&lt;span class='k'&gt;def&lt;/span&gt; &lt;span class='nf'&gt;split_string&lt;/span&gt;&lt;span class='p'&gt;(&lt;/span&gt;&lt;span class='n'&gt;source&lt;/span&gt;&lt;span class='p'&gt;,&lt;/span&gt;&lt;span class='n'&gt;splitlist&lt;/span&gt;&lt;span class='p'&gt;):&lt;/span&gt;
    &lt;span class='n'&gt;word_list&lt;/span&gt; &lt;span class='o'&gt;=&lt;/span&gt; &lt;span class='p'&gt;[]&lt;/span&gt;

    &lt;span class='k'&gt;for&lt;/span&gt; &lt;span class='n'&gt;char&lt;/span&gt; &lt;span class='ow'&gt;in&lt;/span&gt; &lt;span class='n'&gt;source&lt;/span&gt;&lt;span class='p'&gt;:&lt;/span&gt;
        &lt;span class='k'&gt;if&lt;/span&gt; &lt;span class='n'&gt;char&lt;/span&gt; &lt;span class='ow'&gt;in&lt;/span&gt; &lt;span class='n'&gt;splitlist&lt;/span&gt;&lt;span class='p'&gt;:&lt;/span&gt;
            &lt;span class='k'&gt;print&lt;/span&gt; &lt;span class='s'&gt;&amp;quot;this char: &amp;quot;&lt;/span&gt; &lt;span class='o'&gt;+&lt;/span&gt; &lt;span class='nb'&gt;str&lt;/span&gt;&lt;span class='p'&gt;(&lt;/span&gt;&lt;span class='n'&gt;char&lt;/span&gt;&lt;span class='p'&gt;)&lt;/span&gt; &lt;span class='o'&gt;+&lt;/span&gt; &lt;span class='s'&gt;&amp;quot; is in splitlist&amp;quot;&lt;/span&gt;

    &lt;span class='c'&gt;# Once we&amp;#39;ve filled word list, we&amp;#39;ll want to return the list containing all the words&lt;/span&gt;
    &lt;span class='k'&gt;return&lt;/span&gt; &lt;span class='n'&gt;word_list&lt;/span&gt;

&lt;span class='n'&gt;out&lt;/span&gt; &lt;span class='o'&gt;=&lt;/span&gt; &lt;span class='n'&gt;split_string&lt;/span&gt;&lt;span class='p'&gt;(&lt;/span&gt;&lt;span class='s'&gt;&amp;quot;This is a test-of the,string separation-code!&amp;quot;&lt;/span&gt;&lt;span class='p'&gt;,&lt;/span&gt;&lt;span class='s'&gt;&amp;quot; ,!-.&amp;quot;&lt;/span&gt;&lt;span class='p'&gt;)&lt;/span&gt;
&lt;span class='k'&gt;print&lt;/span&gt; &lt;span class='n'&gt;out&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;p&gt;This code results in:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;  this char:   is in splitlist
  this char:   is in splitlist
  this char:   is in splitlist
  this char: - is in splitlist
  this char:   is in splitlist
  this char: , is in splitlist
  this char:   is in splitlist
  this char: - is in splitlist
  this char: ! is in splitlist&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;We&amp;#8217;ve got a code block that is executed when &lt;code&gt;char&lt;/code&gt; is equal to a character from &lt;code&gt;splitlist&lt;/code&gt;. We can now implement the code that will add the words to &lt;code&gt;word_list&lt;/code&gt;. Remember that once we&amp;#8217;ve added a word to &lt;code&gt;word_list&lt;/code&gt; and have iterated over the splitting characters between the word just added and the word about to be added, a new list entry needs to be added otherwise we&amp;#8217;ll end up with one great list of words without spaces. First we&amp;#8217;ll acheive this unwanted behaviour as it&amp;#8217;s a step in the right direction, then we&amp;#8217;ll add checks to create new list entries splitting the words properly.&lt;/p&gt;
&lt;div class='highlight'&gt;&lt;pre&gt;&lt;code class='py'&gt;&lt;span class='k'&gt;def&lt;/span&gt; &lt;span class='nf'&gt;split_string&lt;/span&gt;&lt;span class='p'&gt;(&lt;/span&gt;&lt;span class='n'&gt;source&lt;/span&gt;&lt;span class='p'&gt;,&lt;/span&gt;&lt;span class='n'&gt;splitlist&lt;/span&gt;&lt;span class='p'&gt;):&lt;/span&gt;
    &lt;span class='n'&gt;word_list&lt;/span&gt; &lt;span class='o'&gt;=&lt;/span&gt; &lt;span class='p'&gt;[&lt;/span&gt;&lt;span class='s'&gt;&amp;#39;&amp;#39;&lt;/span&gt;&lt;span class='p'&gt;]&lt;/span&gt;

    &lt;span class='k'&gt;for&lt;/span&gt; &lt;span class='n'&gt;char&lt;/span&gt; &lt;span class='ow'&gt;in&lt;/span&gt; &lt;span class='n'&gt;source&lt;/span&gt;&lt;span class='p'&gt;:&lt;/span&gt;
        &lt;span class='k'&gt;if&lt;/span&gt; &lt;span class='n'&gt;char&lt;/span&gt; &lt;span class='ow'&gt;in&lt;/span&gt; &lt;span class='n'&gt;splitlist&lt;/span&gt;&lt;span class='p'&gt;:&lt;/span&gt;
            &lt;span class='k'&gt;print&lt;/span&gt; &lt;span class='s'&gt;&amp;quot;this char: &amp;quot;&lt;/span&gt; &lt;span class='o'&gt;+&lt;/span&gt; &lt;span class='nb'&gt;str&lt;/span&gt;&lt;span class='p'&gt;(&lt;/span&gt;&lt;span class='n'&gt;char&lt;/span&gt;&lt;span class='p'&gt;)&lt;/span&gt; &lt;span class='o'&gt;+&lt;/span&gt; &lt;span class='s'&gt;&amp;quot; is in splitlist&amp;quot;&lt;/span&gt;
        &lt;span class='k'&gt;else&lt;/span&gt;&lt;span class='p'&gt;:&lt;/span&gt;
            &lt;span class='n'&gt;word_list&lt;/span&gt;&lt;span class='p'&gt;[&lt;/span&gt;&lt;span class='o'&gt;-&lt;/span&gt;&lt;span class='mi'&gt;1&lt;/span&gt;&lt;span class='p'&gt;]&lt;/span&gt; &lt;span class='o'&gt;=&lt;/span&gt; &lt;span class='n'&gt;word_list&lt;/span&gt;&lt;span class='p'&gt;[&lt;/span&gt;&lt;span class='o'&gt;-&lt;/span&gt;&lt;span class='mi'&gt;1&lt;/span&gt;&lt;span class='p'&gt;]&lt;/span&gt; &lt;span class='o'&gt;+&lt;/span&gt; &lt;span class='n'&gt;char&lt;/span&gt;
    &lt;span class='c'&gt;# Once we&amp;#39;ve filled word list, we&amp;#39;ll want to return the list containing all the words&lt;/span&gt;
    &lt;span class='k'&gt;return&lt;/span&gt; &lt;span class='n'&gt;word_list&lt;/span&gt;

&lt;span class='n'&gt;out&lt;/span&gt; &lt;span class='o'&gt;=&lt;/span&gt; &lt;span class='n'&gt;split_string&lt;/span&gt;&lt;span class='p'&gt;(&lt;/span&gt;&lt;span class='s'&gt;&amp;quot;This is a test-of the,string separation-code!&amp;quot;&lt;/span&gt;&lt;span class='p'&gt;,&lt;/span&gt; &lt;span class='s'&gt;&amp;quot; ,.!-&amp;quot;&lt;/span&gt;&lt;span class='p'&gt;)&lt;/span&gt;
&lt;span class='k'&gt;print&lt;/span&gt; &lt;span class='n'&gt;out&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;p&gt;&lt;code&gt;word_list&lt;/code&gt;s initialisation value has changed so that it contains an empty string, this will allow us to concatenate characters with it, otherwise an error would be raised if it was simply left empty. In our for loop there is a conditional that will now concatenate non-splitting characters with our string in &lt;code&gt;word_list&lt;/code&gt;. This produces one big string inside the list, our code now has to be modified so that each word gets a new entry in the list.&lt;/p&gt;

&lt;p&gt;To acheive the functionality above, we need to know when we get to splitting characters, we&amp;#8217;ve already got a block of code that deals with this situation, it&amp;#8217;s simply printing lines at the moment, not doing anything useful, we&amp;#8217;ll change that so we know when we&amp;#8217;ve reached a splitting character.&lt;/p&gt;
&lt;div class='highlight'&gt;&lt;pre&gt;&lt;code class='py'&gt;&lt;span class='k'&gt;def&lt;/span&gt; &lt;span class='nf'&gt;split_string&lt;/span&gt;&lt;span class='p'&gt;(&lt;/span&gt;&lt;span class='n'&gt;source&lt;/span&gt;&lt;span class='p'&gt;,&lt;/span&gt;&lt;span class='n'&gt;splitlist&lt;/span&gt;&lt;span class='p'&gt;):&lt;/span&gt;
    &lt;span class='n'&gt;word_list&lt;/span&gt; &lt;span class='o'&gt;=&lt;/span&gt; &lt;span class='p'&gt;[&lt;/span&gt;&lt;span class='s'&gt;&amp;#39;&amp;#39;&lt;/span&gt;&lt;span class='p'&gt;]&lt;/span&gt;

    &lt;span class='n'&gt;at_split&lt;/span&gt; &lt;span class='o'&gt;=&lt;/span&gt; &lt;span class='bp'&gt;False&lt;/span&gt;
    &lt;span class='k'&gt;for&lt;/span&gt; &lt;span class='n'&gt;char&lt;/span&gt; &lt;span class='ow'&gt;in&lt;/span&gt; &lt;span class='n'&gt;source&lt;/span&gt;&lt;span class='p'&gt;:&lt;/span&gt;
        &lt;span class='k'&gt;if&lt;/span&gt; &lt;span class='n'&gt;char&lt;/span&gt; &lt;span class='ow'&gt;in&lt;/span&gt; &lt;span class='n'&gt;splitlist&lt;/span&gt;&lt;span class='p'&gt;:&lt;/span&gt;
            &lt;span class='n'&gt;at_split&lt;/span&gt; &lt;span class='o'&gt;=&lt;/span&gt; &lt;span class='bp'&gt;True&lt;/span&gt;
        &lt;span class='k'&gt;else&lt;/span&gt;&lt;span class='p'&gt;:&lt;/span&gt;
            &lt;span class='n'&gt;at_split&lt;/span&gt; &lt;span class='o'&gt;=&lt;/span&gt; &lt;span class='bp'&gt;False&lt;/span&gt;
            &lt;span class='n'&gt;word_list&lt;/span&gt;&lt;span class='p'&gt;[&lt;/span&gt;&lt;span class='o'&gt;-&lt;/span&gt;&lt;span class='mi'&gt;1&lt;/span&gt;&lt;span class='p'&gt;]&lt;/span&gt; &lt;span class='o'&gt;=&lt;/span&gt; &lt;span class='n'&gt;word_list&lt;/span&gt;&lt;span class='p'&gt;[&lt;/span&gt;&lt;span class='o'&gt;-&lt;/span&gt;&lt;span class='mi'&gt;1&lt;/span&gt;&lt;span class='p'&gt;]&lt;/span&gt; &lt;span class='o'&gt;+&lt;/span&gt; &lt;span class='n'&gt;char&lt;/span&gt;
    &lt;span class='c'&gt;# Once we&amp;#39;ve filled word list, we&amp;#39;ll want to return the list containing all the words&lt;/span&gt;
    &lt;span class='k'&gt;return&lt;/span&gt; &lt;span class='n'&gt;word_list&lt;/span&gt;

&lt;span class='n'&gt;out&lt;/span&gt; &lt;span class='o'&gt;=&lt;/span&gt; &lt;span class='n'&gt;split_string&lt;/span&gt;&lt;span class='p'&gt;(&lt;/span&gt;&lt;span class='s'&gt;&amp;quot;This is a test-of the,string separation-code!&amp;quot;&lt;/span&gt;&lt;span class='p'&gt;,&lt;/span&gt; &lt;span class='s'&gt;&amp;quot; ,.!-&amp;quot;&lt;/span&gt;&lt;span class='p'&gt;)&lt;/span&gt;
&lt;span class='k'&gt;print&lt;/span&gt; &lt;span class='n'&gt;out&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;p&gt;Here we&amp;#8217;ve intialised &lt;code&gt;at_split&lt;/code&gt; outside of the for loop as it&amp;#8217;s going to be used in the else statement and hence has to be accessible by the if and else statements. This change hasn&amp;#8217;t affected the functionality of &lt;code&gt;split_string&lt;/code&gt; yet, but it&amp;#8217;s a step in the right direction, we now have a variable that can be used to execute code blocks when an end of word is reached, which is the last step to reproducing the desired behaviour.&lt;/p&gt;
&lt;div class='highlight'&gt;&lt;pre&gt;&lt;code class='py'&gt;&lt;span class='k'&gt;def&lt;/span&gt; &lt;span class='nf'&gt;split_string&lt;/span&gt;&lt;span class='p'&gt;(&lt;/span&gt;&lt;span class='n'&gt;source&lt;/span&gt;&lt;span class='p'&gt;,&lt;/span&gt;&lt;span class='n'&gt;splitlist&lt;/span&gt;&lt;span class='p'&gt;):&lt;/span&gt;
    &lt;span class='n'&gt;word_list&lt;/span&gt; &lt;span class='o'&gt;=&lt;/span&gt; &lt;span class='p'&gt;[&lt;/span&gt;&lt;span class='s'&gt;&amp;#39;&amp;#39;&lt;/span&gt;&lt;span class='p'&gt;]&lt;/span&gt;

    &lt;span class='n'&gt;at_split&lt;/span&gt; &lt;span class='o'&gt;=&lt;/span&gt; &lt;span class='bp'&gt;False&lt;/span&gt;
    &lt;span class='k'&gt;for&lt;/span&gt; &lt;span class='n'&gt;char&lt;/span&gt; &lt;span class='ow'&gt;in&lt;/span&gt; &lt;span class='n'&gt;source&lt;/span&gt;&lt;span class='p'&gt;:&lt;/span&gt;
        &lt;span class='k'&gt;if&lt;/span&gt; &lt;span class='n'&gt;char&lt;/span&gt; &lt;span class='ow'&gt;in&lt;/span&gt; &lt;span class='n'&gt;splitlist&lt;/span&gt;&lt;span class='p'&gt;:&lt;/span&gt;
            &lt;span class='n'&gt;at_split&lt;/span&gt; &lt;span class='o'&gt;=&lt;/span&gt; &lt;span class='bp'&gt;True&lt;/span&gt;
        &lt;span class='k'&gt;else&lt;/span&gt;&lt;span class='p'&gt;:&lt;/span&gt;
            &lt;span class='k'&gt;if&lt;/span&gt; &lt;span class='n'&gt;at_split&lt;/span&gt;&lt;span class='p'&gt;:&lt;/span&gt;
                &lt;span class='c'&gt;# We&amp;#39;ve now reached the start of the word, time to make a new element in the list&lt;/span&gt;
                &lt;span class='n'&gt;word_list&lt;/span&gt;&lt;span class='o'&gt;.&lt;/span&gt;&lt;span class='n'&gt;append&lt;/span&gt;&lt;span class='p'&gt;(&lt;/span&gt;&lt;span class='n'&gt;char&lt;/span&gt;&lt;span class='p'&gt;)&lt;/span&gt; &lt;span class='c'&gt;# This creates a new element in the array with the value of &amp;#39;char&amp;#39;&lt;/span&gt;
                &lt;span class='c'&gt;# Reset at_split so no more elements are created until we reach a new word&lt;/span&gt;
                &lt;span class='n'&gt;at_split&lt;/span&gt; &lt;span class='o'&gt;=&lt;/span&gt; &lt;span class='bp'&gt;False&lt;/span&gt;
            &lt;span class='k'&gt;else&lt;/span&gt;&lt;span class='p'&gt;:&lt;/span&gt;
                &lt;span class='c'&gt;# Char is not in splitlist, and we&amp;#39;re not at the start of a word, so simply concatenate&lt;/span&gt;
                &lt;span class='c'&gt;# char with the last entry in word_list&lt;/span&gt;
                &lt;span class='n'&gt;word_list&lt;/span&gt;&lt;span class='p'&gt;[&lt;/span&gt;&lt;span class='o'&gt;-&lt;/span&gt;&lt;span class='mi'&gt;1&lt;/span&gt;&lt;span class='p'&gt;]&lt;/span&gt; &lt;span class='o'&gt;=&lt;/span&gt; &lt;span class='n'&gt;word_list&lt;/span&gt;&lt;span class='p'&gt;[&lt;/span&gt;&lt;span class='o'&gt;-&lt;/span&gt;&lt;span class='mi'&gt;1&lt;/span&gt;&lt;span class='p'&gt;]&lt;/span&gt; &lt;span class='o'&gt;+&lt;/span&gt; &lt;span class='n'&gt;char&lt;/span&gt;

    &lt;span class='c'&gt;# Once we&amp;#39;ve filled word list, we&amp;#39;ll want to return the list containing all the words&lt;/span&gt;
    &lt;span class='k'&gt;return&lt;/span&gt; &lt;span class='n'&gt;word_list&lt;/span&gt;

&lt;span class='n'&gt;out&lt;/span&gt; &lt;span class='o'&gt;=&lt;/span&gt; &lt;span class='n'&gt;split_string&lt;/span&gt;&lt;span class='p'&gt;(&lt;/span&gt;&lt;span class='s'&gt;&amp;quot;This is a test-of the,string separation-code!&amp;quot;&lt;/span&gt;&lt;span class='p'&gt;,&lt;/span&gt; &lt;span class='s'&gt;&amp;quot; ,.!-&amp;quot;&lt;/span&gt;&lt;span class='p'&gt;)&lt;/span&gt;
&lt;span class='k'&gt;print&lt;/span&gt; &lt;span class='n'&gt;out&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;p&gt;Finally, we have the behaviour, the code above prints: &lt;span&gt;&amp;#8216;This&amp;#8217;, &amp;#8216;is&amp;#8217;, &amp;#8216;a&amp;#8217;, &amp;#8216;test&amp;#8217;, &amp;#8216;of&amp;#8217;, &amp;#8216;the&amp;#8217;, &amp;#8216;string&amp;#8217;, &amp;#8216;separation&amp;#8217;, &amp;#8216;code&amp;#8217;&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;Mission accomplished.&lt;/p&gt;

&lt;p&gt;I&amp;#8217;ve also used Python Tutor&amp;#8217;s visualise program to show how the code is executed: &lt;a href='http://goo.gl/GSRHJ'&gt;Visualised&lt;/a&gt;. I found this helpful to understand what was happening as words were ending and new elements in the list were being created.&lt;/p&gt;</content>
 </entry>
 
 <entry>
   <title>Processing and XMonad</title>
   <link href="http://willprice.org//programming/2012/11/07/processing-and-xmonad.html"/>
   <updated>2012-11-07T00:00:00+00:00</updated>
   <id>http://willprice.org/programming/2012/11/07/processing-and-xmonad</id>
   <content type="html">&lt;p&gt;After having put up with problems with the Processing IDE for quite a while, I could no longer take not being able to focus the text area without clicking on the stop button.&lt;/p&gt;

&lt;p&gt;It transpires this is an issue caused by XMonad&amp;#8217;s handling of Java swing applications as noted by Krzysztof Krason in a &lt;a href='http://youtrack.jetbrains.com/issue/IDEA-65637'&gt;thread&lt;/a&gt; in regard to the IDEA IDE (which also uses Java swing).&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;It&amp;#8217;s not a problem with Intellij but with XMonad, it has problems with java swing applications. The solution is to use something like this in to add &amp;#8220;import XMonad.Hooks.ICCCMFocus&amp;#8221; and in your logHook add &amp;#8220;takeTopFocus&amp;#8221;.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;So the solution is remarkable simple. Just add these lines to your xmonad.hs file:&lt;/p&gt;
&lt;div class='highlight'&gt;&lt;pre&gt;&lt;code class='hs'&gt;&lt;span class='c1'&gt;-- After import statements&lt;/span&gt;
&lt;span class='kr'&gt;import&lt;/span&gt; &lt;span class='nn'&gt;XMonad.Hooks.ICCCMFocus&lt;/span&gt; 

&lt;span class='c1'&gt;-- If you&amp;#39;re using default loghook&lt;/span&gt;
&lt;span class='nf'&gt;loghook&lt;/span&gt; &lt;span class='ow'&gt;=&lt;/span&gt; &lt;span class='n'&gt;takeTopFocus&lt;/span&gt;

&lt;span class='c1'&gt;-- Else use&lt;/span&gt;
&lt;span class='nf'&gt;loghook&lt;/span&gt; &lt;span class='ow'&gt;=&lt;/span&gt; &lt;span class='o'&gt;...&lt;/span&gt;&lt;span class='n'&gt;blah&lt;/span&gt;&lt;span class='o'&gt;...&lt;/span&gt; &lt;span class='o'&gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class='n'&gt;takeTopFocus&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;</content>
 </entry>
 
 <entry>
   <title>Gmail Notifier</title>
   <link href="http://willprice.org//2012/01/07/gmail-notifier.html"/>
   <updated>2012-01-07T00:00:00+00:00</updated>
   <id>http://willprice.org/2012/01/07/gmail-notifier</id>
   <content type="html">&lt;div class='post'&gt;
4 Years ago Tom Paton posted &lt;a href=&quot;http://successlessness.blogspot.com/2007/07/ambient-email-notifier.html&quot;&gt;this&lt;/a&gt;&amp;nbsp;and I asked him about his code, thus prompting him to post &lt;a href=&quot;http://successlessness.blogspot.com/2008/02/ambient-email-notifier-some-code.html&quot;&gt;this&lt;/a&gt;. 4 Years later, now finally equipped with some know how and a little bit more experience with microcontrollers and programming, I thought this a fairly ideal project to have a bash at.&lt;br /&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;div&gt;I adapted his python code to something a little more appropriate for my usage:&lt;br /&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;script src=&quot;https://gist.github.com/1579856.js&quot;&gt; &lt;/script&gt;&lt;/div&gt;&lt;div&gt;(replace &lt;b&gt;username &lt;/b&gt;and &lt;b&gt;password&lt;/b&gt;&amp;nbsp;with your username and password. You might also need to fiddle with the serial port I've got mine setup as /dev/ttyUSB1)&lt;br /&gt;&lt;br /&gt;Here's the Arduino code:&lt;br /&gt;&lt;br /&gt;&lt;/div&gt;&lt;div&gt;&lt;script src=&quot;https://gist.github.com/1575531.js&quot;&gt;  &lt;/script&gt;I'll be updating this post as I go, with pictures and videos. I've currently put a servo in a little mailbox made out of card and when I have an email the flag is raised. I'm working on getting the right sized enclosure and am currently using a Arduino Pro Mini which has no USB interface and I have to work out how to remedy this. Admittedly, this is a total waste of an Arduino as it's overkill for this project, but at the moment I don't have enough time to learn how to write C code for AVR micros, but when I do, I'll make this a little less wasteful and hopefully use a micro with USB support built in. But for the time being -- Arduino and USB to UART Adapter.&lt;/div&gt;&lt;/div&gt;
&lt;h2&gt;Comments&lt;/h2&gt;
&lt;div class='comments'&gt;
&lt;div class='comment'&gt;
&lt;div class='author'&gt;Will Price&lt;/div&gt;
&lt;div class='content'&gt;
Hi fatmi,&lt;br /&gt;thanks for the comments. The python code is a bit shoddy, if you unplug the Arduino it crashes so I need to fiddle around and start adding error exceptions to handle these events.&lt;br /&gt;At the moment I&amp;#39;m busy with exams hence I have very little time to work on my hobbies!&lt;/div&gt;
&lt;/div&gt;
&lt;div class='comment'&gt;
&lt;div class='author'&gt;fatmi&lt;/div&gt;
&lt;div class='content'&gt;
Nice work.&lt;br /&gt;&lt;br /&gt;&lt;a href=&quot;http://www.jayconsystems.com&quot; rel=&quot;nofollow&quot;&gt; Arduino &lt;/a&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
</content>
 </entry>
 
 <entry>
   <title>TP-Link WR703N, OpenWRT and MPD</title>
   <link href="http://willprice.org//2011/12/27/tp-link-wr703n-openwrt-mpd.html"/>
   <updated>2011-12-27T00:00:00+00:00</updated>
   <id>http://willprice.org/2011/12/27/tp-link-wr703n-openwrt-mpd</id>
   <content type="html">&lt;p&gt;Finally, a post&amp;#8230;&lt;/p&gt;

&lt;p&gt;I bought a &lt;a href='http://www.volumerates.com/product/genuine-tp-link-tl-wr703n-150m-11n-mini-wifi-wireless-router-for-instant-wifi-connection-99273'&gt;TP-Link WR703N&lt;/a&gt;, it&amp;#8217;s a little router meant to be used in conjunction with a 3G Modem, it works as an access point broadcasting a wireless connection allowing multiple devices to utilize the modem at once (quite a clever idea, however, not one I&amp;#8217;m interested in using), hence I decided to flash it with &lt;a href='https://openwrt.org/'&gt;OpenWRT&lt;/a&gt;&lt;/p&gt;

&lt;h4 id='specs'&gt;Specs:&lt;/h4&gt;

&lt;ul&gt;
&lt;li&gt;RAM - 32Mb&lt;/li&gt;

&lt;li&gt;ROM - 4Mb&lt;/li&gt;

&lt;li&gt;USB port (USB2)&lt;/li&gt;

&lt;li&gt;CPU - Atheros AR7240 - 400Mhz&lt;/li&gt;

&lt;li&gt;Wireless - Atheros AR9331 - b/g/n&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Powered by a micro usb port, 5.7cm x 5.7cm, serial interface. (These are just the basics, more &lt;a href='http://wiki.openwrt.org/toh/tp-link/tl-wr703n'&gt;here&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;OpenWRT Install: The device comes preinstalled with Chinese firmware, I connected the router via ethernet and configured Arch to have the IP 192.168.1.2 (in /etc/rc.conf) but you could also easily use wifi to upload the new firmware.&lt;/p&gt;

&lt;p&gt;After connecting to the router, keep hovering over the menu items, the page file names are in English, keep expanding the drop down menus until you find one with a page name similar to &amp;#8216;software upgrade&amp;#8217;, something along those lines (I do believe it&amp;#8217;s in one of the last sections). Go to the OpenWRT wiki and download the &amp;#8216;vanilla&amp;#8217; firmware for the router, upload this, once the router has upgraded the firmware, it should reboot.&lt;/p&gt;

&lt;p&gt;Having now installed the OpenWRT firmware, you can connect to the router via the ethernet port if you configure your computer&amp;#8217;s IP to be 192.168.1.2, telnet into the router using: telnet 192.168.1.1 There you are presented with the CLI of the router where you can start manipulating things. Use opkg update to update the packages list and opkg install &lt;em&gt;package name&lt;/em&gt; to install applications&lt;/p&gt;

&lt;p&gt;These are simply the basics and much more informative instructions can be found on the OpenWRT forums and wiki.&lt;/p&gt;

&lt;h4 id='openwrt_configuration'&gt;OpenWRT Configuration:&lt;/h4&gt;

&lt;p&gt;I wanted to use the router as a wireless client (i.e. similar to a computer), I used the following network configurations&lt;/p&gt;
&lt;div class='highlight'&gt;&lt;pre&gt;&lt;code class='sh'&gt;&lt;span class='c'&gt;# /etc/config/network&lt;/span&gt;

config &lt;span class='s1'&gt;&amp;#39;interface&amp;#39;&lt;/span&gt; &lt;span class='s1'&gt;&amp;#39;loopback&amp;#39;&lt;/span&gt;
 option &lt;span class='s1'&gt;&amp;#39;ifname&amp;#39;&lt;/span&gt; &lt;span class='s1'&gt;&amp;#39;lo&amp;#39;&lt;/span&gt;
 option &lt;span class='s1'&gt;&amp;#39;proto&amp;#39;&lt;/span&gt; &lt;span class='s1'&gt;&amp;#39;static&amp;#39;&lt;/span&gt;
 option &lt;span class='s1'&gt;&amp;#39;ipaddr&amp;#39;&lt;/span&gt; &lt;span class='s1'&gt;&amp;#39;127.0.0.1&amp;#39;&lt;/span&gt;
 option &lt;span class='s1'&gt;&amp;#39;netmask&amp;#39;&lt;/span&gt; &lt;span class='s1'&gt;&amp;#39;255.0.0.0&amp;#39;&lt;/span&gt;


config &lt;span class='s1'&gt;&amp;#39;interface&amp;#39;&lt;/span&gt; &lt;span class='s1'&gt;&amp;#39;lan&amp;#39;&lt;/span&gt;
 option &lt;span class='s1'&gt;&amp;#39;ifname&amp;#39;&lt;/span&gt; &lt;span class='s1'&gt;&amp;#39;eth0&amp;#39;&lt;/span&gt;
 option &lt;span class='s1'&gt;&amp;#39;type&amp;#39;&lt;/span&gt; &lt;span class='s1'&gt;&amp;#39;bridge&amp;#39;&lt;/span&gt;
 option &lt;span class='s1'&gt;&amp;#39;proto&amp;#39;&lt;/span&gt; &lt;span class='s1'&gt;&amp;#39;static&amp;#39;&lt;/span&gt;
 option &lt;span class='s1'&gt;&amp;#39;ipaddr&amp;#39;&lt;/span&gt; &lt;span class='s1'&gt;&amp;#39;192.168.1.1&amp;#39;&lt;/span&gt;
 option &lt;span class='s1'&gt;&amp;#39;netmask&amp;#39;&lt;/span&gt; &lt;span class='s1'&gt;&amp;#39;255.255.255.0&amp;#39;&lt;/span&gt;


config &lt;span class='s1'&gt;&amp;#39;interface&amp;#39;&lt;/span&gt; &lt;span class='s1'&gt;&amp;#39;wan&amp;#39;&lt;/span&gt;
 option &lt;span class='s1'&gt;&amp;#39;proto&amp;#39;&lt;/span&gt; &lt;span class='s1'&gt;&amp;#39;dhcp&amp;#39;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;&lt;div class='highlight'&gt;&lt;pre&gt;&lt;code class='sh'&gt;&lt;span class='c'&gt;# /etc/config/wireless&lt;/span&gt;

config &lt;span class='s1'&gt;&amp;#39;wifi-device&amp;#39;&lt;/span&gt; &lt;span class='s1'&gt;&amp;#39;radio0&amp;#39;&lt;/span&gt;
 option &lt;span class='s1'&gt;&amp;#39;type&amp;#39;&lt;/span&gt; &lt;span class='s1'&gt;&amp;#39;mac80211&amp;#39;&lt;/span&gt;
 option &lt;span class='s1'&gt;&amp;#39;channel&amp;#39;&lt;/span&gt; &lt;span class='s1'&gt;&amp;#39;11&amp;#39;&lt;/span&gt;
 option &lt;span class='s1'&gt;&amp;#39;macaddr&amp;#39;&lt;/span&gt; &lt;span class='s1'&gt;&amp;#39;38:83:45:a2:14:18&amp;#39;&lt;/span&gt;
 option &lt;span class='s1'&gt;&amp;#39;hwmode&amp;#39;&lt;/span&gt; &lt;span class='s1'&gt;&amp;#39;11ng&amp;#39;&lt;/span&gt;
 option &lt;span class='s1'&gt;&amp;#39;htmode&amp;#39;&lt;/span&gt; &lt;span class='s1'&gt;&amp;#39;HT20&amp;#39;&lt;/span&gt;
 list &lt;span class='s1'&gt;&amp;#39;ht_capab&amp;#39;&lt;/span&gt; &lt;span class='s1'&gt;&amp;#39;SHORT-GI-20&amp;#39;&lt;/span&gt;
 list &lt;span class='s1'&gt;&amp;#39;ht_capab&amp;#39;&lt;/span&gt; &lt;span class='s1'&gt;&amp;#39;SHORT-GI-40&amp;#39;&lt;/span&gt;
 list &lt;span class='s1'&gt;&amp;#39;ht_capab&amp;#39;&lt;/span&gt; &lt;span class='s1'&gt;&amp;#39;RX-STBC1&amp;#39;&lt;/span&gt;
 list &lt;span class='s1'&gt;&amp;#39;ht_capab&amp;#39;&lt;/span&gt; &lt;span class='s1'&gt;&amp;#39;DSSS_CCK-40&amp;#39;&lt;/span&gt;

config &lt;span class='s1'&gt;&amp;#39;wifi-iface&amp;#39;&lt;/span&gt;
 option &lt;span class='s1'&gt;&amp;#39;device&amp;#39;&lt;/span&gt; &lt;span class='s1'&gt;&amp;#39;radio0&amp;#39;&lt;/span&gt;
 option &lt;span class='s1'&gt;&amp;#39;network&amp;#39;&lt;/span&gt; &lt;span class='s1'&gt;&amp;#39;wan&amp;#39;&lt;/span&gt; &lt;span class='c'&gt;#Set the adapter to act as a wide area network -- not sure why&lt;/span&gt;
 option &lt;span class='s1'&gt;&amp;#39;ssid&amp;#39;&lt;/span&gt; &lt;span class='s1'&gt;&amp;#39;Price LAN&amp;#39;&lt;/span&gt;
 option &lt;span class='s1'&gt;&amp;#39;key&amp;#39;&lt;/span&gt; &lt;span class='s1'&gt;&amp;#39;*******&amp;#39;&lt;/span&gt;
 option &lt;span class='s1'&gt;&amp;#39;encryption&amp;#39;&lt;/span&gt; &lt;span class='s1'&gt;&amp;#39;psk2&amp;#39;&lt;/span&gt; &lt;span class='c'&gt;# My network uses psk2 security&lt;/span&gt;
 option &lt;span class='s1'&gt;&amp;#39;mode&amp;#39;&lt;/span&gt; &lt;span class='s1'&gt;&amp;#39;sta&amp;#39;&lt;/span&gt; &lt;span class='c'&gt;#Setup client mode&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;p&gt;In the section &amp;#8216;config &amp;#8216;wifi-iface&amp;#8221; I&amp;#8217;ve setup the router to act as a client by setting the &amp;#8216;mode&amp;#8217; to &amp;#8216;sta&amp;#8217; which sets the router to act as a client rather than an access point.&lt;/p&gt;

&lt;h4 id='usb_support'&gt;USB Support:&lt;/h4&gt;

&lt;p&gt;I needed USB support as the router only has a 4mb flash which isn&amp;#8217;t sufficient to install transmission, mpd, mpc etc. I updated /etc/opkg.conf to remedy this (look at the wiki page on opkg, there is a section on how to do this).&lt;/p&gt;

&lt;p&gt;Now I could install to my memory stick using the command opkg -d usb install &lt;em&gt;package name&lt;/em&gt; This usually works fairly well, I had to update my PATH variable in /etc/profile to reflect the new install directories.&lt;/p&gt;

&lt;p&gt;I&amp;#8217;ve also played around in /etc/rc.local setting up some startup applications. I&amp;#8217;ve got mpd, transmission-daemon and mpc (adding playlists) on startup.&lt;/p&gt;

&lt;h4 id='links'&gt;Links:&lt;/h4&gt;

&lt;ul&gt;
&lt;li&gt;&lt;span&gt;1&lt;/span&gt; - $22/£15 - &lt;a href='http://www.volumerates.com/product/genuine-tp-link-tl-wr703n-150m-11n-mini-wifi-wireless-router-for-instant-wifi-connection-99273'&gt;http://www.volumerates.com/product/genuine-tp-link-tl-wr703n-150m-11n-mini-wifi-wireless-router-for-instant-wifi-connection-99273&lt;/a&gt;&lt;/li&gt;

&lt;li&gt;&lt;span&gt;2&lt;/span&gt; - &lt;a href='https://openwrt.org/'&gt;https://openwrt.org/&lt;/a&gt;&lt;/li&gt;

&lt;li&gt;&lt;span&gt;3&lt;/span&gt; - OpenWRT wiki page on WR703N - &lt;a href='http://wiki.openwrt.org/toh/tp-link/tl-wr703n'&gt;http://wiki.openwrt.org/toh/tp-link/tl-wr703n&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;I might continue to update this post as I progress with the project. I aim to use this router to act as a internet radio, I&amp;#8217;ll probably use an arduino to interface it with an LCD and rotary encoder.&lt;/p&gt;</content>
 </entry>
 
 <entry>
   <title>A little bit about Arch Linux</title>
   <link href="http://willprice.org//Linux/Arch/2011/08/17/little-bit-about-arch-linux.html"/>
   <updated>2011-08-17T00:00:00+01:00</updated>
   <id>http://willprice.org/Linux/Arch/2011/08/17/little-bit-about-arch-linux</id>
   <content type="html">&lt;div class='post'&gt;
&lt;div&gt;&lt;span class=&quot;Apple-style-span&quot;&gt;I've recently switched from Ubuntu to Arch, which I have always wanted to do but time restrictions have been in the &lt;/span&gt;way, since it's summer I've been able to dedicate a good chunk of time to do this. I have a few things I'd like to note about it for myself as a historical record.&lt;/div&gt;&lt;div&gt;
&lt;br /&gt;&lt;/div&gt;&lt;div&gt;&lt;span class=&quot;Apple-style-span&quot;&gt;The installer did not work for me on the &lt;a href=&quot;http://www.archlinux.org/download/&quot;&gt;official download page&lt;/a&gt;. I downloaded multiple isos from the &lt;a href=&quot;http://releng.archlinux.org/&quot;&gt;releng arch site&lt;/a&gt; which proved futile, again with installer problems, I finally downloaded 08.15 which worked flawlessly from a local-core install (I didn't want to download the packages from the internet - netinstall as I have a rubbish connection). After this install I had my arch installation up and running, command line only using the nouveau kernel module I do believe (The terminal was full screen, which isn't the case without nouveau, nvidia doesn't run it fullscreen either)&lt;/span&gt;&lt;/div&gt;&lt;div&gt;&lt;span class=&quot;Apple-style-span&quot;&gt;
&lt;br /&gt;&lt;/span&gt;&lt;/div&gt;&lt;div&gt;&lt;span class=&quot;Apple-style-span&quot;&gt;A few bits and pieces on config files:&lt;/span&gt;&lt;/div&gt;&lt;div&gt;&lt;span class=&quot;Apple-style-span&quot;&gt;Added net-profiles and net-cfg to start my wireless connection at boot up (init level 3) that way I wouldn't have to touch it when I launch X. I had to add a config file in /etc/network.d/ for netcfg to work, which was based on wireless-wpa in the examples folder, this was easy, added pricelan, the name of my netcfg profile to rc.conf in the NETWORKS=() section. Installed dbus and ntfs-3g, the latter I edited my fstab to automatically mount on startup. I had to add avahi-daemon to daemons in rc.conf for rhythmbox to start properly otherwise it would take ages to start up.&lt;/span&gt;&lt;/div&gt;&lt;div&gt;&lt;span class=&quot;Apple-style-span&quot;&gt;
&lt;br /&gt;&lt;/span&gt;&lt;/div&gt;&lt;div&gt;&lt;span class=&quot;Apple-style-span&quot;&gt;So now I wanted to setup my system, for the basics I Installed:&lt;/span&gt;&lt;/div&gt;&lt;div&gt;&lt;span class=&quot;Apple-style-span&quot;&gt;- Xorg &amp;amp; nvidia for a graphical interface&lt;/span&gt;&lt;/div&gt;&lt;div&gt;&lt;span class=&quot;Apple-style-span&quot;&gt;- Xmonad for window managing (wonderful!)&lt;/span&gt;&lt;/div&gt;&lt;div&gt;&lt;span class=&quot;Apple-style-span&quot;&gt;- Links to browse the internet from the command line so I could read the wiki as I installed xorg etc, highly recommended.&lt;/span&gt;&lt;/div&gt;&lt;div&gt;&lt;span class=&quot;Apple-style-span&quot;&gt;- Dmenu to launch programs in xmonad&lt;/span&gt;&lt;/div&gt;&lt;div&gt;&lt;span class=&quot;Apple-style-span&quot;&gt;
&lt;br /&gt;&lt;/span&gt;&lt;/div&gt;&lt;div&gt;&lt;span class=&quot;Apple-style-span&quot;&gt;Once I could launch X using the basic twm wm, I changed to xmonad, I did this by changing my ~/.xinitrc to launch xmonad, just placing 'xmonad' at the bottom of the file, nice and easy. When you launch X this time, you'll notice you just have a cross, press 'Alt-P' to launch d-menu and then some applications, 'man xmonad' has a good summary of the window tiling algorithm commands.&lt;/span&gt;&lt;/div&gt;&lt;div&gt;&lt;span class=&quot;Apple-style-span&quot;&gt;
&lt;br /&gt;&lt;/span&gt;&lt;/div&gt;&lt;div&gt;&lt;span class=&quot;Apple-style-span&quot;&gt;Now to install my essential applications:&lt;/span&gt;&lt;/div&gt;&lt;div&gt;&lt;span class=&quot;Apple-style-span&quot;&gt;- Chromium for web browsing&lt;/span&gt;&lt;/div&gt;&lt;div&gt;&lt;span class=&quot;Apple-style-span&quot;&gt;- Rhythmbox for music&lt;/span&gt;&lt;/div&gt;&lt;div&gt;&lt;span class=&quot;Apple-style-span&quot;&gt;- gnome-terminal&lt;/span&gt;&lt;/div&gt;&lt;div&gt;&lt;span class=&quot;Apple-style-span&quot;&gt;- Nautilus for file browsing&lt;/span&gt;&lt;/div&gt;&lt;div&gt;&lt;span class=&quot;Apple-style-span&quot;&gt;
&lt;br /&gt;&lt;/span&gt;&lt;/div&gt;&lt;div&gt;&lt;span class=&quot;Apple-style-span&quot;&gt;After installing these I couldn't get chromium to launch nautilus from the &quot;Show in folder&quot; dialog in downloads, I ammended this by installing 'perl-file-mimeinfo' which has the command 'mimeopen', it handles all the mimetypes so when you open files, it opens the proper program. After installing this chromium launched fine, however I had added the following lines to &lt;/span&gt;&lt;/div&gt;&lt;div&gt;&lt;span class=&quot;Apple-style-span&quot;&gt;~/.local/share/applications/defaults.list    and    ~/.local/share/applications/mimeapps.list
&lt;br /&gt;&quot;inode/directory=nautilus-folder-handler.desktop&quot;&lt;/span&gt;&lt;/div&gt;&lt;div&gt;&lt;span class=&quot;Apple-style-span&quot;&gt;which may be needed, I don't know, I didn't try it without adding these lines.&lt;/span&gt;&lt;/div&gt;&lt;div&gt;&lt;span class=&quot;Apple-style-span&quot;&gt;
&lt;br /&gt;&lt;/span&gt;&lt;/div&gt;&lt;div&gt;&lt;span class=&quot;Apple-style-span&quot;&gt;Rhythmbox won't open .pls files in the radio section as some gnome services aren't running, I know it isn't gnome-settings-daemon, or obviously the keyring daemon. I'll have to look further into this to try and remedy the issue, I hope to find the right service to run rather than running xmonad ontop of gnome, I prefer xmonad neat, gnome3 is horrid. Anyway, I don't need a DE, WM will do me fine.&lt;/span&gt;&lt;/div&gt;&lt;div&gt;&lt;span class=&quot;Apple-style-span&quot;&gt;
&lt;br /&gt;&lt;/span&gt;&lt;/div&gt;&lt;div&gt;&lt;span class=&quot;Apple-style-span&quot;&gt;I'm still fiddling about with setting the wallpaper in xmonad, I'm using &quot;xloadimage -onroot -fullscreen $path to image&quot; at the moment which isn't stretching my 1980x1200 wallpapers to 1980x1080, A bit more exploration is required on my part to sort this out, once I have I'll be adding it to my ~/.xinitrc so when X starts my wallpaper will be set.&lt;/span&gt;&lt;/div&gt;&lt;div&gt;&lt;span class=&quot;Apple-style-span&quot;&gt;
&lt;br /&gt;I have dipped my toes into xmonad configuration but the haskell syntax is a bit off-putting and I'm struggling with it at the moment but &lt;a href=&quot;http://haskell.org/haskellwiki/Xmonad/Config_archive/John_Goerzen's_Configuration&quot;&gt;this&lt;/a&gt; holds your hand quite well and I'm currently going through it. The xmonad wiki is pretty handy as well, I think this will take a while to produce decent results though.&lt;/span&gt;&lt;/div&gt;&lt;div&gt;&lt;span class=&quot;Apple-style-span&quot;&gt;
&lt;br /&gt;&lt;/span&gt;&lt;/div&gt;&lt;div&gt;&lt;span class=&quot;Apple-style-span&quot;&gt;
&lt;br /&gt;I'd finally like to say I only switched to arch based on it's &lt;a href=&quot;https://wiki.archlinux.org/index.php/The_Arch_Way&quot;&gt;philosophy&lt;/a&gt; and &lt;a href=&quot;https://wiki.archlinux.org/index.php/Main_Page&quot;&gt;beautiful wiki&lt;/a&gt;.&lt;/span&gt;&lt;/div&gt;&lt;div&gt;&lt;span class=&quot;Apple-style-span&quot;&gt;
&lt;br /&gt;&lt;/span&gt;&lt;/div&gt;&lt;div&gt;&lt;span class=&quot;Apple-style-span&quot;&gt;P.s. man does&lt;a href=&quot;https://github.com/mojombo/jekyll&quot;&gt; jekyll &lt;/a&gt;look good...&lt;/span&gt;&lt;/div&gt;&lt;/div&gt;
&lt;h2&gt;Comments&lt;/h2&gt;
&lt;div class='comments'&gt;
&lt;div class='comment'&gt;
&lt;div class='author'&gt;Will Price&lt;/div&gt;
&lt;div class='content'&gt;
I am indeed, it&amp;#39;s very good, I would never learn so much if I were still using Ubuntu. I can see why both exist, I love Ubuntu for it&amp;#39;s simplicity in terms of setup, but then I love Arch for it&amp;#39;s simplicity in terms of configuration and ease to delve into your system, none of the details are abstracted away from you, they&amp;#39;re all there for you to have a look at and play with, on the whole, I prefer the latter, I find my computer knowledge has vastly increased since using Arch and I&amp;#39;m much less timid trying out things that I would have otherwise found daunting!&lt;br /&gt;&lt;br /&gt;Have you any experiences with Arch yourself?&lt;/div&gt;
&lt;/div&gt;
&lt;div class='comment'&gt;
&lt;div class='author'&gt;Jake&lt;/div&gt;
&lt;div class='content'&gt;
Are you still using Arch, how are you finding it?&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
</content>
 </entry>
 
 <entry>
   <title>Boolean Logic in electronics</title>
   <link href="http://willprice.org//2011/05/14/boolean-logic-in-electronics.html"/>
   <updated>2011-05-14T00:00:00+01:00</updated>
   <id>http://willprice.org/2011/05/14/boolean-logic-in-electronics</id>
   <content type="html">&lt;div class='post'&gt;
I stumbled across this &lt;a href=&quot;http://www.antonine-education.co.uk/&quot;&gt;great website&lt;/a&gt; in regards to basic electronics (for the AS Electronics course in the UK). Alas at the moment I don't have time to do much electronics or programming as I'm just about to start a month of exams, come the 20th June, I shall be back with hopefully some interesting posts!&lt;br /&gt;See you then..&lt;/div&gt;
</content>
 </entry>
 
 <entry>
   <title>PCB etch tank</title>
   <link href="http://willprice.org//PCB/2011/05/06/pcb-etch-tank-update.html"/>
   <updated>2011-05-06T00:00:00+01:00</updated>
   <id>http://willprice.org/PCB/2011/05/06/pcb-etch-tank-update</id>
   <content type="html">&lt;div class='post'&gt;
&lt;div style=&quot;text-align: left;&quot;&gt;So I've got hold of some of the things I need, aquarium heater, bubbler and check valves, the chemicals are on there way and should be here soon, I'm looking forward to testing some things out. The immediate problem, being a student, I am somewhat poor and I have slightly broken my aquarium heater (more on that later in this post) so things progress slowly (I also have exams and &lt;i&gt;should be &lt;/i&gt;focussing on them, but I'm not, because I like electronics more and I'm dedicated to my hobby...)&lt;/div&gt;&lt;div style=&quot;text-align: left;&quot;&gt;&lt;br /&gt;&lt;/div&gt;&lt;div style=&quot;text-align: left;&quot;&gt;Here are a few pictures of the the parts:&lt;/div&gt;&lt;table style=&quot;width: auto;&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td&gt;&lt;a href=&quot;https://picasaweb.google.com/lh/photo/MaH3V8uwfP1VCvv3BAN9l0gjfRgjgzLDNPYATrcVkss?feat=embedwebsite&quot;&gt;&lt;img height=&quot;400&quot; src=&quot;https://lh4.googleusercontent.com/-VikNZxXst0M/TcSBy9oIeXI/AAAAAAAAA1Q/shSowZCoyYQ/s400/DSCF3929.JPG&quot; width=&quot;300&quot; /&gt;&lt;/a&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td style=&quot;font-family: arial,sans-serif; font-size: 11px; text-align: right;&quot;&gt;From &lt;a href=&quot;https://picasaweb.google.com/105545134685620195788/PCBEtchTank?authuser=0&amp;amp;feat=embedwebsite&quot;&gt;PCB etch tank&lt;/a&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;table style=&quot;width: auto;&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td&gt;&lt;a href=&quot;https://picasaweb.google.com/lh/photo/REQMWX-Vla-ev3WxnLdc6kgjfRgjgzLDNPYATrcVkss?feat=embedwebsite&quot;&gt;&lt;img height=&quot;400&quot; src=&quot;https://lh6.googleusercontent.com/-09Ma3i3p9w8/TcSB3z6GDSI/AAAAAAAAA1Q/5LcKdzs__mI/s400/DSCF3926.JPG&quot; width=&quot;300&quot; /&gt;&lt;/a&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td style=&quot;font-family: arial,sans-serif; font-size: 11px; text-align: right;&quot;&gt;From &lt;a href=&quot;https://picasaweb.google.com/105545134685620195788/PCBEtchTank?authuser=0&amp;amp;feat=embedwebsite&quot;&gt;PCB etch tank&lt;/a&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;br /&gt;I got the heater today, I thought &quot;Great, this is exactly what I want&quot; I even managed to slice the limit stopping you from turning the knob too far so I could reach higher temperatures (read: ~40  &lt;span class=&quot;Apple-style-span&quot; style=&quot;line-height: 15px;&quot;&gt;&lt;span class=&quot;Apple-style-span&quot;&gt;°C) &lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;div&gt;&lt;span class=&quot;Apple-style-span&quot; style=&quot;line-height: 15px;&quot;&gt;&lt;span class=&quot;Apple-style-span&quot;&gt;&lt;br /&gt;&lt;/span&gt;&lt;/span&gt;&lt;/div&gt;&lt;div&gt;&lt;span class=&quot;Apple-style-span&quot; style=&quot;line-height: 15px;&quot;&gt;N.B. *Sigh* just looked at the cupric chloride guide:&lt;/span&gt;&lt;/div&gt;&lt;div&gt;&lt;span class=&quot;Apple-style-span&quot; style=&quot;line-height: 15px;&quot;&gt;&lt;br /&gt;&lt;/span&gt;&lt;/div&gt;&lt;div&gt;&lt;span class=&quot;Apple-style-span&quot; style=&quot;line-height: 15px;&quot;&gt;&lt;span class=&quot;Apple-style-span&quot;&gt;&lt;table border=&quot;1&quot; cellpadding=&quot;2&quot; cellspacing=&quot;2&quot; style=&quot;font-family: Ubuntu, UbuntuBeta !important; height: 50px; line-height: normal; text-align: left; width: 700px;&quot;&gt;&lt;tbody style=&quot;font-family: Ubuntu, UbuntuBeta !important;&quot;&gt;&lt;tr style=&quot;font-family: Ubuntu, UbuntuBeta !important;&quot;&gt;&lt;td style=&quot;font-family: Ubuntu, UbuntuBeta !important; text-align: left; vertical-align: top;&quot;&gt;Temperature (°C)&lt;/td&gt;&lt;td style=&quot;font-family: Ubuntu, UbuntuBeta !important; font-weight: bold; text-align: center; vertical-align: top;&quot;&gt;0&lt;/td&gt;&lt;td style=&quot;font-family: Ubuntu, UbuntuBeta !important; font-weight: bold; text-align: center; vertical-align: top;&quot;&gt;40&lt;/td&gt;&lt;td style=&quot;font-family: Ubuntu, UbuntuBeta !important; text-align: left; vertical-align: top;&quot;&gt;HCl fuming increases.&lt;br /&gt;Etch speed increases. (see note 1)&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/span&gt;&lt;/span&gt;&lt;/div&gt;&lt;br /&gt;&lt;div&gt;&lt;/div&gt;&lt;div&gt;Looks like I might not even need that heater... I think for the sake of simplicity and cost I shall eliminate it. Good, I feel like I have less things to limit my design now.&lt;/div&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;div&gt;Coming back from my tangent, I had modded it and let it sit at ~45°C for a bit and went out for a run leaving it on, I came back to find it no longer working. I took it apart and found that the framework it was all attached to had melted and had pushed the magnet out stopping the lever from making contact with the contact. (best described with a picture)&lt;/div&gt;&lt;table style=&quot;width: auto;&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td&gt;&lt;a href=&quot;https://picasaweb.google.com/lh/photo/oJuPogM5kc_qZfUNua7VlkgjfRgjgzLDNPYATrcVkss?feat=embedwebsite&quot;&gt;&lt;img height=&quot;300&quot; src=&quot;https://lh6.googleusercontent.com/-5cpEy1ELxQU/TcSCFJJ9VqI/AAAAAAAAA1Q/TaGDof4k-7s/s400/DSCF3921.JPG&quot; width=&quot;400&quot; /&gt;&lt;/a&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td style=&quot;font-family: arial,sans-serif; font-size: 11px; text-align: right;&quot;&gt;From &lt;a href=&quot;https://picasaweb.google.com/105545134685620195788/PCBEtchTank?authuser=0&amp;amp;feat=embedwebsite&quot;&gt;PCB etch tank&lt;/a&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;The lever on the bottom touches a contact when the blue knob is turned (this is how you set the temperature). When the temperature has reached a certain point, the lever expands and the magnet can no longer hold it touching the contact so it returns to the position in the picture breaking the circuit, I tried to remold the magnet hold and to some extent I had some sucess, I put it back in it's glass tube and turn it back on. *BANG* I have a nice set of sun spots and the breakers go; the heating element had shorted. &lt;br /&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;div&gt;&lt;u&gt;&lt;b&gt;Before:&lt;/b&gt;&lt;/u&gt;&lt;/div&gt;&lt;table style=&quot;width: auto;&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td&gt;&lt;a href=&quot;https://picasaweb.google.com/lh/photo/iu4Q3jh_sEtbIwwYEDHlX0gjfRgjgzLDNPYATrcVkss?feat=embedwebsite&quot;&gt;&lt;img height=&quot;400&quot; src=&quot;https://lh4.googleusercontent.com/-vgJQYdxlNH0/TcSCDC4faZI/AAAAAAAAA1Q/jTojFX6nF3k/s400/DSCF3922.JPG&quot; width=&quot;300&quot; /&gt;&lt;/a&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td style=&quot;font-family: arial,sans-serif; font-size: 11px; text-align: right;&quot;&gt;From &lt;a href=&quot;https://picasaweb.google.com/105545134685620195788/PCBEtchTank?authuser=0&amp;amp;feat=embedwebsite&quot;&gt;PCB etch tank&lt;/a&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;div&gt;&lt;b&gt;&lt;u&gt;After:&lt;/u&gt;&lt;/b&gt;&lt;/div&gt;&lt;table style=&quot;width: auto;&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td&gt;&lt;a href=&quot;https://picasaweb.google.com/lh/photo/WsLoAPQldbg32BnZPU-7SEgjfRgjgzLDNPYATrcVkss?feat=embedwebsite&quot;&gt;&lt;img height=&quot;400&quot; src=&quot;https://lh6.googleusercontent.com/-TQ9T5MNTs1M/TcSB9TFwL_I/AAAAAAAAA1Q/blxH88Y50BA/s400/DSCF3924.JPG&quot; width=&quot;300&quot; /&gt;&lt;/a&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td style=&quot;font-family: arial,sans-serif; font-size: 11px; text-align: right;&quot;&gt;From &lt;a href=&quot;https://picasaweb.google.com/105545134685620195788/PCBEtchTank?authuser=0&amp;amp;feat=embedwebsite&quot;&gt;PCB etch tank&lt;/a&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;br /&gt;I took it all apart and tested all the components then fixed the heating element (shortening it due to a part blowing off it. I assumed the bulb had gone so took it out and replaced it with a jumper, it didn't work. After 30 minutes of troubleshooting I thought to check the fuse (I should have done this first) and low behold it had blown. After reassembling it this time I got a lovely red glow from the element so I'm assuming this is due to the loss of part of the element and the element's resistance has gone down. &lt;br /&gt;&lt;table style=&quot;width: auto;&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td&gt;&lt;a href=&quot;https://picasaweb.google.com/lh/photo/U7aZzRHElE35n8-h_mMFukgjfRgjgzLDNPYATrcVkss?feat=embedwebsite&quot;&gt;&lt;img height=&quot;400&quot; src=&quot;https://lh4.googleusercontent.com/-NnyZk-8Xooc/TcSB65sQCZI/AAAAAAAAA1Q/cmHDENPKjo4/s400/DSCF3925.JPG&quot; width=&quot;300&quot; /&gt;&lt;/a&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td style=&quot;font-family: arial,sans-serif; font-size: 11px; text-align: right;&quot;&gt;From &lt;a href=&quot;https://picasaweb.google.com/105545134685620195788/PCBEtchTank?authuser=0&amp;amp;feat=embedwebsite&quot;&gt;PCB etch tank&lt;/a&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;div&gt;Because the circuit is setup as a &lt;a href=&quot;http://en.wikipedia.org/wiki/Voltage_divider&quot;&gt;potential divider&lt;/a&gt; the bulb was dimmer due to the lower resistance of the element &amp;amp; thus lower current through the bulb. The bulb is attached to a ~120k resistor which I think I'll replace with a lower value one to divert more current to the bulb and hopefully remedy the over powered element issue.&lt;br /&gt;&lt;table style=&quot;width: auto;&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td&gt;&lt;a href=&quot;https://picasaweb.google.com/lh/photo/AOu-whSlAio4aSnEOxENbEgjfRgjgzLDNPYATrcVkss?feat=embedwebsite&quot;&gt;&lt;img height=&quot;400&quot; src=&quot;https://lh3.googleusercontent.com/-W9jKL1a_rIM/TcSCHHA2cLI/AAAAAAAAA1Q/Khojoi5L9Yo/s400/DSCF3920.JPG&quot; width=&quot;300&quot; /&gt;&lt;/a&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td style=&quot;font-family: arial,sans-serif; font-size: 11px; text-align: right;&quot;&gt;From &lt;a href=&quot;https://picasaweb.google.com/105545134685620195788/PCBEtchTank?authuser=0&amp;amp;feat=embedwebsite&quot;&gt;PCB etch tank&lt;/a&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;My apologies if this is a little incoherent, It's getting a bit late here. Time for experiment 18 I think, I fancy some electronics to calm me down after such an eventful evening!&lt;/div&gt;&lt;/div&gt;
</content>
 </entry>
 
 <entry>
   <title>MAKE Electronics: Experiment 17: Emitting a tone (555)</title>
   <link href="http://willprice.org//MAKE Electronics/2011/05/06/make-electronics-experiment-17-emitting.html"/>
   <updated>2011-05-06T00:00:00+01:00</updated>
   <id>http://willprice.org/MAKE Electronics/2011/05/06/make-electronics-experiment-17-emitting</id>
   <content type="html">&lt;div class='post'&gt;
&lt;div&gt;&lt;u&gt;PART 1:&lt;/u&gt;&lt;/div&gt;&lt;div&gt;This experiment sets the 555 up in &lt;i&gt;astable mode&lt;/i&gt; (check out the previous post for an explanation). The 555 will emit pulses at a certain frequency which will drive the speaker. Changing the frequency of the pulses will then in turn change the frequency of the speaker's tone. To change the pulse frequency or rate, we adjust the external capacitor connected to pin 6, the threshold pin. (or the resistor between 6 &amp;amp; 7)&lt;/div&gt;&lt;table style=&quot;width: auto;&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td&gt;&lt;a href=&quot;https://picasaweb.google.com/lh/photo/5aDcrpN8_uHNqZwPdGYIKKu880KGXKM6JH070mDi2bE?feat=embedwebsite&quot;&gt;&lt;img height=&quot;300&quot; src=&quot;https://lh4.googleusercontent.com/-9KUjQn41tso/TbXJU2xfptI/AAAAAAAAA1s/tMBsDxSgsMs/s400/DSCF3879.JPG&quot; width=&quot;400&quot; /&gt;&lt;/a&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td style=&quot;font-family: arial,sans-serif; font-size: 11px; text-align: right;&quot;&gt;From &lt;a href=&quot;https://picasaweb.google.com/105545134685620195788/MAKEElectronicsExperiment17555InAstableMode?authuser=0&amp;amp;feat=embedwebsite&quot;&gt;MAKE: Electronics: Experiment 17 (555 in astable mode)&lt;/a&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;table style=&quot;width: auto;&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td&gt;&lt;a href=&quot;https://picasaweb.google.com/lh/photo/i5qQgGkzBqycccJt89Xu16u880KGXKM6JH070mDi2bE?feat=embedwebsite&quot;&gt;&lt;img height=&quot;300&quot; src=&quot;https://lh5.googleusercontent.com/-2FLZ_Puwf6c/Tb8yv6veNpI/AAAAAAAAA1s/ErMl0WQrKPk/s400/DSCF3917.JPG&quot; width=&quot;400&quot; /&gt;&lt;/a&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td style=&quot;font-family: arial,sans-serif; font-size: 11px; text-align: right;&quot;&gt;From &lt;a href=&quot;https://picasaweb.google.com/105545134685620195788/MAKEElectronicsExperiment17555InAstableMode?authuser=0&amp;amp;feat=embedwebsite&quot;&gt;MAKE: Electronics: Experiment 17 (555 in astable mode)&lt;/a&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;br /&gt;&lt;div&gt;Here's the circuit, lets have a look at the schematic of the 555 in astable mode again:&lt;/div&gt;&lt;div&gt;&lt;br /&gt;&lt;img alt=&quot;&quot; border=&quot;0&quot; src=&quot;https://lh5.googleusercontent.com/_tW3WwfDXALM/TbV_J1qkKkI/AAAAAAAAAkg/PyiJbfbd4XY/220px-555_Astable_Diagram.svg.png&quot; style=&quot;cursor: hand; cursor: pointer; float: left; height: 200px; margin: 0 10px 10px 0; width: 220px;&quot; /&gt;&lt;/div&gt;&lt;div&gt;So the THRESHOLD is connected to the TRIGGER, when the cap, C, is charged past 2/3 of the Vsupply the threshold is passed and the capacitor discharges through R2 into pin 7 (DISCHARGE) and a pulse is emitted from OUT. Once the cap has discharged and the IC is no longer triggered, the cap starts charging again, when it reaches 2/3 Vsupply it repeats the process, this results in a series of pulses, this is called a &lt;b&gt;square wave&lt;/b&gt; &lt;b&gt;oscillator&lt;/b&gt;, because it's producing a a series of square wave pulses. This is great for generating tones on speakers, flashing LEDs (albeit highly overkill!) etc.&lt;/div&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;div&gt;&lt;u&gt;PART 2:&lt;/u&gt;&lt;/div&gt;&lt;div&gt;Now we chain 2 chips together, both in astable mode, this produces a warbling tone.&lt;/div&gt;&lt;div&gt;The 555 on the left (IC2) is working in the same way as in part 1, however this time, a second 555 (IC1) is chained to the chip with it's output attached to pin 5 of the tone generator 555 (IC2). When IC1 produces a pulse it increases the voltage at pin 5 (2/3 Vsupply results in the chip emitting a pulse) so when IC1 emits a pulse and triggers the second chip to generate a pulse the capacitor attached to pin 5 of IC2 is less charged than it would have been if IC1 wasn't chained to IC2, this results in a higher pitch, because IC1 is oscillating far slower than IC2, IC2 isn't always triggered by a pulse from IC1 meaning it operates in its normal mode and produces a lower frequency tone.&lt;/div&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;div&gt;This results in a warbling sound to be produced as some of the time IC2 is producing high frequency square waves (when IC1 is emitting a pulse) and some of the time IC2 is producing lower frequency square waves (when IC1 is not emitting a pulse)&lt;/div&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;div&gt;&lt;br /&gt;&lt;iframe allowfullscreen=&quot;&quot; frameborder=&quot;0&quot; height=&quot;349&quot; src=&quot;http://www.youtube.com/embed/bzwGqTeHEYI?rel=0&quot; width=&quot;425&quot;&gt;&lt;/iframe&gt;&lt;/div&gt;&lt;div&gt;(the video shows the circuit the other way round, sorry about that!)&lt;/div&gt;&lt;br /&gt;There is a hell of a lot of info in this experiment so I think I'll spend some time playing around with the 555 trying to figure out how to get it to emit different pulses, an oscilloscope would be great to have around for this experiment! &lt;br /&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;/div&gt;
</content>
 </entry>
 
 <entry>
   <title>Custom etch tank: The start.</title>
   <link href="http://willprice.org//PCB/2011/05/05/custom-etch-tank-start.html"/>
   <updated>2011-05-05T00:00:00+01:00</updated>
   <id>http://willprice.org/PCB/2011/05/05/custom-etch-tank-start</id>
   <content type="html">&lt;div class='post'&gt;
&lt;span class=&quot;Apple-style-span&quot; &gt;I've decided to have a bash at making an etch tank as I like making PCBs, however at the moment I've got no way to heat my etchant up and the whole affair is looking like a rather sorry state. After reading &lt;a href=&quot;http://www.instructables.com/id/Circuit-Board-Lab-POV-Business-Card/#step1&quot;&gt;this instructable&lt;/a&gt;, I decided to build my own, I really like the etch tank design but would like to redesign it myself, purely for the practice in CAD and in-depth knowledge it will provide. I've bought an aquarium pump and heater to use in it and I will be using &lt;a href=&quot;http://members.optusnet.com.au/eseychell/PCB/etching_CuCl/index.html&quot;&gt;cupric chloride&lt;/a&gt; to etch.&lt;/span&gt;&lt;div&gt;&lt;span class=&quot;Apple-style-span&quot; &gt;I've found a wonderful &lt;a href=&quot;http://www.vp-scientific.com/Chemical_Resistance_Chart.htm&quot;&gt;website&lt;/a&gt; with a list of several materials and their resistances to specified chemicals, it's really invaluable to picking materials to use.&lt;/span&gt;&lt;/div&gt;&lt;div&gt;&lt;span class=&quot;Apple-style-span&quot; &gt;So far I have chosen a few materials:&lt;/span&gt;&lt;/div&gt;&lt;div&gt;&lt;span class=&quot;Apple-style-span&quot; &gt;&lt;br /&gt;&lt;/span&gt;&lt;/div&gt;&lt;div&gt;&lt;span class=&quot;Apple-style-span&quot; &gt;Etch tank - &lt;i&gt;Acrylic&lt;/i&gt;&lt;/span&gt;&lt;/div&gt;&lt;div&gt;&lt;span class=&quot;Apple-style-span&quot; &gt;Tubing - &lt;i&gt;Ideally polypropylene (but I will settle for PVC) 1/4&quot; ID (same as aquarium pump)&lt;/i&gt;&lt;/span&gt;&lt;/div&gt;&lt;div&gt;&lt;span class=&quot;Apple-style-span&quot; &gt;Fittings - &lt;i&gt;Ideally polypropylene, but if PVC one are available I'd settle for them, they're expensive and hard to find.&lt;/i&gt;&lt;/span&gt;&lt;/div&gt;&lt;div&gt;&lt;i&gt;&lt;span class=&quot;Apple-style-span&quot; &gt;&lt;br /&gt;&lt;/span&gt;&lt;/i&gt;&lt;/div&gt;&lt;div&gt;&lt;span class=&quot;Apple-style-span&quot; &gt;It's a rather pitiful list but it's all I've decided on for the moment. I'm looking at buying chemicals, shipping is painfully expensive and I haven't really calculated how much I need to get, so that's on my to do list. It looks like higher concentration solutions of hydrogen peroxide cost the same as the lower concentration ones, obviously I'll go for the higher concentration as It's less to store, shipping will be cheaper and It's easy to dilute it.&lt;/span&gt;&lt;/div&gt;&lt;div&gt;&lt;span class=&quot;Apple-style-span&quot; &gt;&lt;br /&gt;&lt;/span&gt;&lt;/div&gt;&lt;div&gt;&lt;span class=&quot;Apple-style-span&quot; &gt;I also need to get some methylene chloride for solvent welding acrylic, it's pretty cheap &lt;a href=&quot;http://www.bonnymans.co.uk/products/product.php?categoryID=1415&amp;amp;productID=6284&quot;&gt;here&lt;/a&gt;, but I might buy it from ebay depending on delivery prices, this &lt;a href=&quot;http://stores.ebay.co.uk/BIOSTAIN-ON-E-BAY?_trksid=p4340.l2563&quot;&gt;seller&lt;/a&gt; has most/all of the chemicals I need. Scratch that, the first seller mostly what I want at lower prices, excellent!&lt;/span&gt;&lt;/div&gt;&lt;div&gt;&lt;span class=&quot;Apple-style-span&quot; &gt;Hydrogen peroxide is the only thing that isn't stocked there, I thought I'd figure out how much I need, at 35% it's pretty concentrated, I used this handy &lt;a href=&quot;http://www.trimen.pl/witek/calculators/stezenia.html&quot;&gt;calculator&lt;/a&gt; to find the concentration in mol/dm^3, so 500ml at 35% can be diluted to give 5 litres of 1.16mol/dm^3 looking at the equation on the cupric chloride link:&lt;/span&gt;&lt;/div&gt;&lt;div&gt;&lt;span class=&quot;Apple-style-span&quot; &gt;2H&lt;sup&gt;+&lt;/sup&gt; + Cu&lt;sup&gt;1+&lt;/sup&gt; + O&lt;sub&gt;{aq}&lt;/sub&gt; →  Cu&lt;sup&gt;2+&lt;/sup&gt;  + H&lt;sub&gt;2&lt;/sub&gt;O&lt;/span&gt;&lt;/div&gt;&lt;div&gt;&lt;span class=&quot;Apple-style-span&quot; &gt;This looks like it's probably going to be more than sufficient. Actually looking at the page again, it just occurred to me, I don't even need hydrogen peroxide after producing the etchant as I can regenerate the solution using air, I'm going to just get 250ml... &lt;/span&gt;&lt;/div&gt;&lt;div&gt;&lt;span class=&quot;Apple-style-span&quot; &gt;The acid gets used up so I'm buying a litre of that, the common mix to produce the starter etchant seems to be:&lt;/span&gt;&lt;/div&gt;&lt;div&gt;&lt;span class=&quot;Apple-style-span&quot; &gt;1 part HCl (35%)&lt;/span&gt;&lt;/div&gt;&lt;div&gt;&lt;span class=&quot;Apple-style-span&quot; &gt;2 parts H2O2 (3%)&lt;/span&gt;&lt;/div&gt;&lt;div&gt;&lt;span class=&quot;Apple-style-span&quot; &gt;&lt;br /&gt;&lt;/span&gt;&lt;/div&gt;&lt;div&gt;&lt;span class=&quot;Apple-style-span&quot; &gt;UPDATE:&lt;br /&gt;Just bought:&lt;/span&gt;&lt;/div&gt;&lt;div&gt;&lt;span class=&quot;Apple-style-span&quot; &gt;1 Litre HCl&lt;/span&gt;&lt;/div&gt;&lt;div&gt;&lt;span class=&quot;Apple-style-span&quot; &gt;1 Litre Acetone&lt;/span&gt;&lt;/div&gt;&lt;div&gt;&lt;span class=&quot;Apple-style-span&quot; &gt;1 Litre methylene chloride&lt;/span&gt;&lt;/div&gt;&lt;div&gt;&lt;span class=&quot;Apple-style-span&quot; &gt;1 kg NaOH (just in case I want to do titration and analyze my etchant)&lt;/span&gt;&lt;/div&gt;&lt;div&gt;&lt;span class=&quot;Apple-style-span&quot; &gt;£9.50 for delivery&lt;/span&gt;&lt;/div&gt;&lt;div&gt;&lt;span class=&quot;Apple-style-span&quot; &gt;£11.50 for the chemicals&lt;/span&gt;&lt;/div&gt;&lt;div&gt;&lt;i&gt;&lt;span class=&quot;Apple-style-span&quot; &gt;&lt;br /&gt;&lt;/span&gt;&lt;/i&gt;&lt;/div&gt;&lt;div&gt;&lt;span class=&quot;Apple-style-span&quot; &gt;Now I can whip up some etchant, have a play around with it and see whether the check valves I've bought are or are not made from polycarbonate... hopefully they'll be OK.&lt;/span&gt;&lt;/div&gt;&lt;div&gt;&lt;span class=&quot;Apple-style-span&quot; &gt;&lt;br /&gt;&lt;/span&gt;&lt;/div&gt;&lt;div&gt;&lt;span class=&quot;Apple-style-span&quot; &gt;On a side note: I've picked up a laser printer (from freecycle!) which I may play around &lt;a href=&quot;http://warrantyvoidifremoved.com/posts/2007-03-22/mark-3&quot;&gt;modding to print on circuit boards&lt;/a&gt;. However, it looks like a fairly complicated endeavour which currently I'm not sure I need to embark on, one for the future perhaps.&lt;/span&gt;&lt;/div&gt;&lt;div&gt;&lt;span class=&quot;Apple-style-span&quot; &gt;&lt;br /&gt;&lt;/span&gt;&lt;/div&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;/div&gt;
</content>
 </entry>
 
 <entry>
   <title>Learning Processing Chapter 5.6</title>
   <link href="http://willprice.org//Learning Processing/2011/05/01/learning-processing-chapter-56.html"/>
   <updated>2011-05-01T00:00:00+01:00</updated>
   <id>http://willprice.org/Learning Processing/2011/05/01/learning-processing-chapter-56</id>
   <content type="html">&lt;div class='post'&gt;
&lt;b&gt;&lt;u&gt;BOOLEAN VARIABLES:&lt;/u&gt;&lt;/b&gt;&lt;div&gt;Just a short post today, lots of work to get on with.&lt;/div&gt;&lt;div&gt;This little segment teaches you how to program a button in processing, a basic of UI design. &lt;/div&gt;&lt;div&gt;Boolean variables are either &lt;i&gt;true &lt;/i&gt; or &lt;i&gt;false&lt;/i&gt;, nothing in between. &lt;/div&gt;&lt;div&gt;&lt;b&gt;&lt;i&gt;&lt;br /&gt;&lt;/i&gt;&lt;/b&gt;&lt;/div&gt;&lt;div&gt;&lt;i style=&quot;font-weight: bold; &quot;&gt;mousePressed &lt;/i&gt;is a boolean variable, it is &lt;i&gt;true&lt;/i&gt; when a mouse button is pressed and &lt;i&gt;false &lt;/i&gt;when they are not. We use this in the button example, this is an emulation of a light switch in a dark room, when you press the switch the light comes on, when you let go, the light goes off and the room goes dark. This is implemented using similar code to the roll-over example:&lt;/div&gt;&lt;div&gt;&lt;a href=&quot;http://www.learningprocessing.com/examples/chapter-5/example-5-4/&quot;&gt;&lt;br /&gt;&lt;/a&gt;&lt;/div&gt;&lt;div&gt;&lt;a href=&quot;http://www.learningprocessing.com/examples/chapter-5/example-5-4/&quot;&gt;Shiffmans code:&lt;/a&gt;&lt;/div&gt;&lt;pre style=&quot;font-family:arial;font-size:12px;border:1px dashed #CCCCCC;width:99%;height:auto;overflow:auto;background:#f0f0f0;padding:0px;color:#000000;text-align:left;line-height:20px;&quot;&gt;&lt;code style=&quot;color:#000000;word-wrap:normal;&quot;&gt; // Learning Processing&lt;br /&gt;// Daniel Shiffman&lt;br /&gt;// http://www.learningprocessing.com&lt;br /&gt;&lt;br /&gt;// Example 5-4: Hold down the button&lt;br /&gt;boolean button = false;&lt;br /&gt;&lt;br /&gt;int x = 50;&lt;br /&gt;int y = 50;&lt;br /&gt;int w = 100;&lt;br /&gt;int h = 75;&lt;br /&gt;&lt;br /&gt;void setup() {&lt;br /&gt;size(200,200);&lt;br /&gt;}&lt;br /&gt;&lt;br /&gt;void draw() {&lt;br /&gt;// The button is pressed if (mouseX,mouseY) is inside the rectangle and mousePressed is true.&lt;br /&gt;if (mouseX &amp;gt; x &amp;amp;&amp;amp; mouseX &amp;lt; x+w &amp;amp;&amp;amp; mouseY &amp;gt; y &amp;amp;&amp;amp; mouseY &amp;lt; y+h &amp;amp;&amp;amp; mousePressed) {&lt;br /&gt;button = true;&lt;br /&gt;} else {&lt;br /&gt;button = false;&lt;br /&gt;}&lt;br /&gt;&lt;br /&gt;if (button) {&lt;br /&gt;background(255);&lt;br /&gt;stroke(0);&lt;br /&gt;} else {&lt;br /&gt;background(0);&lt;br /&gt;stroke(255);&lt;br /&gt;}&lt;br /&gt;&lt;br /&gt;fill(175);&lt;br /&gt;rect(x,y,w,h);&lt;br /&gt;}&lt;br /&gt;&lt;br /&gt;&lt;/code&gt;&lt;/pre&gt;&lt;applet code=&quot;example_5_4&quot; archive=&quot;http://www.learningprocessing.com/example-files/chapter05/jar/example_5_4.jar&quot; width=&quot;200&quot; height=&quot;200&quot;&gt;&lt;br /&gt;     &lt;param name=&quot;progressbar&quot; value=&quot;true&quot;&gt;&lt;br /&gt;     &lt;param name=&quot;progresscolor&quot; value=&quot;#666666&quot;&gt;&lt;br /&gt;     &lt;param name=&quot;background-color&quot; value=&quot;#666666&quot;&gt;&lt;br /&gt;    &lt;/applet&gt;&lt;div&gt;&lt;span class=&quot;Apple-style-span&quot; &gt;(Taken from the &lt;i&gt;learning processing&lt;/i&gt; site, all credit to Daniel Shiffman)&lt;/span&gt;&lt;/div&gt;&lt;div&gt;&lt;span class=&quot;Apple-style-span&quot;&gt;&lt;br /&gt;&lt;/span&gt;&lt;/div&gt;&lt;div&gt;This code is fairly self-explanatory after the rollover exercises, the only thing I am a little unsure about it is this line:&lt;/div&gt;&lt;div&gt;&lt;div&gt;&lt;pre style=&quot;font-family: arial; font-size: 12px; border-top-width: 1px; border-right-width: 1px; border-bottom-width: 1px; border-left-width: 1px; border-top-style: dashed; border-right-style: dashed; border-bottom-style: dashed; border-left-style: dashed; border-top-color: rgb(204, 204, 204); border-right-color: rgb(204, 204, 204); border-bottom-color: rgb(204, 204, 204); border-left-color: rgb(204, 204, 204); width: 675px; height: auto; overflow-x: auto; overflow-y: auto; background-image: initial; background-attachment: initial; background-origin: initial; background-clip: initial; background-color: rgb(240, 240, 240); padding-top: 0px; padding-right: 0px; padding-bottom: 0px; padding-left: 0px; color: rgb(0, 0, 0); text-align: left; line-height: 20px; background-position: initial initial; background-repeat: initial initial; &quot;&gt;&lt;code style=&quot;font-family: Ubuntu, UbuntuBeta !important; color: rgb(0, 0, 0); word-wrap: normal; &quot;&gt;if (button) {&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;div&gt;I assume that &lt;i&gt;(button) &lt;/i&gt;is the same as writing &lt;i&gt;(button == true) &lt;/i&gt;&lt;/div&gt;&lt;div&gt;looking on this &lt;a href=&quot;http://processing.org/learning/basics/truefalse.html&quot;&gt;link&lt;/a&gt; it appears so, and &lt;i&gt;(!button) &lt;/i&gt;would be the same as writing &lt;i&gt;(button == false).&lt;/i&gt;&lt;/div&gt;&lt;div&gt;&lt;i&gt;&lt;br /&gt;&lt;/i&gt;&lt;/div&gt;&lt;div&gt;The next step on is to implement a switch feature so that when the button is pressed, it latches and stays on until you click it again. This makes use of putting code in the &lt;i style=&quot;font-weight: bold; &quot;&gt;mousePressed&lt;/i&gt; function.&lt;/div&gt;&lt;/div&gt;&lt;div&gt;&lt;pre style=&quot;font-family:arial;font-size:12px;border:1px dashed #CCCCCC;width:99%;height:auto;overflow:auto;background:#f0f0f0;padding:0px;color:#000000;text-align:left;line-height:20px;&quot;&gt;&lt;code style=&quot;color:#000000;word-wrap:normal;&quot;&gt; void mousePressed() {&lt;br /&gt;if (mouseX &amp;gt; x &amp;amp;&amp;amp; mouseX &amp;lt; x+w &amp;amp;&amp;amp; mouseY &amp;gt; y &amp;amp;&amp;amp; mouseY &amp;lt; y+h &amp;amp;&amp;amp; mousePressed) {&lt;br /&gt;button = !button;&lt;br /&gt;}&lt;br /&gt;&lt;/code&gt;&lt;/pre&gt;We just add this to the end of the code and get rid of the first conditional in the draw() loop as it is no longer needed.&lt;/div&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;div&gt;Shiffman's Code:&lt;/div&gt;&lt;div&gt;&lt;pre style=&quot;font-family:arial;font-size:12px;border:1px dashed #CCCCCC;width:99%;height:auto;overflow:auto;background:#f0f0f0;padding:0px;color:#000000;text-align:left;line-height:20px;&quot;&gt;&lt;code style=&quot;color:#000000;word-wrap:normal;&quot;&gt; // Learning Processing&lt;br /&gt;// Daniel Shiffman&lt;br /&gt;// http://www.learningprocessing.com&lt;br /&gt;&lt;br /&gt;// Example 5-5: Button as switch&lt;br /&gt;boolean button = false;&lt;br /&gt;&lt;br /&gt;int x = 50;&lt;br /&gt;int y = 50;&lt;br /&gt;int w = 100;&lt;br /&gt;int h = 75;&lt;br /&gt;&lt;br /&gt;void setup() {&lt;br /&gt;size(200,200); &lt;br /&gt;}&lt;br /&gt;&lt;br /&gt;void draw() {&lt;br /&gt;if (button) {&lt;br /&gt; background(255);&lt;br /&gt; stroke(0);&lt;br /&gt;} else {&lt;br /&gt; background(0);&lt;br /&gt; stroke(255);&lt;br /&gt;}&lt;br /&gt;&lt;br /&gt;fill(175);&lt;br /&gt;rect(x,y,w,h);&lt;br /&gt;}&lt;br /&gt;&lt;br /&gt;// When the mouse is pressed, the state of the button is toggled.  &lt;br /&gt;// Try moving this code to draw() like in the rollover example. What goes wrong?&lt;br /&gt;void mousePressed() {&lt;br /&gt;if (mouseX &amp;gt; x &amp;amp;&amp;amp; mouseX &amp;lt; x+w &amp;amp;&amp;amp; mouseY &amp;gt; y &amp;amp;&amp;amp; mouseY &amp;lt; y+h) {&lt;br /&gt; button = !button;&lt;br /&gt;} &lt;br /&gt;}&lt;br /&gt;&lt;br /&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;div&gt;So this time, when the mouse is pressed inside the rectangle, &lt;i&gt;button &lt;/i&gt; is set to set to the opposite of what it was, if it was &lt;i&gt;true&lt;/i&gt; then it would become &lt;i&gt;false&lt;/i&gt; and vica versa.&lt;/div&gt;&lt;div&gt;I had to think about this for a bit to understand how it works, Draw is continually looping looking at &lt;i&gt;button&lt;/i&gt;'s value (true or false).The 'mousePressed' code is only initiated when (as you already knew) the button is pressed, (let's say the original value was false) clicking inside the rectangle changes the code to the opposite of what it was, so, it becomes true. Draw() loops and reads that button == true from the line &quot;if(button) {&quot; and then changes the background colour and stroke colour accordingly.&lt;/div&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;div&gt;Here's what it produces:&lt;/div&gt;&lt;div&gt;&lt;applet code=&quot;example_5_5&quot; archive=&quot;http://www.learningprocessing.com/example-files/chapter05/jar/example_5_5.jar&quot; width=&quot;200&quot; height=&quot;200&quot;&gt;&lt;/applet&gt;&lt;/div&gt;&lt;div&gt;&lt;span class=&quot;Apple-style-span&quot; style=&quot;font-size: x-small; &quot;&gt;(Taken from the &lt;i style=&quot;font-family: Ubuntu, UbuntuBeta !important; &quot;&gt;learning processing&lt;/i&gt; site, all credit to Daniel Shiffman)&lt;/span&gt;&lt;/div&gt;&lt;div&gt;&lt;span class=&quot;Apple-style-span&quot; style=&quot;font-size: x-small; &quot;&gt;&lt;br /&gt;&lt;/span&gt;&lt;/div&gt;&lt;/div&gt;
</content>
 </entry>
 
 <entry>
   <title>Learning Processing: Chapter 5.4-5.5</title>
   <link href="http://willprice.org//Learning Processing/2011/04/27/learning-processing-chapter-54-55.html"/>
   <updated>2011-04-27T00:00:00+01:00</updated>
   <id>http://willprice.org/Learning Processing/2011/04/27/learning-processing-chapter-54-55</id>
   <content type="html">&lt;div class='post'&gt;
&lt;b&gt;&lt;u&gt;CHAPTER 5.4 - LOGICAL OPERATORS:&lt;/u&gt;&lt;/b&gt;&lt;div&gt;So, what on earth are &lt;i&gt;&quot;logical operators&quot;&lt;/i&gt;, &lt;a href=&quot;http://en.wikipedia.org/wiki/Logical_connective&quot;&gt;wikipedia&lt;/a&gt; defines them as &quot;A symbol or word used to connect to or more sentences in a grammatically valid way&quot;. &lt;/div&gt;&lt;div&gt;Not that I really understand that, for things I don't understand, I find it massively helpful to apply the mathematical paradigm of abstraction, instead of comprehending the (I'm pretty sure it's used in other fields as well, but this is where I first came upon it, just a warning to the pedants!). &lt;/div&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;div&gt;So what properties do logical operators have, there are 3:&lt;/div&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;div&gt;NOT - &lt;a href=&quot;http://processing.org/reference/logicalNOT.html&quot;&gt;!&lt;/a&gt;&lt;/div&gt;&lt;div&gt;AND - &lt;a href=&quot;http://processing.org/reference/logicalAND.html&quot;&gt;&amp;amp;&amp;amp;&lt;/a&gt;&lt;br /&gt;OR - &lt;a href=&quot;http://processing.org/reference/logicalOR.html&quot;&gt;||&lt;/a&gt; &lt;/div&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;div&gt;&lt;b&gt;&lt;/b&gt;&lt;/div&gt;&lt;blockquote&gt;&lt;div&gt;&lt;b&gt;NOT&lt;/b&gt; is used to invert a boolean expression, so if we asked the question &quot;Is the sky blue&quot;, NOT would return &quot;false&quot; thus having inverted &quot;true&quot;&lt;/div&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;div&gt;&lt;b&gt;AND&lt;/b&gt; is used to compare two boolean expressions and only return &quot;true&quot; if both of the 2 expressions are satisfied. For example if we were to ask the question &quot;is the sky blue AND is the sea blue&quot; processing would return &quot;true&quot; if we asked &quot;is the sky blue AND the sea orange&quot; processing would return &quot;false&quot;, although one of the expressions is true, the other is false, AND only returns true when both expressions are true.&lt;/div&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;div&gt;&lt;b&gt;OR &lt;/b&gt;is like AND, however only one of the expressions has to be true to for it to return 'true', for example &quot;is the sky blue OR is the sea orange&quot;, this returns 'true' because the first expression is true, even though the second is false.&lt;/div&gt;&lt;/blockquote&gt;&lt;div&gt;&lt;/div&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;div&gt;&lt;span class=&quot;Apple-style-span&quot; &gt;&lt;i&gt;Looking at what I've just written, that is an incredibly lengthy explanation for such simple concepts, I blame this on wikipedias overly wordy explanation of a 'logical operator' and it being quite late... now with the explanations dispensed, time to document the chapter.&lt;/i&gt;&lt;/span&gt;&lt;/div&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;div&gt;&lt;br /&gt;In 5.4 we write a simple program to change a rectangles colour when the mouse is over it. I expanded on this code a bit and implemented a multiple rollover, when the mouse is not on the rectangle, the background is &lt;i&gt;black&lt;/i&gt; and the rectangle &lt;i&gt;white&lt;/i&gt;. When the mouse is on the rectangle, the background is &lt;i&gt;white &lt;/i&gt;and the rectangle &lt;i&gt;black. &lt;/i&gt;Hopefully the code is commented well enough for most people to understand!&lt;/div&gt;&lt;br /&gt;&lt;pre style=&quot;font-family:arial;font-size:12px;border:1px dashed #CCCCCC;width:99%;height:auto;overflow:auto;background:#f0f0f0;padding:0px;color:#000000;text-align:left;line-height:20px;&quot;&gt;&lt;code style=&quot;color:#000000;word-wrap:normal;&quot;&gt; /* logical operators in use in a simple sketch, &amp;amp;&amp;amp; is AND&lt;br /&gt;|| is OR */&lt;br /&gt;&lt;br /&gt;void setup() {&lt;br /&gt;size(200,200);  //200x200 canvas&lt;br /&gt;smooth();  //set anti-aliasing&lt;br /&gt;}&lt;br /&gt;&lt;br /&gt;void draw() {&lt;br /&gt;background(255);  //set backgroudn white&lt;br /&gt;if (mouseX &amp;gt; width/2 &amp;amp;&amp;amp; mouseY &amp;gt; width/2) {  //if mouse X coord is on the right AND the mouse Y coord is on the bottom half of the canvas&lt;br /&gt;fill(0); //fill rect with black&lt;br /&gt;rect(width/2,height/2,width/2,height/2);  //draw rect at bottom right&lt;br /&gt;}&lt;br /&gt;else if (mouseX &amp;lt; width/2 || mouseY &amp;lt; height/2) {  //else if the mouse X coord is less than half of the width OR the mouse Y coord is above the middle of the canvas&lt;br /&gt;background(0);  //fill background with black&lt;br /&gt;fill(255);  //fill rectangle with white&lt;br /&gt;rect(width/2,height/2,width/2,height/2);  //draw rect at bottom right&lt;br /&gt;}&lt;br /&gt;}&lt;br /&gt;&lt;br /&gt;&lt;/code&gt;&lt;/pre&gt;&lt;br /&gt;&lt;iframe width=&quot;228&quot; height=&quot;280&quot; scrolling=&quot;no&quot; frameborder=&quot;0&quot; src=&quot;http://www.openprocessing.org/visuals/iframe.php?visualID=27654&amp;amp;width=200&amp;amp;height=200&amp;amp;border=true&quot;&gt;&lt;/iframe&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;div&gt;In 5.5 we learn to implement 'multiple rollovers' Shiffman has provided some pseudocode of his next example, however I decided to implement it myself before going ahead and reading his example, as usual my code is cruder, less well written and much harder to mod, but I'm proud of it, it accomplishes the same thing as Shiffman's code.&lt;/div&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;div&gt;&lt;u&gt;MY CODE:&lt;/u&gt;&lt;/div&gt;&lt;div&gt;&lt;pre style=&quot;font-family:arial;font-size:12px;border:1px dashed #CCCCCC;width:99%;height:auto;overflow:auto;background:#f0f0f0;padding:0px;color:#000000;text-align:left;line-height:20px;&quot;&gt;&lt;code style=&quot;color:#000000;word-wrap:normal;&quot;&gt;&lt;br /&gt;int w = 200; //width of canvas&lt;br /&gt;int h = 200; //height of canvas&lt;br /&gt;int c1 = 255; //colour1 = white&lt;br /&gt;int c2 = 255; //colour2 = white&lt;br /&gt;int c3 = 255; //colour3 = white&lt;br /&gt;int c4 =255; //colour4 = white&lt;br /&gt;&lt;br /&gt;void setup() {&lt;br /&gt;size (w,h); //set canvas size&lt;br /&gt;smooth(); //anti-aliasing&lt;br /&gt;rectMode(CORNER);&lt;br /&gt;}&lt;br /&gt;&lt;br /&gt;void draw() {&lt;br /&gt;if (mouseX &amp;lt; width/2 &amp;amp;&amp;amp; mouseY &amp;lt; height/2) {&lt;br /&gt;c1 = 0;&lt;br /&gt;c2 = 255;&lt;br /&gt;c3 = 255;&lt;br /&gt;c4 = 255;&lt;br /&gt;&lt;br /&gt;} else if (mouseX &amp;lt; width/2 &amp;amp;&amp;amp; mouseY &amp;gt; height/2){&lt;br /&gt;c1 = 255;&lt;br /&gt;c2 = 255;&lt;br /&gt;c3 = 0;&lt;br /&gt;c4 = 255;&lt;br /&gt;&lt;br /&gt;} else if (mouseX &amp;gt; width/2 &amp;amp;&amp;amp; mouseY &amp;lt; height/2) {&lt;br /&gt;c1 = 255;&lt;br /&gt;c2 = 0;&lt;br /&gt;c3 = 255;&lt;br /&gt;c4 = 255;&lt;br /&gt;&lt;br /&gt;} else if (mouseX &amp;gt; width/2 &amp;amp;&amp;amp; mouseY &amp;gt; height/2) {&lt;br /&gt;c1 = 255;&lt;br /&gt;c2 = 255;&lt;br /&gt;c3 = 255;&lt;br /&gt;c4 = 0;&lt;br /&gt;}&lt;br /&gt;&lt;br /&gt;background(255); //set white background&lt;br /&gt;fill(c1);&lt;br /&gt;rect(0,0,width/2,height/2);&lt;br /&gt;fill(c2);&lt;br /&gt;rect(width/2,0,width/2,height/2);&lt;br /&gt;fill(c3);&lt;br /&gt;rect(0,height/2,width/2,height/2);&lt;br /&gt;fill(c4);&lt;br /&gt;rect(width/2,height/2,width/2,height/2);&lt;br /&gt;&lt;br /&gt;println(&quot;X = &quot; + mouseX + &quot; Y = &quot; + mouseY);&lt;br /&gt;}&lt;br /&gt;&lt;/code&gt;&lt;/pre&gt;&lt;div&gt;&lt;/div&gt;&lt;br /&gt;&lt;/div&gt;&lt;br /&gt;&lt;iframe width=&quot;228&quot; height=&quot;280&quot; scrolling=&quot;no&quot; frameborder=&quot;0&quot; src=&quot;http://www.openprocessing.org/visuals/iframe.php?visualID=27655&amp;amp;width=200&amp;amp;height=200&amp;amp;border=true&quot;&gt;&lt;/iframe&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;div&gt;&lt;u&gt;VS. &lt;a href=&quot;http://www.learningprocessing.com/examples/chapter-5/example-5-3/&quot;&gt;SHIFFMAN'S CODE&lt;/a&gt;:&lt;/u&gt;&lt;/div&gt;&lt;pre style=&quot;font-family:arial;font-size:12px;border:1px dashed #CCCCCC;width:99%;height:auto;overflow:auto;background:#f0f0f0;padding:0px;color:#000000;text-align:left;line-height:20px;&quot;&gt;&lt;code style=&quot;color:#000000;word-wrap:normal;&quot;&gt; // Learning Processing&lt;br /&gt;// Daniel Shiffman&lt;br /&gt;// http://www.learningprocessing.com&lt;br /&gt;&lt;br /&gt;// Example 5-3: Rollovers&lt;br /&gt;void setup() {&lt;br /&gt;size(200,200);&lt;br /&gt;}&lt;br /&gt;&lt;br /&gt;void draw() {&lt;br /&gt;background(255);&lt;br /&gt;stroke(0);&lt;br /&gt;line(100,0,100,200);&lt;br /&gt;line(0,100,200,100);&lt;br /&gt;&lt;br /&gt;// Fill a black color&lt;br /&gt;noStroke();&lt;br /&gt;fill(0);&lt;br /&gt;&lt;br /&gt;// Depending on the mouse location, a different rectangle is displayed. &lt;br /&gt;if (mouseX &amp;lt; 100 &amp;amp;&amp;amp; mouseY &amp;lt; 100) {&lt;br /&gt;rect(0,0,100,100);&lt;br /&gt;} else if (mouseX &amp;gt; 100 &amp;amp;&amp;amp; mouseY &amp;lt; 100) {&lt;br /&gt;rect(100,0,100,100);&lt;br /&gt;} else if (mouseX &amp;lt; 100 &amp;amp;&amp;amp; mouseY &amp;gt; 100) {&lt;br /&gt;rect(0,100,100,100);&lt;br /&gt;} else if (mouseX &amp;gt; 100 &amp;amp;&amp;amp; mouseY &amp;gt; 100) {&lt;br /&gt;rect(100,100,100,100);&lt;br /&gt;}&lt;br /&gt;}&lt;br /&gt;&lt;br /&gt;&lt;/code&gt;&lt;/pre&gt;&lt;br /&gt;&lt;div&gt;&lt;/div&gt;Right, I think that's it for tonight...&lt;/div&gt;
</content>
 </entry>
 
 <entry>
   <title>MAKE: Electronics: Experiment 16: 555 timer</title>
   <link href="http://willprice.org//MAKE Electronics/2011/04/25/make-electronics-experiment-16-555.html"/>
   <updated>2011-04-25T00:00:00+01:00</updated>
   <id>http://willprice.org/MAKE Electronics/2011/04/25/make-electronics-experiment-16-555</id>
   <content type="html">&lt;div class='post'&gt;
&lt;div style=&quot;text-align: center;&quot;&gt;&lt;br /&gt;&lt;/div&gt;&lt;b&gt;&lt;u&gt;INTRODUCTION TO THE 555 TIMER:&lt;/u&gt;&lt;/b&gt;&lt;div&gt;&lt;b&gt;&lt;u&gt;&lt;br /&gt;&lt;/u&gt;&lt;/b&gt;&lt;/div&gt;&lt;div&gt;&lt;b&gt;&lt;u&gt;&lt;img src=&quot;https://lh5.googleusercontent.com/_tW3WwfDXALM/TbV_ozFAB1I/AAAAAAAAAk8/eLJyp8re6cg/220px-555_Pinout.svg.png&quot; style=&quot;display: block; margin: 0px auto 10px; text-align: center; cursor: pointer; width: 220px; height: 145px;&quot; alt=&quot;&quot; border=&quot;0&quot; /&gt;&lt;/u&gt;&lt;/b&gt;&lt;/div&gt;&lt;div&gt;&lt;b&gt;&lt;u&gt;&lt;br /&gt;&lt;/u&gt;&lt;/b&gt;&lt;/div&gt;&lt;div&gt;So, we finally get to play with some ICs now! I feel I have quite a good understanding of the basic components now, so in the coming weeks I shall have a go making some circuits up using transistors etc.&lt;/div&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;div&gt;The 555 timer is perhaps the most ubiquitous IC on the planet, it is estimated that 1 billion per year are still produced, it has &lt;i style=&quot;font-family: Ubuntu,UbuntuBeta ! important;&quot;&gt;3 modes&lt;/i&gt;:&lt;/div&gt;&lt;div&gt;&lt;i&gt;&lt;br /&gt;&lt;/i&gt;&lt;/div&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;img src=&quot;https://lh5.googleusercontent.com/_tW3WwfDXALM/TbV_J2tEosI/AAAAAAAAAkk/Cam6gfcshj0/220px-555_Monostable.svg.png&quot; style=&quot;float: left; margin: 0pt 10px 10px 0pt; cursor: pointer; width: 220px; height: 200px;&quot; alt=&quot;&quot; border=&quot;0&quot; /&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;div&gt;-&lt;i&gt; &lt;/i&gt;&lt;i&gt;&lt;b&gt;Monostable mode&lt;/b&gt; &lt;/i&gt; - This means that when the IC is triggered it produces &lt;u&gt;one pulse&lt;/u&gt;, it can be used to trigger other ICs. A square waveform pulse is produced.&lt;/div&gt;&lt;div&gt;&lt;i&gt;&lt;br /&gt;&lt;/i&gt;&lt;/div&gt;&lt;div&gt;&lt;i&gt;&lt;br /&gt;&lt;/i&gt;&lt;/div&gt;&lt;div&gt;&lt;i&gt;&lt;br /&gt;&lt;/i&gt;&lt;/div&gt;&lt;div&gt;&lt;i&gt;&lt;br /&gt;&lt;/i&gt;&lt;/div&gt;&lt;div&gt;&lt;i&gt;&lt;br /&gt;&lt;/i&gt;&lt;/div&gt;&lt;div&gt;&lt;i&gt;&lt;br /&gt;&lt;/i&gt;&lt;/div&gt;&lt;div&gt;&lt;i&gt;&lt;img src=&quot;https://lh5.googleusercontent.com/_tW3WwfDXALM/TbV_J1qkKkI/AAAAAAAAAkg/PyiJbfbd4XY/220px-555_Astable_Diagram.svg.png&quot; style=&quot;float: left; margin: 0pt 10px 10px 0pt; cursor: pointer; width: 220px; height: 200px;&quot; alt=&quot;&quot; border=&quot;0&quot; /&gt;&lt;/i&gt;&lt;/div&gt;&lt;div&gt;&lt;i&gt;&lt;br /&gt;&lt;/i&gt;&lt;/div&gt;&lt;div&gt;&lt;i&gt;&lt;br /&gt;&lt;/i&gt;&lt;/div&gt;&lt;div&gt;&lt;i&gt;&lt;br /&gt;&lt;/i&gt;&lt;/div&gt;&lt;div&gt;&lt;i&gt;- &lt;b&gt;Astable mode&lt;/b&gt; - &lt;/i&gt;This means that when triggered the IC acts as an oscillator, it is not stable, hence the astable name. This &lt;/div&gt;&lt;div&gt;is useful for flashing LEDs, producing tones on speakers etc. A square waveform is produced.&lt;/div&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;div&gt;&lt;i&gt;&lt;br /&gt;&lt;/i&gt;&lt;/div&gt;&lt;div&gt;&lt;i&gt;&lt;br /&gt;&lt;/i&gt;&lt;/div&gt;&lt;img src=&quot;https://lh6.googleusercontent.com/_tW3WwfDXALM/TbV_J2YNyWI/AAAAAAAAAko/y93BOtz_gvI/555buff%20%281%29.gif&quot; style=&quot;float: left; margin: 0pt 10px 10px 0pt; cursor: pointer; width: 220px; height: 200px;&quot; alt=&quot;&quot; border=&quot;0&quot; /&gt;&lt;div&gt;&lt;i&gt;&lt;b&gt;&lt;br /&gt;&lt;/b&gt;&lt;/i&gt;&lt;/div&gt;&lt;div&gt;&lt;i&gt;&lt;b&gt;&lt;br /&gt;&lt;/b&gt;&lt;/i&gt;&lt;/div&gt;&lt;div&gt;- &lt;b style=&quot;font-style: italic;&quot;&gt;Bistable mode&lt;/b&gt;&lt;i&gt; - &lt;/i&gt;When triggered the IC acts as a flip flop, this is useful to remove the bounce (&lt;a href=&quot;http://www.elexp.com/t_bounc.htm&quot;&gt;http://www.elexp.com/t_bounc.htm&lt;/a&gt;) from a switch. I don't really know much about flips flops, but I guess later on in the book when logic will have been covered I'll have a greater understanding of the concept.&lt;/div&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;div&gt;&lt;br /&gt;&lt;b&gt;&lt;u&gt;&lt;br /&gt;&lt;/u&gt;&lt;/b&gt;&lt;/div&gt;&lt;div&gt;&lt;b&gt;&lt;u&gt;Pinouts:&lt;/u&gt;&lt;/b&gt;&lt;/div&gt;&lt;div&gt;&lt;i&gt;(refer to the top diagram)&lt;/i&gt;&lt;/div&gt;&lt;div&gt;1 - (GND) Connected to &lt;b&gt;GROUND&lt;/b&gt;&lt;/div&gt;&lt;div&gt;2 - (TRIG) &lt;b&gt;Trigger&lt;/b&gt;, pull low when you want to trigger the chip (1/3 of Vs)&lt;/div&gt;&lt;div&gt;3 - (OUT) The &lt;b&gt;pulses&lt;/b&gt; are delivered here (+V)&lt;/div&gt;&lt;div&gt;4 - (RESET) Pull low when you want to &lt;b&gt;reset&lt;/b&gt; the chip&lt;/div&gt;&lt;div&gt;5 - (CTRL) &lt;b&gt;Control&lt;/b&gt;, access to the internal voltage divider to change the threshold voltage (default &amp;gt; 2/3 Vs) which pulls pin 3 low (0V)&lt;/div&gt;&lt;div&gt;6 - (THR) &lt;b&gt;Threshold&lt;/b&gt;, when pulled high (2/3 Vs) it sets pin 3 to 0V&lt;/div&gt;&lt;div&gt;7 - (DIS) &lt;b&gt;Discharge&lt;/b&gt;, when a pulse is initiated, the capacitor attached to this pin discharges through it to ground, this is the timing capacitor, hence the larger the value, the longer it takes to discharge and the longer the pulse&lt;/div&gt;&lt;div&gt;8 - (Vcc) &lt;b&gt;Positive supply voltage&lt;/b&gt;, from 3 - 15V&lt;/div&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;div&gt;&lt;b&gt;&lt;u&gt;The Circuit : Monostable mode&lt;/u&gt;&lt;/b&gt;&lt;/div&gt;&lt;div&gt;This experiment uses the 555 timer in 'monostable' mode, when we trigger the chip, it will emit a pulse of a length determined by the capacitor attached to pin 6, the larger the capacitance, the longer the length of the pulse. &lt;/div&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;div&gt;The circuit is wired up so when a button is pressed, it pulls pin 2 low, triggering the IC, a pulse is delivered on pin 3 thus powering the LED in the circuit. A potentiometer is connected in between the switch (connected to the trigger) and ground, by varying this pot, the pin is pulled to differing voltages, only if the pin is pulled below 1/3 of the supply voltage will the IC be triggered.&lt;/div&gt;&lt;div&gt;(more great info here &lt;a href=&quot;http://www.kpsec.freeuk.com/555timer.htm&quot;&gt;http://www.kpsec.freeuk.com/555timer.htm&lt;/a&gt;)&lt;/div&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;div&gt;I plan on playing a bit with this chip and documenting my experiences further, I'm getting quite a good idea of how to use it.&lt;/div&gt;&lt;/div&gt;
</content>
 </entry>
 
 <entry>
   <title>Learning Processing: Chapter 5.1 - 5.3</title>
   <link href="http://willprice.org//Learning Processing/2011/04/25/learning-processing-chapter-51-53.html"/>
   <updated>2011-04-25T00:00:00+01:00</updated>
   <id>http://willprice.org/Learning Processing/2011/04/25/learning-processing-chapter-51-53</id>
   <content type="html">&lt;div class='post'&gt;
&lt;div&gt;&lt;b&gt;&lt;u&gt;CHAPTER 5: CONDITIONALS:&lt;/u&gt;&lt;/b&gt;&lt;/div&gt;&lt;div&gt; So today I taught myself to use conditionals (haven't finished the chapter yet!). Boolean expressions are the foundation of conditionals, a boolean expression is a &lt;i&gt;true/false question&lt;/i&gt;, these are the only types of questions computers can answer. An example of a boolean expression:&lt;/div&gt;&lt;div&gt;&lt;blockquote&gt;&lt;/blockquote&gt;&lt;blockquote&gt;&quot;15 &amp;gt; 20 false&quot;&lt;/blockquote&gt;In processing there are&lt;i&gt; 3 types&lt;/i&gt; of conditionals:&lt;/div&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;div&gt;- &lt;i&gt;if &lt;/i&gt;statements&lt;/div&gt;&lt;div&gt;   e.g. &quot;If x&amp;gt;y do something&quot;&lt;/div&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;div&gt;- &lt;i&gt;else &lt;/i&gt;statements&lt;/div&gt;&lt;div&gt;   e.g. &quot;If x&amp;gt;y (do something), else (do this instead)&quot;&lt;/div&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;div&gt;- &lt;i&gt;else if &lt;/i&gt;statements&lt;/div&gt;&lt;div&gt;   e.g. &quot;If x&amp;gt;y (do something), else if (do this instead), else (quit)&quot;&lt;/div&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;div&gt;You can only ever have 1 &lt;i&gt;else &lt;/i&gt; and 1 &lt;i&gt;if &lt;/i&gt; in a sketch,&lt;/div&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;div&gt;&lt;u&gt;Ex 5.1:&lt;/u&gt;&lt;/div&gt;&lt;iframe width=&quot;428&quot; height=&quot;480&quot; scrolling=&quot;no&quot; frameborder=&quot;0&quot; src=&quot;http://www.openprocessing.org/visuals/iframe.php?visualID=27557&amp;amp;width=400&amp;amp;height=400&amp;amp;border=true&quot;&gt;&lt;/iframe&gt;&lt;div&gt;&lt;span class=&quot;Apple-style-span&quot;&gt;&lt;i&gt;(check this out on the open processing website, it needs to be run multiple times to give different background colours and prints stuff in the command line, maybe just DL the code and paste it in processing and run it)&lt;/i&gt;&lt;/span&gt;&lt;/div&gt;&lt;div&gt;&lt;span class=&quot;Apple-style-span&quot;&gt;&lt;i&gt;&lt;br /&gt;&lt;/i&gt;&lt;/span&gt;&lt;/div&gt;&lt;div&gt;&lt;span class=&quot;Apple-style-span&quot;&gt;&lt;i&gt;&lt;br /&gt;&lt;/i&gt;&lt;/span&gt;&lt;/div&gt;&lt;div&gt;&lt;span class=&quot;Apple-style-span&quot;&gt;&lt;a href=&quot;http://www.learningprocessing.com/exercises/chapter-5/exercise-5-2/&quot;&gt;Ex 5.2&lt;/a&gt; gave me a bit of trouble, I couldn't figure out what was wrong in the code on the 2nd problem. I didn't spot two if statements were used vs. 1 if and 1 else (which is what the second column of code uses). &lt;/span&gt;&lt;/div&gt;&lt;div&gt;&lt;span class=&quot;Apple-style-span&quot;&gt;&lt;br /&gt;&lt;/span&gt;&lt;/div&gt;&lt;div&gt;&lt;span class=&quot;Apple-style-span&quot;&gt;Shiffman's website is pretty great, It's really handy to be able to check out whether you are wrong or right and you can just paste the code if you can't be bothered to write it out (which I don't usually do, I usually think about whats happening when I type it in, tonight I couldn't be bothered though!)&lt;/span&gt;&lt;/div&gt;&lt;div&gt;&lt;span class=&quot;Apple-style-span&quot;&gt;&lt;br /&gt;&lt;/span&gt;&lt;/div&gt;&lt;div&gt;&lt;b&gt;&lt;u&gt;&lt;span class=&quot;Apple-style-span&quot;&gt;5.3 CONDITIONALS IN A SKETCH&lt;/span&gt;&lt;/u&gt;&lt;/b&gt;&lt;/div&gt;&lt;div&gt;&lt;b&gt;&lt;u&gt;&lt;span class=&quot;Apple-style-span&quot;&gt;&lt;br /&gt;&lt;/span&gt;&lt;/u&gt;&lt;/b&gt;&lt;/div&gt;&lt;div&gt;&lt;span class=&quot;Apple-style-span&quot;&gt;The first part of chapter 5.3 gives you some pseudo code, I wanted to test my coding skills so before turning the page I implemented the steps into code to see how my code compared to Shiffman's.&lt;/span&gt;&lt;/div&gt;&lt;div&gt;&lt;br /&gt;&lt;iframe width=&quot;228&quot; height=&quot;280&quot; scrolling=&quot;no&quot; frameborder=&quot;0&quot; src=&quot;http://www.openprocessing.org/visuals/iframe.php?visualID=27561&amp;amp;width=200&amp;amp;height=200&amp;amp;border=true&quot;&gt;&lt;/iframe&gt;&lt;br /&gt;&lt;div&gt;&lt;/div&gt;&lt;b&gt;My Code:&lt;/b&gt;&lt;br /&gt;&lt;pre style=&quot;font-family:arial;font-size:12px;border:1px dashed #CCCCCC;width:99%;height:auto;overflow:auto;background:#f0f0f0;;background-image:URL(http://2.bp.blogspot.com/_z5ltvMQPaa8/SjJXr_U2YBI/AAAAAAAAAAM/46OqEP32CJ8/s320/codebg.gif);padding:0px;color:#000000;text-align:left;line-height:20px;&quot;&gt;&lt;code style=&quot;color:#000000;word-wrap:normal;&quot;&gt; //set values and types of variable of RGB.&lt;br /&gt;&lt;br /&gt;float r = mouseX;&lt;br /&gt;float g = 100;&lt;br /&gt;float b = 150;&lt;br /&gt;&lt;br /&gt;// set window size and enable anti-aliasing&lt;br /&gt;void setup() {&lt;br /&gt;size(200,200);&lt;br /&gt;smooth();&lt;br /&gt;}&lt;br /&gt;&lt;br /&gt;//start loop&lt;br /&gt;void draw() {&lt;br /&gt;&lt;br /&gt;if (r &amp;gt; 255) { //if 'r' is bigger than 255 set it to 255 (i.e. limit it)&lt;br /&gt;r = 255;&lt;br /&gt;}&lt;br /&gt;else if(r &amp;lt; 0) { //if 'r' is smaller than 0 set it to 0 (limit it)&lt;br /&gt;r = 0;&lt;br /&gt;}&lt;br /&gt;else {&lt;br /&gt;println(&quot;r = &quot; + r); //print line to debug to make sure 0&amp;lt;r&amp;lt;255&lt;br /&gt;}&lt;br /&gt;&lt;br /&gt;&lt;br /&gt;if (mouseX &amp;lt;= 100) { //if mouseX is on the left increase 'r' value by 5&lt;br /&gt;r = r + 5;&lt;br /&gt;}&lt;br /&gt;else if (mouseX &amp;gt; 100) { // if mouseX is on the right decrease 'r' value by 5&lt;br /&gt;r = r - 5;&lt;br /&gt;}&lt;br /&gt;background(r,g,b);&lt;br /&gt;}&lt;br /&gt;&lt;br /&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;div&gt;&lt;b&gt;&lt;br /&gt;&lt;/b&gt;&lt;/div&gt;&lt;div&gt;&lt;b&gt;Vs. &lt;a href=&quot;http://www.learningprocessing.com/examples/chapter-5/example-5-1/&quot;&gt;Shiffman's code&lt;/a&gt;:&lt;/b&gt;&lt;/div&gt;&lt;div&gt;&lt;pre style=&quot;font-family:arial;font-size:12px;border:1px dashed #CCCCCC;width:99%;height:auto;overflow:auto;background:#f0f0f0;;background-image:URL(http://2.bp.blogspot.com/_z5ltvMQPaa8/SjJXr_U2YBI/AAAAAAAAAAM/46OqEP32CJ8/s320/codebg.gif);padding:0px;color:#000000;text-align:left;line-height:20px;&quot;&gt;&lt;code style=&quot;color:#000000;word-wrap:normal;&quot;&gt;&lt;br /&gt;// Learning Processing&lt;br /&gt;// Daniel Shiffman&lt;br /&gt;// http://www.learningprocessing.com&lt;br /&gt;&lt;br /&gt;// Example 5-1: Conditionals&lt;br /&gt;&lt;br /&gt;// Variables&lt;br /&gt;float r = 150;&lt;br /&gt;float g = 0;&lt;br /&gt;float b = 0;&lt;br /&gt;&lt;br /&gt;void setup() {&lt;br /&gt;size(200,200);&lt;br /&gt;}&lt;br /&gt;&lt;br /&gt;void draw() {&lt;br /&gt;// Draw stuff&lt;br /&gt;background(r,g,b);&lt;br /&gt;stroke(255);&lt;br /&gt;line(width/2,0,width/2,height);&lt;br /&gt;&lt;br /&gt;&lt;br /&gt;// If the mouse is on the right side of the screen is equivalent to&lt;br /&gt;// &quot;if mouseX is greater than width divided by 2.&quot;&lt;br /&gt;if(mouseX &amp;gt; width/2) {&lt;br /&gt;r = r + 1;&lt;br /&gt;} else {&lt;br /&gt;r = r - 1;&lt;br /&gt;}&lt;br /&gt;&lt;br /&gt;// If r is greater than 255, set it back to 255.&lt;br /&gt;// If r is less than 0, set it back to 0.&lt;br /&gt;if (r &amp;gt; 255) {&lt;br /&gt;r = 255;&lt;br /&gt;} else if (r &amp;lt; 0) {&lt;br /&gt;r = 0;&lt;br /&gt;}&lt;br /&gt;}&lt;br /&gt;&lt;br /&gt;&lt;/code&gt;&lt;/pre&gt;&lt;br /&gt;&lt;div&gt;&lt;/div&gt;&lt;/div&gt;Arghh! And then after all that we learn there is a  function named &lt;i&gt;&quot;constrain()&quot; &lt;/i&gt;which does this all for you e.g. &lt;i&gt;r = constrain(r,0,255);&lt;/i&gt;&lt;div&gt;&lt;/div&gt;&lt;div&gt;That would have been far easier, but it's nice to know I understand the concept of how to implement constraints without a specialised function.&lt;/div&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;div&gt;Example 5.2 improves upon this last sketch by changing &lt;i&gt;r,g &lt;/i&gt;and &lt;i&gt;b.&lt;/i&gt; It also makes use of the &lt;i&gt;constrain()&lt;/i&gt; function.&lt;/div&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;div&gt;&lt;b&gt;&lt;a href=&quot;http://www.learningprocessing.com/examples/chapter-5/example-5-2/&quot;&gt;Shiffman's code&lt;/a&gt;:&lt;/b&gt;&lt;/div&gt;&lt;div&gt;&lt;b&gt;&lt;br /&gt;&lt;/b&gt;&lt;/div&gt;&lt;pre style=&quot;font-family:arial;font-size:12px;border:1px dashed #CCCCCC;width:99%;height:auto;overflow:auto;background:#f0f0f0;;background-image:URL(http://2.bp.blogspot.com/_z5ltvMQPaa8/SjJXr_U2YBI/AAAAAAAAAAM/46OqEP32CJ8/s320/codebg.gif);padding:0px;color:#000000;text-align:left;line-height:20px;&quot;&gt;&lt;code style=&quot;color:#000000;word-wrap:normal;&quot;&gt;&lt;br /&gt;// Learning Processing&lt;br /&gt;// Daniel Shiffman&lt;br /&gt;// http://www.learningprocessing.com&lt;br /&gt;&lt;br /&gt;// Example 5-2: More conditionals&lt;br /&gt;&lt;br /&gt;// Three variables for the background color.&lt;br /&gt;float r = 0;&lt;br /&gt;float b = 0;&lt;br /&gt;float g = 0;&lt;br /&gt;&lt;br /&gt;void setup() {&lt;br /&gt;size(200,200);&lt;br /&gt;}&lt;br /&gt;&lt;br /&gt;void draw() {&lt;br /&gt;// Color the background and draw lines to divide the window in quadrants.&lt;br /&gt;background(r,g,b);&lt;br /&gt;stroke(0);&lt;br /&gt;line(width/2,0,width/2,height);&lt;br /&gt;line(0,height/2,width,height/2);&lt;br /&gt;&lt;br /&gt;// If the mouse is on the right hand side of the window, increase red.&lt;br /&gt;// Otherwise, it is on the left hand side and decrease red.&lt;br /&gt;if (mouseX &amp;gt; width/2) {&lt;br /&gt;r = r + 1;&lt;br /&gt;} else {&lt;br /&gt;r = r - 1;&lt;br /&gt;}&lt;br /&gt;&lt;br /&gt;// If the mouse is on the bottom of the window, increase blue.&lt;br /&gt;// Otherwise, it is on the top and decrease blue.&lt;br /&gt;if (mouseY &amp;gt; height/2) {&lt;br /&gt;b = b + 1;&lt;br /&gt;} else {&lt;br /&gt;b = b - 1;&lt;br /&gt;}&lt;br /&gt;&lt;br /&gt;// If the mouse is pressed (using the system variable mousePressed)&lt;br /&gt;if (mousePressed) {&lt;br /&gt;g = g + 1;&lt;br /&gt;} else {&lt;br /&gt;g = g - 1;&lt;br /&gt;}&lt;br /&gt;&lt;br /&gt;// Constrain all color values to between 0 and 255.&lt;br /&gt;r = constrain(r,0,255);&lt;br /&gt;g = constrain(g,0,255);&lt;br /&gt;b = constrain(b,0,255);&lt;br /&gt;}&lt;br /&gt;&lt;br /&gt;&lt;/code&gt;&lt;/pre&gt;In 5.4 I'll learn about Logical operator (AND, OR, NOT) which looks quite interesting and should hopefully be transferable to logic circuits when I get to them in MAKE: Electronics. This was quite a quite a long chapter so far, it's been hard but rewarding. I'm glad I've tried to implement the examples myself before looking at the code, it makes sure I understand the principles even if it is tough going!&lt;div&gt;&lt;/div&gt;&lt;/div&gt;
</content>
 </entry>
 
 <entry>
   <title>MAKE: Electronics: Experiment 15 (Burglar Alarm)</title>
   <link href="http://willprice.org//Electonics/Burglar Alarm/MAKE Electronics/2011/04/22/make-electronics-experiment-15-burglar.html"/>
   <updated>2011-04-22T00:00:00+01:00</updated>
   <id>http://willprice.org/Electonics/Burglar Alarm/MAKE Electronics/2011/04/22/make-electronics-experiment-15-burglar</id>
   <content type="html">&lt;div class='post'&gt;
&lt;b style=&quot;font-family: Ubuntu, UbuntuBeta !important;&quot;&gt;&lt;u style=&quot;font-family: Ubuntu, UbuntuBeta !important;&quot;&gt;EXPERIMENT 15: INTRUSION ALARM (REVISITED):&lt;/u&gt;&lt;/b&gt;&lt;br /&gt;&lt;div&gt;&lt;b&gt;&lt;u&gt;&lt;br /&gt;&lt;/u&gt;&lt;/b&gt;&lt;/div&gt;&lt;div&gt;&lt;b&gt;&lt;u&gt;&lt;br /&gt;&lt;object height=&quot;344&quot; width=&quot;425&quot;&gt;&lt;param name=&quot;movie&quot; value=&quot;http://www.youtube.com/v/p3N6f3BW1cc?hl=en&amp;amp;fs=1&quot;&gt;&lt;param name=&quot;allowFullScreen&quot; value=&quot;true&quot;&gt;&lt;param name=&quot;allowscriptaccess&quot; value=&quot;always&quot;&gt;&lt;embed src=&quot;http://www.youtube.com/v/p3N6f3BW1cc?hl=en&amp;amp;fs=1&quot; type=&quot;application/x-shockwave-flash&quot; allowscriptaccess=&quot;always&quot; allowfullscreen=&quot;true&quot; width=&quot;425&quot; height=&quot;344&quot;&gt;&lt;/embed&gt;&lt;/object&gt;&lt;/u&gt;&lt;/b&gt;&lt;/div&gt;&lt;div&gt;&lt;i&gt;&lt;span class=&quot;Apple-style-span&quot;&gt;(this video is showing how the relay is wired up, once the sensor circuit is broken (open) the relay energises, when the sensor circuit is closed, the relay stays energised)&lt;/span&gt;&lt;/i&gt;&lt;/div&gt;&lt;div&gt;&lt;b&gt;&lt;br /&gt;&lt;/b&gt;&lt;/div&gt;&lt;div&gt;&lt;b&gt;&lt;br /&gt;&lt;/b&gt;&lt;/div&gt;&lt;b&gt;&lt;object height=&quot;344&quot; width=&quot;425&quot;&gt;&lt;param name=&quot;movie&quot; value=&quot;http://www.youtube.com/v/P6BSgw2qxgI?hl=en&amp;amp;fs=1&quot;&gt;&lt;param name=&quot;allowFullScreen&quot; value=&quot;true&quot;&gt;&lt;param name=&quot;allowscriptaccess&quot; value=&quot;always&quot;&gt;&lt;embed src=&quot;http://www.youtube.com/v/P6BSgw2qxgI?hl=en&amp;amp;fs=1&quot; type=&quot;application/x-shockwave-flash&quot; allowscriptaccess=&quot;always&quot; allowfullscreen=&quot;true&quot; width=&quot;425&quot; height=&quot;344&quot;&gt;&lt;/embed&gt;&lt;/object&gt;&lt;/b&gt;&lt;br /&gt;&lt;div&gt;&lt;b&gt;&lt;br /&gt;&lt;/b&gt;&lt;/div&gt;&lt;div&gt;&lt;div&gt;&lt;u&gt;Part 1: Stripboard Layout:&lt;/u&gt;&lt;/div&gt;&lt;div&gt;This experiment calls for a protoboard in the same layout of a breadboard, which does seem a great way to introduce beginners to transferring projects from solderless breadboard to permanent perfboard. However I found this nigh on impossible to find in the UK. I settled using a perfboard and arranging the layout in a somewhat similar manner to a breadboard.&lt;/div&gt;&lt;div&gt;The picture shows the top side and under side of the board, I have mirrored the photograph so the top right of the up side = the top right of the under side, basically, you can overlay the pictures over each other as they correspond (I'm not really sure how to say this more clearly!)&lt;/div&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;table style=&quot;width: auto;&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td&gt;&lt;a href=&quot;https://picasaweb.google.com/lh/photo/JwFYo2RqytXj-h4E4keV6MTAw1aMUgxnzJpSY1lHcVc?feat=embedwebsite&quot;&gt;&lt;img height=&quot;400&quot; src=&quot;https://lh6.googleusercontent.com/-zFwN5CT8fKM/TbCd4VjAquI/AAAAAAAAA1w/vbaQIvLRYY0/s400/Underside%2520and%2520Topside%2520of%2520protoboard.jpg&quot; width=&quot;303&quot; /&gt;&lt;/a&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td style=&quot;font-family: arial,sans-serif; font-size: 11px; text-align: right;&quot;&gt;From &lt;a href=&quot;https://picasaweb.google.com/105545134685620195788/MAKEElectronicsExperiment15BurglarAlarm?authuser=0&amp;amp;feat=embedwebsite&quot;&gt;MAKE Electronics: Experiment 15: Burglar Alarm&lt;/a&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;br /&gt;&lt;div&gt;At the top of the board is the alarm circuit created back in experiment 11. At the bottom is a circuit that when triggered by an opening in the sensor circuit (i.e. opening a door) turns power on to the alarm circuit. If the sensor circuit is then closed again (door closed) power is still supplied to the alarm so it does not turn off. This is explained exceptionally well in the book however I think I only truly appreciated how the circuit worked when making my own (far less elegant) arrangement on a breadboard to see how it all worked from the schematic diagram. &lt;/div&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;div&gt;I soldered everything on the stripboard first, then I took a dremel to it with a cutting wheel and trimmed it down and then sanded the sides, it fits in just between the slots in the project box so I don't have to screw it down (very convenient!).&lt;/div&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;div&gt;&lt;u&gt;Part 2: Project Box&lt;/u&gt;&lt;/div&gt;&lt;div&gt;The point of this experiment is to show how one goes from a fairly minimalist circuit on the breadboard to a fully-fledged project. This requires casing to maintain the longevity of the project and also somewhere to mount a user interface. The UI for this project is fairly simple, it consists of:&lt;/div&gt;&lt;div&gt;(i) An &lt;i&gt;Arming&lt;/i&gt; button - arms the alarm (and lights green LED to indicate the alarm is armed)&lt;/div&gt;&lt;div&gt;(ii) A &lt;i&gt;Test &lt;/i&gt;button - (un-armed) lights up LED when sensor circuit is close, (armed) tests alarm circuit/speaker&lt;/div&gt;&lt;div&gt;&lt;br /&gt;&lt;table style=&quot;width: auto;&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td&gt;&lt;a href=&quot;https://picasaweb.google.com/lh/photo/r3kqLd8l4MoSMODx8k2YD8TAw1aMUgxnzJpSY1lHcVc?feat=embedwebsite&quot;&gt;&lt;img height=&quot;300&quot; src=&quot;https://lh4.googleusercontent.com/-uDxpvl23yMM/TbCd0uYx1BI/AAAAAAAAA1w/GZphwxA0Ivc/s400/DSCF3867.JPG&quot; width=&quot;400&quot; /&gt;&lt;/a&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td style=&quot;font-family: arial,sans-serif; font-size: 11px; text-align: right;&quot;&gt;From &lt;a href=&quot;https://picasaweb.google.com/105545134685620195788/MAKEElectronicsExperiment15BurglarAlarm?authuser=0&amp;amp;authkey=Gv1sRgCLXCp_z7r--PwwE&amp;amp;feat=embedwebsite&quot;&gt;MAKE Electronics: Experiment 15: Burglar Alarm&lt;/a&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;br /&gt;&lt;/div&gt;&lt;div&gt;I added some banana plugs to my magnetic sensor, I currently don't have anywhere to put it, Platt says later in the book that I'll learn how to integrate an 'away from home' feature and add a keypad to it (Hopefully I can figure out how to use a matrix keypad instead of a common pin type keypad) So I might get round to using it pending on how well it turns out. When activated the alarm isn't exactly loud so I will build an amplifier circuit at some point (I tried driving it with an old amp and it goes fairly loud for its size, it can certainly be ear piercing) &lt;/div&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;div style=&quot;font-family: arial,sans-serif; font-size: 13px; width: 400px;&quot;&gt;&lt;div&gt;&lt;embed flashvars=&quot;host=picasaweb.google.com&amp;amp;noautoplay=1&amp;amp;hl=en_GB&amp;amp;feat=flashalbum&amp;amp;RGB=0x000000&amp;amp;feed=https%3A%2F%2Fpicasaweb.google.com%2Fdata%2Ffeed%2Fapi%2Fuser%2F105545134685620195788%2Falbumid%2F5598146669219072273%3Falt%3Drss%26kind%3Dphoto%26authkey%3DGv1sRgCLXCp_z7r--PwwE%26hl%3Den_GB&quot; height=&quot;267&quot; pluginspage=&quot;http://www.macromedia.com/go/getflashplayer&quot; src=&quot;https://picasaweb.google.com/s/c/bin/slideshow.swf&quot; type=&quot;application/x-shockwave-flash&quot; width=&quot;400&quot;&gt;&lt;/embed&gt;&lt;/div&gt;&lt;span style=&quot;float: left;&quot;&gt;&lt;a href=&quot;https://picasaweb.google.com/105545134685620195788/MAKEElectronicsExperiment15BurglarAlarm?authuser=0&amp;amp;authkey=Gv1sRgCLXCp_z7r--PwwE&amp;amp;feat=flashalbum&quot; style=&quot;color: #3964c2;&quot;&gt;View all&lt;/a&gt;&lt;/span&gt;&lt;br /&gt;&lt;div style=&quot;text-align: right;&quot;&gt;&lt;a href=&quot;http://picasaweb.google.com/lh/getEmbed?feat=flashalbum&quot; style=&quot;color: #3964c2;&quot;&gt;Get your own&lt;/a&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;
</content>
 </entry>
 
 <entry>
   <title>Learning Processing: Chapter 4</title>
   <link href="http://willprice.org//Learning Processing/2011/04/17/learning-processing-chapter-4.html"/>
   <updated>2011-04-17T00:00:00+01:00</updated>
   <id>http://willprice.org/Learning Processing/2011/04/17/learning-processing-chapter-4</id>
   <content type="html">&lt;div class='post'&gt;
&lt;b&gt;&lt;u&gt;CHAPTER 4:  Variables&lt;/u&gt;&lt;/b&gt;&lt;div&gt;&lt;b&gt;&lt;u&gt;&lt;br /&gt;&lt;/u&gt;&lt;/b&gt;&lt;/div&gt;&lt;div&gt;Chapter 4 is the start of 'Lesson 2' focussing on the rest of the basics of programming: variables, conditionals and loops. &lt;/div&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;div&gt;A variable is a pointer to a location in the computers memory where a value is stored. This value can &lt;i&gt;vary&lt;/i&gt; hence the name. The chapter introduces the different types of variables; &lt;i&gt;int, float, boolean, char, byte, short, long &lt;/i&gt;and &lt;i&gt;double. &lt;/i&gt;Each should be used in a different circumstance depending on the need, the book explains where to use each one clearly and concisely.  Variables can be named, and addressed in a sketch. for example &lt;i&gt;mouseX &lt;/i&gt;is an integer storing the mouses X-coordinate - this is a system-wide variable, one already established in processing, these are mainly commonly used variables (e.g. frameCount) and so have been built into the language. &lt;/div&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;div&gt;The exercise for using system variables gets you to create a little picture out of basic geometry that will scale itself accordingly when you change the size of the window. I thought that the large square was itself a square and not the bounds of the &lt;i&gt;size&lt;/i&gt; therefore my code is somewhat different to the code posted on Shiffmans website as I shall ellaborate on.&lt;/div&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;div&gt;&lt;br /&gt;&lt;iframe src=&quot;http://www.openprocessing.org/visuals/iframe.php?visualID=27230&amp;amp;width=200&amp;amp;height=200&amp;amp;border=true&quot; frameborder=&quot;0&quot; height=&quot;280&quot; scrolling=&quot;no&quot; width=&quot;228&quot;&gt;&lt;/iframe&gt;&lt;br /&gt;&lt;br /&gt;&lt;iframe id=&quot;iframe4aef2f41-8c76-4b69-bb9a-a59d44c0cd27&quot; src=&quot;http://www.blogtrog.com/code.aspx?id=4aef2f41-8c76-4b69-bb9a-a59d44c0cd27&quot; style=&quot;width: 600px; height: 310px; border: 1px solid rgb(224, 224, 224); margin: 0px;&quot; frameborder=&quot;0&quot;&gt;&lt;/iframe&gt;&lt;/div&gt;&lt;div id=&quot;noIframeDiv4aef2f41-8c76-4b69-bb9a-a59d44c0cd27&quot; style=&quot;display: block; margin: 0px;&quot;&gt;&lt;pre&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;div&gt;&lt;code&gt;&lt;a href=&quot;http://www.learningprocessing.com/exercises/chapter-4/exercise-4-5/&quot;&gt;Shiffman's Code:&lt;/a&gt;&lt;br /&gt;&lt;br /&gt;&lt;iframe id=&quot;iframee59651b0-270f-42e0-bf37-fa46616f923a&quot; src=&quot;http://www.blogtrog.com/code.aspx?id=e59651b0-270f-42e0-bf37-fa46616f923a&quot; style=&quot;width: 600px; height: 300px; border: 1px solid rgb(224, 224, 224); margin: 0px;&quot; frameborder=&quot;0&quot;&gt;&lt;/iframe&gt;&lt;br /&gt;&lt;/code&gt;&lt;div id=&quot;noIframeDive59651b0-270f-42e0-bf37-fa46616f923a&quot; style=&quot;display: block; margin: 0px;&quot;&gt;&lt;pre&gt;&lt;div&gt;&lt;span class=&quot;Apple-style-span&quot; style=&quot;white-space: normal;&quot;&gt;&lt;i&gt;&lt;br /&gt;&lt;a href=&quot;http://processing.org/reference/random_.html&quot;&gt;random()&lt;/a&gt;&lt;/i&gt; is another function you learn how to use in this chapter. It focusses on using it in variables to create movement (e.g. Zoog the alien moving from side to side). The syntax is as follows &lt;i&gt;random(low value bound,high value bound)&lt;/i&gt; - It's pretty easy to start implementing random values into your sketches after learning the basics.&lt;/span&gt;&lt;/div&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
</content>
 </entry>
 
 <entry>
   <title>MAKE: Electronics: Experiment 14</title>
   <link href="http://willprice.org//MAKE/Electronics/2011/04/14/make-electronics-experiment-14.html"/>
   <updated>2011-04-14T00:00:00+01:00</updated>
   <id>http://willprice.org/MAKE/Electronics/2011/04/14/make-electronics-experiment-14</id>
   <content type="html">&lt;div class='post'&gt;
&lt;b&gt;&lt;u&gt;EXPERIMENT 14: A PULSING GLOW:&lt;/u&gt;&lt;/b&gt;&lt;br /&gt;&lt;div&gt;This project takes your new found knowledge of soldering, breadboarding and PUTs to make a pulsing LED mounted on stripboard. I found this fairly easy, but it was a good practice of translating schematic to stripboard, the book does have a diagram of how the components should be arranged; but you can try and convert it yourself first before doing this - it is good practice!&lt;/div&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;div&gt;The way the circuit works is that the capacitor connected to the anode charges, when it reaches a voltage high enough to pass through the gate the capacitor discharges passing current to the LED, the capacitor discharges resulting in the LED fading from bright to dim. However unlike the last LED oscillating circuit in the book there is a capacitor attached to the LED provide it with current, so it doesn't flash on and off, as instead of turning off the LED is provided with enough current to be lit dimly this creates a 'pulsing glow' as Platt puts it. &lt;/div&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;div style=&quot;font-family: arial,sans-serif; font-size: 13px; width: 400px;&quot;&gt;&lt;div&gt;&lt;embed flashvars=&quot;host=picasaweb.google.com&amp;amp;noautoplay=1&amp;amp;hl=en_GB&amp;amp;feat=flashalbum&amp;amp;RGB=0x000000&amp;amp;feed=https%3A%2F%2Fpicasaweb.google.com%2Fdata%2Ffeed%2Fapi%2Fuser%2F105545134685620195788%2Falbumid%2F5595530805713238209%3Falt%3Drss%26kind%3Dphoto%26authkey%3DGv1sRgCPbj7oywgObl4wE%26hl%3Den_GB&quot; height=&quot;267&quot; pluginspage=&quot;http://www.macromedia.com/go/getflashplayer&quot; src=&quot;https://picasaweb.google.com/s/c/bin/slideshow.swf&quot; type=&quot;application/x-shockwave-flash&quot; width=&quot;400&quot;&gt;&lt;/embed&gt;&lt;/div&gt;&lt;span style=&quot;float: left;&quot;&gt;&lt;a href=&quot;https://picasaweb.google.com/105545134685620195788/MAKEElectronicsExperiment14?authuser=0&amp;amp;authkey=Gv1sRgCPbj7oywgObl4wE&amp;amp;feat=flashalbum&quot; style=&quot;color: #3964c2;&quot;&gt;View all&lt;/a&gt;&lt;/span&gt;&lt;br /&gt;&lt;div style=&quot;text-align: right;&quot;&gt;&lt;a href=&quot;http://picasaweb.google.com/lh/getEmbed?feat=flashalbum&quot; style=&quot;color: #3964c2;&quot;&gt;Get your own&lt;/a&gt;&lt;/div&gt;&lt;/div&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;table style=&quot;width: auto;&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td&gt;&lt;a href=&quot;https://picasaweb.google.com/lh/photo/QnBYxAnMvbyF5HrsNAQJIYw0IKFfp4Wx46k7z-QuzVo?feat=embedwebsite&quot;&gt;&lt;img height=&quot;240&quot; src=&quot;https://lh5.googleusercontent.com/-iLuw-fEl1Ts/TadSad6or6I/AAAAAAAAA2M/QcUsDEol4Xc/s800/DSCF3853.jpg&quot; width=&quot;320&quot; /&gt;&lt;/a&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td style=&quot;font-family: arial,sans-serif; font-size: 11px; text-align: right;&quot;&gt;From &lt;a href=&quot;https://picasaweb.google.com/105545134685620195788/MAKEElectronicsVideos?authuser=0&amp;amp;feat=embedwebsite&quot;&gt;MAKE Electronics: Videos&lt;/a&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/div&gt;
</content>
 </entry>
 
 <entry>
   <title>MAKE: Electronics: Experiment 13</title>
   <link href="http://willprice.org//MAKE/Electronics/2011/04/13/make-electronics-experiment-13.html"/>
   <updated>2011-04-13T00:00:00+01:00</updated>
   <id>http://willprice.org/MAKE/Electronics/2011/04/13/make-electronics-experiment-13</id>
   <content type="html">&lt;div class='post'&gt;
&lt;b&gt;&lt;u&gt;EXPERIMENT 13: BROIL AND LED:&lt;/u&gt;&lt;/b&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;div&gt;&lt;span class=&quot;Apple-style-span&quot; &gt;This experiment demonstrates how heat affects components - in particular, the LED. One heats the LED with a soldering iron for a while with a copper aligator clip (which diverts heat from the LED, thus preventing it from damage). After you remove it and just use the soldering iron on its own, it's luminosity slowly decreases in intensity for a period of time before it burns out due to excessive heat.&lt;/span&gt;&lt;/div&gt;&lt;div&gt;&lt;span class=&quot;Apple-style-span&quot; &gt;OK, I have a little confession to make, I failed this experiment, the LED only got slightly dim after 5 minutes of my soldering iron at 450&lt;span class=&quot;Apple-style-span&quot; style=&quot;line-height: 20px; &quot;&gt;°C so I gave up!&lt;/span&gt;&lt;/span&gt;&lt;/div&gt;&lt;div&gt;&lt;span class=&quot;Apple-style-span&quot; style=&quot;line-height: 20px;&quot;&gt;&lt;br /&gt;&lt;/span&gt;&lt;/div&gt;&lt;embed type=&quot;application/x-shockwave-flash&quot; src=&quot;https://picasaweb.google.com/s/c/bin/slideshow.swf&quot; width=&quot;400&quot; height=&quot;267&quot; flashvars=&quot;host=picasaweb.google.com&amp;amp;hl=en_GB&amp;amp;feat=flashalbum&amp;amp;RGB=0x000000&amp;amp;feed=https%3A%2F%2Fpicasaweb.google.com%2Fdata%2Ffeed%2Fapi%2Fuser%2Fwill.price94%2Falbumid%2F5595180125436545777%3Falt%3Drss%26kind%3Dphoto%26hl%3Den_GB&quot; pluginspage=&quot;http://www.macromedia.com/go/getflashplayer&quot;&gt;&lt;/embed&gt;&lt;div&gt;&lt;i&gt;&lt;span class=&quot;Apple-style-span&quot; &gt;The stop watch indicates how long the iron had been applied to the LED and the iron station shows the temperature the iron was at.&lt;/span&gt;&lt;/i&gt;&lt;/div&gt;&lt;/div&gt;
</content>
 </entry>
 
 <entry>
   <title>Learning Processing: Chapter 3</title>
   <link href="http://willprice.org//Learning Processing/2011/04/13/learning-processing-chapter-3.html"/>
   <updated>2011-04-13T00:00:00+01:00</updated>
   <id>http://willprice.org/Learning Processing/2011/04/13/learning-processing-chapter-3</id>
   <content type="html">&lt;div class='post'&gt;
&lt;b&gt;&lt;u&gt;Chapter 3: 'Interaction'&lt;/u&gt;&lt;/b&gt;&lt;div&gt;&lt;b&gt;&lt;u&gt;&lt;br /&gt;&lt;/u&gt;&lt;/b&gt;&lt;/div&gt;&lt;div&gt;Chapter 3 covers the 'flow' of a program; what &lt;i&gt;setup() &lt;/i&gt;and &lt;i&gt;draw() &lt;/i&gt;do and how to use them, mouse interaction, &lt;i&gt;dynamic &lt;/i&gt;sketches and finally handling events (mouse clicks and key presses).&lt;/div&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;div&gt;I've learnt that &lt;i&gt;setup() &lt;/i&gt;is run only once when the sketch is run, it sets the 'initialization code' as Shiffman puts it. After &lt;i&gt;setup(), draw() &lt;/i&gt;is run, this runs, then loops back to the start of the code:&lt;/div&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;div&gt;&lt;i&gt;void setup() {&lt;/i&gt;&lt;/div&gt;&lt;div&gt;&lt;i&gt; //setup code&lt;/i&gt;&lt;/div&gt;&lt;div&gt;&lt;i&gt;}&lt;/i&gt;&lt;/div&gt;&lt;div&gt;&lt;i&gt;&lt;br /&gt;&lt;/i&gt;&lt;/div&gt;&lt;div&gt;&lt;i&gt;void draw() {&lt;/i&gt;&lt;/div&gt;&lt;div&gt;&lt;i&gt;  //code which loops&lt;/i&gt;&lt;/div&gt;&lt;div&gt;&lt;i&gt;}&lt;/i&gt;&lt;/div&gt;&lt;div&gt;&lt;i&gt;&lt;br /&gt;&lt;/i&gt;&lt;/div&gt;&lt;div&gt;The { } host a 'block of code' allowing one to manage code as an individual part of a program.&lt;/div&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;div&gt;&lt;u&gt;MOUSE FUNCTIONS:&lt;/u&gt;&lt;/div&gt;&lt;div&gt;&lt;i&gt;mouseX&lt;/i&gt; - the current mouse x-coordinate&lt;/div&gt;&lt;div&gt;&lt;i&gt;mouseY &lt;/i&gt;- the current mouse y-coordinate&lt;/div&gt;&lt;div&gt;&lt;i&gt;pmouseX &lt;/i&gt;- the mouse x-coordinate in the previous run through &lt;i&gt;draw()&lt;/i&gt;&lt;/div&gt;&lt;div&gt;&lt;i&gt;pmouseY - &lt;/i&gt;the mouse y-coordinate in the previous run through &lt;i style=&quot;font-family: Ubuntu, UbuntuBeta !important; &quot;&gt;draw()&lt;/i&gt;&lt;/div&gt;&lt;div&gt;&lt;i&gt;void mousePressed() - &lt;/i&gt;function that runs code when a mouse button is pressed&lt;/div&gt;&lt;div&gt;&lt;i&gt;void keyPressed() -&lt;/i&gt; function that runs code when a key on the keyboard is pressed&lt;/div&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;div&gt;I feel I have a good understanding of all the above, I am starting to realise how one goes about programming and how hard it will be in future implementing features, it shall definitely improve my logic, something I have been looking forward to doing, it's not very often we get stretched in school!&lt;/div&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;div&gt;This chapter completes 'Lesson 1' which covers the beginning of learning to program in processing. The end of lesson project is to create a dynamic sketch by interaction of the mouse and a static drawing. I have drawn a few things and added dynamics to them, currently I can't figure out how to export programs that actually display in webpages out, once I figure that out, they will be posted here.&lt;/div&gt;&lt;/div&gt;
</content>
 </entry>
 
 <entry>
   <title>Learning Processing: Chapter 2</title>
   <link href="http://willprice.org//Learning Processing/2011/04/13/learning-processing-chapter-2.html"/>
   <updated>2011-04-13T00:00:00+01:00</updated>
   <id>http://willprice.org/Learning Processing/2011/04/13/learning-processing-chapter-2</id>
   <content type="html">&lt;div class='post'&gt;
Chapter 2 focusses on the topic of 'Processing':&lt;br /&gt;- How to get the IDE&lt;div&gt;- Introducing the 'sketchbook'&lt;/div&gt;&lt;div&gt;- Interface&lt;/div&gt;&lt;div&gt;- The processing reference&lt;/div&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;div&gt;Essentially it is quite a dull chapter if you have already used the Processing IDE before but to those new to it, it will prove a nice introduction as to how to use the IDE and the reference.&lt;/div&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;div&gt;One problem I have found is with 'publishing' my programs, when I export them, and I have a folder containing the code and index.html, when I open index.html I don't see my program, the layout is how it should be but just a box where my program should display. I'm not sure what is causing this problem so I may have a browse on the processing forums to try and find a remedy to this problem!&lt;/div&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;/div&gt;
</content>
 </entry>
 
 <entry>
   <title>Learning Processing: Chapter 1</title>
   <link href="http://willprice.org//Learning Processing/2011/04/11/learning-processing-chapter-1.html"/>
   <updated>2011-04-11T00:00:00+01:00</updated>
   <id>http://willprice.org/Learning Processing/2011/04/11/learning-processing-chapter-1</id>
   <content type="html">&lt;div class='post'&gt;
&lt;img style=&quot;float:left; margin:0 10px 10px 0;cursor:pointer; cursor:hand;width: 338px; height: 500px;&quot; src=&quot;http://mainline.brynmawr.edu/Courses/cs110/fall2010/Images/BookCover.jpg&quot; border=&quot;0&quot; alt=&quot;&quot; /&gt;&lt;br /&gt;I've picked up another book to delve into, I've always wanted to learn to program, '&lt;i&gt;Processing&lt;/i&gt;' seemed the logical choice &lt;i&gt;Arduino&lt;/i&gt; (the programming language) is based on processing so I shall get a better understanding of syntax and how programs are written including the logic behind how they are structured (I've always been fascinated by this), thus giving me a step up when I go back to microcontrollers (after finishing this &amp;amp; Make: Electronics).&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;div&gt;The book is called &quot;&lt;b&gt;Learning Processing&lt;/b&gt;&quot; by &lt;b&gt;Daniel Shiffman&lt;/b&gt;&lt;/div&gt;&lt;div&gt;&lt;a href=&quot;http://www.learningprocessing.com/&quot;&gt;&lt;b&gt;&lt;/b&gt;http://www.learningprocessing.com/&lt;/a&gt;&lt;/div&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;div&gt;A few things drew me to this book, I like how it really takes you from not knowing a thing about programming, to a decent foundation. I think it is very important to learn the theory so when it comes to learning different languages you still have a thorough understanding of the paradigm but you only have to pick up the new aspects of the language.&lt;/div&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;div&gt;Processing is a language based on visual interaction vs text-based interaction. A program is written with text, displayed using visual then can be interacted with via mouse clicks (amongst other devices). Text-based languages operate by being written in text, producing text and then being interacted with by more text. Enough rambling, onto the first chapter...&lt;/div&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;div&gt;&lt;b&gt;&lt;u&gt;CHAPTER 1: Pixels&lt;/u&gt;&lt;/b&gt;&lt;/div&gt;&lt;div&gt;This chapter focuses on 'Pixels', it describes how to draw some basic euclidean shapes (e.g. lines, circles and triangles etc), colour theory (grayscale, RGB, transparency) - that's about it. The book introduces different exercises to have a bash at to make sure you understand and can implement the theory - I personally find this the strong point on the book so far (Yes, I am only on chapter 2 at the moment!)&lt;/div&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;div&gt;I've learnt that the grid the computer draws is different to the &quot;Cartesian coordinate system&quot; (The one you use in mathematics at school). The x-axis is drawn from left to right (lower -&amp;gt; higher value. This is the same as in the 'normal' graph system) however the y-axis is drawn from top to bottom, as you go down the y-value increases (not negatively).&lt;/div&gt;&lt;div&gt;I also have learnt how to draw - Rectangles, ellipses, triangles, lines and points, I know how to change line thickness, set the outline to be a different colour, set the inside to be a different colour etc. I don't quite understand how the colour mixing RGB system works yet, the mixing works like mixing lights; I've never really understood how that works thus I will check out a few tuts later on this week on the subject.&lt;/div&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;div&gt;At the end of the chapter you have to draw your own 'character' in processing, mine is fairly appalling compared to Shiffman's but it is original and I feel proud to have accomplished something. &lt;/div&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;div&gt;I tried to upload the code to openprocessing but it isn't displaying - not too sure why..&lt;/div&gt;&lt;div&gt;Here is the &lt;a href=&quot;http://pastebin.com/ydR1kSPr&quot;&gt;code&lt;/a&gt;.&lt;/div&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;/div&gt;
</content>
 </entry>
 
 <entry>
   <title>MAKE Electronics: Experiment 12</title>
   <link href="http://willprice.org//MAKE/Electronics/2011/04/07/make-electronics-experiment-12.html"/>
   <updated>2011-04-07T00:00:00+01:00</updated>
   <id>http://willprice.org/MAKE/Electronics/2011/04/07/make-electronics-experiment-12</id>
   <content type="html">&lt;div class='post'&gt;
&lt;div&gt;&lt;b&gt;&lt;u&gt;Joining 2 wires together:&lt;/u&gt;&lt;/b&gt;&lt;/div&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;I have already soldered quite a bit prior to this so it was more a chance to hone my skills than learning anything new, however I had never soldered low gauge wire, so this was a new experience for me, larger diameters do need more power and my Weller could just about handle the wire in the power chord, I'm not sure how I'd feel about using a 'soldering gun' they look rather unwieldy, I do have a low quality Weller hobby one in the garage which I might have a bash using at some point in the future.&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;div&gt;The first 2 solder joints, the first joint joined the wires across each other in an 'x' shape, this went well. The second joint joined the wires parallel to each other, again, this proved to be successful, I heat shrinked the wires and was fairly happy with my hand work.&lt;/div&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;div&gt;Next I chopped up a long power chord and made it much shorter, I joined each individual wire and heat shrinked all 3 individually, then used some electrical tape on the outside of this as I didn't have a larger enough diameter of heat shrink to use for this purpose. I tested this cable out on my soldering iron, it worked flawlessly, I was somewhat hesitant as I thought I might end up tripping the breakers with a short circuit - this did not happen fortunately! &lt;/div&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;br /&gt;&lt;embed type=&quot;application/x-shockwave-flash&quot; src=&quot;https://picasaweb.google.com/s/c/bin/slideshow.swf&quot; width=&quot;400&quot; height=&quot;267&quot; flashvars=&quot;host=picasaweb.google.com&amp;amp;hl=en_GB&amp;amp;feat=flashalbum&amp;amp;RGB=0x000000&amp;amp;feed=https%3A%2F%2Fpicasaweb.google.com%2Fdata%2Ffeed%2Fapi%2Fuser%2Fwill.price94%2Falbumid%2F5592971306722935137%3Falt%3Drss%26kind%3Dphoto%26hl%3Den_GB&quot; pluginspage=&quot;http://www.macromedia.com/go/getflashplayer&quot;&gt;&lt;/embed&gt;&lt;/div&gt;
</content>
 </entry>
 
 <entry>
   <title>MAKE Electronics: Experiment 11</title>
   <link href="http://willprice.org//MAKE/Electronics/2011/03/31/make-electronics-experiment-11.html"/>
   <updated>2011-03-31T00:00:00+01:00</updated>
   <id>http://willprice.org/MAKE/Electronics/2011/03/31/make-electronics-experiment-11</id>
   <content type="html">&lt;div class='post'&gt;
This is quite a long experiment so I will be writing it in steps.&lt;br /&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;div&gt;&lt;b&gt;&lt;u&gt;Step 1:  Flashing LED with a PUT:&lt;/u&gt;&lt;/b&gt;&lt;/div&gt;&lt;div&gt;A PUT, Programmable Unijunction Transistor is similar in function to a normal transistor in the sense that it acts as a switch. When voltage is applied to the anode it either is blocked or allowed to flow depending on the value that the gate is set at. The voltage at the gate determines how high the voltage at the anode has to be for current to flow.&lt;/div&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;div&gt;The first part of the circuit is setup to explain this theory. The 2 resistors at the gate determine the voltage at the gate (and thus the voltage barrier at the anode). A resistor at the anode protects the PUT from excess current. When the circuit is set up, the capacitor attached to the anode charges and thus the voltage increases until it reaches the voltage set by the gate and current flows through and lights the LED between the cathode and ground.&lt;/div&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;div&gt;&lt;table style=&quot;width: auto;&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td&gt;&lt;a href=&quot;https://picasaweb.google.com/lh/photo/PtoeAyyXIVdoyZGFUrAXsYw0IKFfp4Wx46k7z-QuzVo?feat=embedwebsite&quot;&gt;&lt;img height=&quot;240&quot; src=&quot;https://lh4.googleusercontent.com/-bNpEUvnTu8A/TZMdAImMazI/AAAAAAAAA2M/XIxvK_gIauc/s800/DSCF3770.jpg&quot; width=&quot;320&quot; /&gt;&lt;/a&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td style=&quot;font-family: arial,sans-serif; font-size: 11px; text-align: right;&quot;&gt;From &lt;a href=&quot;https://picasaweb.google.com/105545134685620195788/MAKEElectronicsVideos?authuser=0&amp;amp;feat=embedwebsite&quot;&gt;MAKE Electronics: Videos&lt;/a&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;br /&gt;&lt;/div&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;div&gt;&lt;b style=&quot;text-decoration: underline;&quot;&gt;Step 2: Making a metronome with a speaker:&lt;/b&gt;&lt;br /&gt;This is very much the same circuit as above however the LED is replaced with a speaker, there is a resistor in series with the speaker, I assume this is to protect the speaker or to stop it from distorting. The sound is only faintly audible because of the very low current. A metronome can be produced by using a capacitor with a larger capacitance, this slows the oscillating of the speaker, whereas using a lower capacitance results in a faster oscillation. In this circuit a 0.0047 uf capacitor is used, therefore the speaker oscillates fairly frequently.&lt;/div&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;div&gt;&lt;b&gt;&lt;u&gt;Step 3: Adding an amplifier:&lt;/u&gt;&lt;/b&gt;&lt;/div&gt;&lt;div&gt;In this step, a 2N222 transistor is added to amplify the current to the speaker so it makes a more audible tone. The collector of the transistor is protected by a resistor, the output of the PUT (cathode) is attached to the base of the transistor and then the speaker is put in series with the emitter and ground.&lt;/div&gt;&lt;div&gt;When the current flows through the PUT it reaches the base of the transistor which switches the current from the collector to the emitter. Because more current is flowing through the speaker it sounds louder.&lt;/div&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;div&gt;&lt;u style=&quot;font-weight: bold;&quot;&gt;Step 4: Adding another amplifier:&lt;/u&gt;&lt;/div&gt;&lt;div&gt;To give the speaker one final boost we add another 2N222, this time the speaker is hooked up between the positive voltage rail and anode, I assume it could also be placed in between the emitter and ground, the speaker only operates when the switch is open/the transistor is oscillating.&lt;/div&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;div&gt;&lt;table style=&quot;width: auto;&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td&gt;&lt;a href=&quot;https://picasaweb.google.com/lh/photo/zrmKpijLqfF1tOuieClxEYw0IKFfp4Wx46k7z-QuzVo?feat=embedwebsite&quot;&gt;&lt;img height=&quot;240&quot; src=&quot;https://lh4.googleusercontent.com/-C4e5toqDPuo/TZMyRjqix0I/AAAAAAAAA2M/_kIHx0eV4EY/s800/Demonstration%2520of%25201%2520amp%2520vs%25202.jpg&quot; width=&quot;320&quot; /&gt;&lt;/a&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td style=&quot;font-family: arial,sans-serif; font-size: 11px; text-align: right;&quot;&gt;From &lt;a href=&quot;https://picasaweb.google.com/105545134685620195788/MAKEElectronicsVideos?authuser=0&amp;amp;feat=embedwebsite&quot;&gt;MAKE Electronics: Videos&lt;/a&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;(at first the speaker is only going through 1 transistor, the second time it is being driven by 2, for some reason it is not much louder but at a slightly different pitch, I do not understand why this is!)&lt;/div&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;div&gt;&lt;b&gt;&lt;u&gt;Step 5: Adding step 1 (the slow oscillator) to the fast oscillator driving the speaker:&lt;/u&gt;&lt;/b&gt;&lt;/div&gt;&lt;div&gt;The output from the cathode of the PUT in the top circuit is joined to the gate of the PUT driving the speaker, I assume this varies the gate voltage which means that when the PUT in the top circuit is passing current, the the capacitor in the speaker PUT circuit takes less time to charge and therefore the speaker oscillates more quickly, thus producing a higher tone, then when the slow oscillating PUT is not passing current the capacitor charges slower (as it is having to reach a higher voltage) in the speaker circuit producing a lower tone in the speaker.&lt;/div&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;div&gt;&lt;table style=&quot;width: auto;&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td&gt;&lt;a href=&quot;https://picasaweb.google.com/lh/photo/014nGDELeqsRGihCCvcST4w0IKFfp4Wx46k7z-QuzVo?feat=embedwebsite&quot;&gt;&lt;img height=&quot;240&quot; src=&quot;https://lh5.googleusercontent.com/-WHYQ6XI9vlo/TZLSIX8B-DI/AAAAAAAAA2M/jl6q_PaAPJI/s800/DSCF3783.jpg&quot; width=&quot;320&quot; /&gt;&lt;/a&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td style=&quot;font-family: arial,sans-serif; font-size: 11px; text-align: right;&quot;&gt;From &lt;a href=&quot;https://picasaweb.google.com/105545134685620195788/MAKEElectronicsVideos?authuser=0&amp;amp;feat=embedwebsite&quot;&gt;MAKE Electronics: Videos&lt;/a&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/div&gt;&lt;/div&gt;
</content>
 </entry>
 
 <entry>
   <title>ATX Bench-top Power Supply</title>
   <link href="http://willprice.org//Tools/Electonics/ATX PSU benchtop/2011/03/29/atx-bench-top-power-supply.html"/>
   <updated>2011-03-29T00:00:00+01:00</updated>
   <id>http://willprice.org/Tools/Electonics/ATX PSU benchtop/2011/03/29/atx-bench-top-power-supply</id>
   <content type="html">&lt;div class='post'&gt;
&lt;a href=&quot;https://lh5.googleusercontent.com/_tW3WwfDXALM/TZIk3rYI68I/AAAAAAAAARc/9M_7N8-v1A0/s800/DSCF3848.JPG&quot; onblur=&quot;try {parent.deselectBloggerImageGracefully();} catch(e) {}&quot;&gt;&lt;img style=&quot;float: left; margin: 0pt 10px 10px 0pt; cursor: pointer; width: 606px; height: 454px;&quot; src=&quot;https://lh5.googleusercontent.com/_tW3WwfDXALM/TZIk3rYI68I/AAAAAAAAARc/9M_7N8-v1A0/s800/DSCF3848.JPG&quot; alt=&quot;&quot; border=&quot;0&quot; /&gt;&lt;/a&gt;&lt;br /&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;br /&gt;&lt;br /&gt;&lt;br /&gt;&lt;br /&gt;&lt;br /&gt;&lt;br /&gt;&lt;br /&gt;&lt;br /&gt;&lt;br /&gt;&lt;br /&gt;&lt;br /&gt;&lt;br /&gt;&lt;br /&gt;&lt;br /&gt;&lt;br /&gt;&lt;br /&gt;&lt;br /&gt;&lt;br /&gt;&lt;br /&gt;&lt;br /&gt;&lt;br /&gt;&lt;br /&gt;&lt;br /&gt;I made this on the weekend. It's a converted ATX PSU, I cut the cables off and added binding posts to use as a bench-top power supply, I could have simply bought one of those cheap ones on ebay from china for ~£40 however I had this lying about and it cost me about £6 in parts. &lt;div&gt;First I took apart the PSU and took the PCB out after marking the top heights of the components on the case so I could figure out how to arrange the binding posts &amp;amp; fuses. I then drilled and sanded the holes (time to buy a hand reamer). &lt;/div&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;div&gt;The wires colours correspond to the voltages:&lt;/div&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;div&gt;Yellow - 12V &lt;/div&gt;&lt;div&gt;Yellow/Black - -12V&lt;/div&gt;&lt;div&gt;Orange - 3.3V&lt;/div&gt;&lt;div&gt;Red - 5V&lt;/div&gt;&lt;div&gt;Black - ground&lt;/div&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;div&gt;I desoldered a bunch of these which I didn't need clogging up the case, and then cut the others down to a reasonable length and heat-shrinked them (so far no shorts). I then soldered the leads corresponding to the voltages I wanted; 3.3V, 5V, 12V and ground to their corresponding fuse holders and then from the fuse holder I soldered wire with crimped connectors on the end (to be used with the binding posts), hooked them up and voila, all I had left to do was to attach a switch from ground to the thin green wire which turns the power supply on and off when it is plugged in.&lt;/div&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;div&gt;I mounted the fan the other way around as the binding post obstructed it from being in it's original position, I also put the fan guard on underneath as I didn't want the fan and the wires to hit each other. I used 5A quick blow fuses as these things can output ~20A and I'd rather not see my projects go up in flames if I can help it. &lt;/div&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;div&gt;If you're looking for a 'how-to' vs. an 'account' I suggest looking at these links, which I used when making this power supply, I see no need to saturate the web with another set of instructions!&lt;/div&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;div&gt;&lt;a href=&quot;http://letsmakerobots.com/node/1355&quot;&gt;http://letsmakerobots.com/node/1355&lt;/a&gt; (I'd like to note I do not use a load resistor, I didn't buy one and the supply seems to function ok without it)&lt;/div&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;div&gt;&lt;a href=&quot;http://www.instructables.com/id/ATX--%3E-Lab-Bench-Power-Supply-Conversion/&quot;&gt;http://www.instructables.com/id/ATX--%3E-Lab-Bench-Power-Supply-Conversion/&lt;/a&gt;&lt;/div&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;div&gt;&lt;a href=&quot;http://www.instructables.com/id/Convert-an-ATX-Power-Supply-Into-a-Regular-DC-Powe/&quot;&gt;http://www.instructables.com/id/Convert-an-ATX-Power-Supply-Into-a-Regular-DC-Powe/&lt;/a&gt;&lt;/div&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;div&gt;One final note, if you do undertake this project, be very careful of the power caps inside, I left my supply off for a week before touching it, I'd rather be on the safe side!&lt;/div&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;br /&gt;&lt;embed type=&quot;application/x-shockwave-flash&quot; src=&quot;https://picasaweb.google.com/s/c/bin/slideshow.swf&quot; width=&quot;400&quot; height=&quot;267&quot; flashvars=&quot;host=picasaweb.google.com&amp;hl=en_GB&amp;feat=flashalbum&amp;RGB=0x000000&amp;feed=https%3A%2F%2Fpicasaweb.google.com%2Fdata%2Ffeed%2Fapi%2Fuser%2Fwill.price94%2Falbumid%2F5589568641862132273%3Falt%3Drss%26kind%3Dphoto%26hl%3Den_GB&quot; pluginspage=&quot;http://www.macromedia.com/go/getflashplayer&quot;&gt;&lt;/embed&gt;&lt;/div&gt;
</content>
 </entry>
 
 <entry>
   <title>MAKE Electronics Project 7 - 10</title>
   <link href="http://willprice.org//2011/03/27/make-electronics-project-7-10.html"/>
   <updated>2011-03-27T00:00:00+00:00</updated>
   <id>http://willprice.org/2011/03/27/make-electronics-project-7-10</id>
   <content type="html">&lt;div class='post'&gt;
I have been working through the book &quot;Make: Electronics&quot; By Charles Platt. I have been inspired to document my progress by James Floyd Kelly's blog regarding the book, It has been invaluable when carrying out the projects, check it out here - &quot;http://handsonelectronics.blogspot.com/&quot; I like the idea of documenting your troubles and how you overcome them, it seems most people just document their success rather than failure, I think the latter is far more important when it comes to learning.&lt;br /&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;div&gt;I've written a bit about project 7 - 10 on Xournal and uploaded the PDFs to Google Docs so people can have a look at what I learnt, I find writing down what I did right/wrong helps me understand the circuits and theory better and improves my retention of the content.&lt;/div&gt;&lt;div&gt;&lt;u&gt;&lt;br /&gt;&lt;/u&gt;&lt;/div&gt;&lt;div&gt;&lt;b&gt;&lt;u&gt;Project 7 &amp;amp; 8:&lt;/u&gt;&lt;/b&gt;&lt;/div&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;div&gt;&lt;br /&gt;&lt;iframe frameborder=&quot;0&quot; src=&quot;http://docs.google.com/gview?url=https://docs.google.com/viewer?a=v&amp;amp;pid=explorer&amp;amp;chrome=true&amp;amp;srcid=0B0b7Lw1a8gPuZmI5NDVhZGMtNjY2Zi00M2IyLWIxYmEtY2FkYzgzYzIzYzZi&amp;amp;hl=en_GB&amp;amp;embedded=true&quot; style=&quot;height: 500px; width: 600px;&quot;&gt;&lt;/iframe&gt;&lt;br /&gt;&lt;br /&gt;&lt;table style=&quot;width: auto;&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td&gt;&lt;a href=&quot;https://picasaweb.google.com/lh/photo/gdVnU5Mvp29TBD-xK26txow0IKFfp4Wx46k7z-QuzVo?feat=embedwebsite&quot;&gt;&lt;img height=&quot;240&quot; src=&quot;https://lh4.googleusercontent.com/-qYox8VOn8Ls/TZI1MV6AJmI/AAAAAAAAA2M/pCwNfH9ZzVE/s800/Demo.jpg&quot; width=&quot;320&quot; /&gt;&lt;/a&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td style=&quot;font-family: arial,sans-serif; font-size: 11px; text-align: right;&quot;&gt;From &lt;a href=&quot;https://picasaweb.google.com/105545134685620195788/MAKEElectronicsVideos?authuser=0&amp;amp;feat=embedwebsite&quot;&gt;MAKE Electronics: Videos&lt;/a&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;table style=&quot;width: auto;&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td&gt;&lt;a href=&quot;https://picasaweb.google.com/lh/photo/aLgP_tQtS5FIKRKeezhI64w0IKFfp4Wx46k7z-QuzVo?feat=embedwebsite&quot;&gt;&lt;img height=&quot;240&quot; src=&quot;https://lh3.googleusercontent.com/-1cjUaf3V1J4/TZI3BO_wvtI/AAAAAAAAA2M/WdIRShLQCko/s800/Relay%2520oscillating%2520sans%2520cap.jpg&quot; width=&quot;320&quot; /&gt;&lt;/a&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td style=&quot;font-family: arial,sans-serif; font-size: 11px; text-align: right;&quot;&gt;From &lt;a href=&quot;https://picasaweb.google.com/105545134685620195788/MAKEElectronicsVideos?authuser=0&amp;amp;feat=embedwebsite&quot;&gt;MAKE Electronics: Videos&lt;/a&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;table style=&quot;width: auto;&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td&gt;&lt;a href=&quot;https://picasaweb.google.com/lh/photo/wg7GKjSZ27SsAp8TNU02uIw0IKFfp4Wx46k7z-QuzVo?feat=embedwebsite&quot;&gt;&lt;img height=&quot;240&quot; src=&quot;https://lh5.googleusercontent.com/-yYw3qir70Vw/TZI3BH8uDyI/AAAAAAAAA2M/2zaiqJwb60A/s800/DSCF3761.jpg&quot; width=&quot;320&quot; /&gt;&lt;/a&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td style=&quot;font-family: arial,sans-serif; font-size: 11px; text-align: right;&quot;&gt;From &lt;a href=&quot;https://picasaweb.google.com/105545134685620195788/MAKEElectronicsVideos?authuser=0&amp;amp;feat=embedwebsite&quot;&gt;MAKE Electronics: Videos&lt;/a&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;div&gt;&lt;b&gt;&lt;u&gt;Project 9:&lt;/u&gt;&lt;/b&gt;&lt;/div&gt;&lt;div&gt;&lt;br /&gt;&lt;iframe frameborder=&quot;0&quot; src=&quot;http://docs.google.com/gview?url=https://docs.google.com/viewer?a=v&amp;amp;pid=explorer&amp;amp;chrome=true&amp;amp;srcid=0B0b7Lw1a8gPuNDZmNTdkNmYtNGQ2OC00MTY4LTgxM2QtZTc4YzhiYWJkNjhi&amp;amp;hl=en_GB&amp;amp;embedded=true&quot; style=&quot;height: 500px; width: 600px;&quot;&gt;&lt;/iframe&gt;&lt;br /&gt;&lt;/div&gt;&lt;div&gt;&lt;br /&gt;&lt;table style=&quot;width: auto;&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td&gt;&lt;a href=&quot;https://picasaweb.google.com/lh/photo/j527sA2WEdbF8R39jmA5DYw0IKFfp4Wx46k7z-QuzVo?feat=embedwebsite&quot;&gt;&lt;img height=&quot;240&quot; src=&quot;https://lh3.googleusercontent.com/-h-JCgH0yn5Y/TZNCVU5-kFI/AAAAAAAAA2M/bJt74ZPpNcM/s800/DSCF3764.jpg&quot; width=&quot;320&quot; /&gt;&lt;/a&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td style=&quot;font-family: arial,sans-serif; font-size: 11px; text-align: right;&quot;&gt;From &lt;a href=&quot;https://picasaweb.google.com/105545134685620195788/MAKEElectronicsVideos?authuser=0&amp;amp;feat=embedwebsite&quot;&gt;MAKE Electronics: Videos&lt;/a&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;br /&gt;&lt;/div&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;div&gt;&lt;b&gt;&lt;u&gt;Project 10:&lt;/u&gt;&lt;/b&gt;&lt;/div&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;iframe frameborder=&quot;0&quot; src=&quot;http://docs.google.com/gview?url=https://docs.google.com/viewer?a=v&amp;amp;pid=explorer&amp;amp;chrome=true&amp;amp;srcid=0B0b7Lw1a8gPuYTZmMjczZDYtMWQwMi00N2Y2LWEyYzQtZGI3NTQwODUwNmMw&amp;amp;hl=en_GB&amp;amp;embedded=true&quot; style=&quot;height: 500px; width: 600px;&quot;&gt;&lt;/iframe&gt;&lt;br /&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;table style=&quot;width: auto;&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td&gt;&lt;a href=&quot;https://picasaweb.google.com/lh/photo/27s4Y-PMmNvkJmxJXrWL94w0IKFfp4Wx46k7z-QuzVo?feat=embedwebsite&quot;&gt;&lt;img height=&quot;240&quot; src=&quot;https://lh6.googleusercontent.com/-iJnaBmAjdCQ/TZMyRgUgEyI/AAAAAAAAA2M/9qpp0seT4Sk/s800/DSCF3766.jpg&quot; width=&quot;320&quot; /&gt;&lt;/a&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td style=&quot;font-family: arial,sans-serif; font-size: 11px; text-align: right;&quot;&gt;From &lt;a href=&quot;https://picasaweb.google.com/105545134685620195788/MAKEElectronicsVideos?authuser=0&amp;amp;feat=embedwebsite&quot;&gt;MAKE Electronics: Videos&lt;/a&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;br /&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;object height=&quot;344&quot; width=&quot;425&quot;&gt;&lt;param name=&quot;movie&quot; value=&quot;http://www.youtube.com/v/Ox2s8i17i3I?hl=en&amp;amp;fs=1&quot;&gt;&lt;param name=&quot;allowFullScreen&quot; value=&quot;true&quot;&gt;&lt;param name=&quot;allowscriptaccess&quot; value=&quot;always&quot;&gt;&lt;embed src=&quot;http://www.youtube.com/v/Ox2s8i17i3I?hl=en&amp;amp;fs=1&quot; type=&quot;application/x-shockwave-flash&quot; allowscriptaccess=&quot;always&quot; allowfullscreen=&quot;true&quot; width=&quot;425&quot; height=&quot;344&quot;&gt;&lt;/embed&gt;&lt;/object&gt;&lt;/div&gt;&lt;/div&gt;
</content>
 </entry>
 
 
</feed>
